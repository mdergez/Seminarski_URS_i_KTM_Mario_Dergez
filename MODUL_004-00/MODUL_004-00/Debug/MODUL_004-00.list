
MODUL_004-00.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a14  080001e0  080001e0  000011e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08005bf4  08005bf4  00006bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c04  08005c04  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005c04  08005c04  00006c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c0c  08005c0c  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c0c  08005c0c  00006c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c10  08005c10  00006c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005c14  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000010  08005c24  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08005c24  00007268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7fc  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000226c  00000000  00000000  0001483c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  00016aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009fc  00000000  00000000  000177a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a3c  00000000  00000000  000181a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f9aa  00000000  00000000  0003abe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc86e  00000000  00000000  0004a58a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126df8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036d8  00000000  00000000  00126e3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0012a514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005bdc 	.word	0x08005bdc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	08005bdc 	.word	0x08005bdc

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	@ 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d52:	463b      	mov	r3, r7
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d5e:	4b21      	ldr	r3, [pc, #132]	@ (8000de4 <MX_ADC1_Init+0x98>)
 8000d60:	4a21      	ldr	r2, [pc, #132]	@ (8000de8 <MX_ADC1_Init+0x9c>)
 8000d62:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d64:	4b1f      	ldr	r3, [pc, #124]	@ (8000de4 <MX_ADC1_Init+0x98>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000de4 <MX_ADC1_Init+0x98>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d70:	4b1c      	ldr	r3, [pc, #112]	@ (8000de4 <MX_ADC1_Init+0x98>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d76:	4b1b      	ldr	r3, [pc, #108]	@ (8000de4 <MX_ADC1_Init+0x98>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d7c:	4b19      	ldr	r3, [pc, #100]	@ (8000de4 <MX_ADC1_Init+0x98>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d84:	4b17      	ldr	r3, [pc, #92]	@ (8000de4 <MX_ADC1_Init+0x98>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d8a:	4b16      	ldr	r3, [pc, #88]	@ (8000de4 <MX_ADC1_Init+0x98>)
 8000d8c:	4a17      	ldr	r2, [pc, #92]	@ (8000dec <MX_ADC1_Init+0xa0>)
 8000d8e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d90:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <MX_ADC1_Init+0x98>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d96:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <MX_ADC1_Init+0x98>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <MX_ADC1_Init+0x98>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <MX_ADC1_Init+0x98>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000daa:	480e      	ldr	r0, [pc, #56]	@ (8000de4 <MX_ADC1_Init+0x98>)
 8000dac:	f001 fcd2 	bl	8002754 <HAL_ADC_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000db6:	f001 f9a1 	bl	80020fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4806      	ldr	r0, [pc, #24]	@ (8000de4 <MX_ADC1_Init+0x98>)
 8000dcc:	f001 fe6c 	bl	8002aa8 <HAL_ADC_ConfigChannel>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000dd6:	f001 f991 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	2000002c 	.word	0x2000002c
 8000de8:	40012000 	.word	0x40012000
 8000dec:	0f000001 	.word	0x0f000001

08000df0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	@ 0x28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a15      	ldr	r2, [pc, #84]	@ (8000e64 <HAL_ADC_MspInit+0x74>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d123      	bne.n	8000e5a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e12:	4b15      	ldr	r3, [pc, #84]	@ (8000e68 <HAL_ADC_MspInit+0x78>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e16:	4a14      	ldr	r2, [pc, #80]	@ (8000e68 <HAL_ADC_MspInit+0x78>)
 8000e18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e1e:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <HAL_ADC_MspInit+0x78>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e68 <HAL_ADC_MspInit+0x78>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e68 <HAL_ADC_MspInit+0x78>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e36:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <HAL_ADC_MspInit+0x78>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e42:	2308      	movs	r3, #8
 8000e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e46:	2303      	movs	r3, #3
 8000e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	@ (8000e6c <HAL_ADC_MspInit+0x7c>)
 8000e56:	f002 ffd9 	bl	8003e0c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	3728      	adds	r7, #40	@ 0x28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40012000 	.word	0x40012000
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020000 	.word	0x40020000

08000e70 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e74:	4b17      	ldr	r3, [pc, #92]	@ (8000ed4 <MX_CAN1_Init+0x64>)
 8000e76:	4a18      	ldr	r2, [pc, #96]	@ (8000ed8 <MX_CAN1_Init+0x68>)
 8000e78:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000e7a:	4b16      	ldr	r3, [pc, #88]	@ (8000ed4 <MX_CAN1_Init+0x64>)
 8000e7c:	2204      	movs	r2, #4
 8000e7e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e80:	4b14      	ldr	r3, [pc, #80]	@ (8000ed4 <MX_CAN1_Init+0x64>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e86:	4b13      	ldr	r3, [pc, #76]	@ (8000ed4 <MX_CAN1_Init+0x64>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	@ (8000ed4 <MX_CAN1_Init+0x64>)
 8000e8e:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000e92:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed4 <MX_CAN1_Init+0x64>)
 8000e96:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000e9a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed4 <MX_CAN1_Init+0x64>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed4 <MX_CAN1_Init+0x64>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed4 <MX_CAN1_Init+0x64>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000eae:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <MX_CAN1_Init+0x64>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000eb4:	4b07      	ldr	r3, [pc, #28]	@ (8000ed4 <MX_CAN1_Init+0x64>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000eba:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <MX_CAN1_Init+0x64>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ec0:	4804      	ldr	r0, [pc, #16]	@ (8000ed4 <MX_CAN1_Init+0x64>)
 8000ec2:	f002 f841 	bl	8002f48 <HAL_CAN_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000ecc:	f001 f916 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000074 	.word	0x20000074
 8000ed8:	40006400 	.word	0x40006400

08000edc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	@ 0x28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8000f78 <HAL_CAN_MspInit+0x9c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d138      	bne.n	8000f70 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000efe:	4b1f      	ldr	r3, [pc, #124]	@ (8000f7c <HAL_CAN_MspInit+0xa0>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f02:	4a1e      	ldr	r2, [pc, #120]	@ (8000f7c <HAL_CAN_MspInit+0xa0>)
 8000f04:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000f7c <HAL_CAN_MspInit+0xa0>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b19      	ldr	r3, [pc, #100]	@ (8000f7c <HAL_CAN_MspInit+0xa0>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	4a18      	ldr	r2, [pc, #96]	@ (8000f7c <HAL_CAN_MspInit+0xa0>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f22:	4b16      	ldr	r3, [pc, #88]	@ (8000f7c <HAL_CAN_MspInit+0xa0>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f2e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f40:	2309      	movs	r3, #9
 8000f42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480d      	ldr	r0, [pc, #52]	@ (8000f80 <HAL_CAN_MspInit+0xa4>)
 8000f4c:	f002 ff5e 	bl	8003e0c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	2013      	movs	r0, #19
 8000f56:	f002 ff22 	bl	8003d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000f5a:	2013      	movs	r0, #19
 8000f5c:	f002 ff3b 	bl	8003dd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2100      	movs	r1, #0
 8000f64:	2014      	movs	r0, #20
 8000f66:	f002 ff1a 	bl	8003d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f6a:	2014      	movs	r0, #20
 8000f6c:	f002 ff33 	bl	8003dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000f70:	bf00      	nop
 8000f72:	3728      	adds	r7, #40	@ 0x28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40006400 	.word	0x40006400
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40020000 	.word	0x40020000

08000f84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	@ 0x28
 8000f88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f9a:	4b65      	ldr	r3, [pc, #404]	@ (8001130 <MX_GPIO_Init+0x1ac>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	4a64      	ldr	r2, [pc, #400]	@ (8001130 <MX_GPIO_Init+0x1ac>)
 8000fa0:	f043 0310 	orr.w	r3, r3, #16
 8000fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa6:	4b62      	ldr	r3, [pc, #392]	@ (8001130 <MX_GPIO_Init+0x1ac>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	f003 0310 	and.w	r3, r3, #16
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb2:	4b5f      	ldr	r3, [pc, #380]	@ (8001130 <MX_GPIO_Init+0x1ac>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	4a5e      	ldr	r2, [pc, #376]	@ (8001130 <MX_GPIO_Init+0x1ac>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbe:	4b5c      	ldr	r3, [pc, #368]	@ (8001130 <MX_GPIO_Init+0x1ac>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	4b59      	ldr	r3, [pc, #356]	@ (8001130 <MX_GPIO_Init+0x1ac>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	4a58      	ldr	r2, [pc, #352]	@ (8001130 <MX_GPIO_Init+0x1ac>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd6:	4b56      	ldr	r3, [pc, #344]	@ (8001130 <MX_GPIO_Init+0x1ac>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fe2:	4b53      	ldr	r3, [pc, #332]	@ (8001130 <MX_GPIO_Init+0x1ac>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	4a52      	ldr	r2, [pc, #328]	@ (8001130 <MX_GPIO_Init+0x1ac>)
 8000fe8:	f043 0320 	orr.w	r3, r3, #32
 8000fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fee:	4b50      	ldr	r3, [pc, #320]	@ (8001130 <MX_GPIO_Init+0x1ac>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	f003 0320 	and.w	r3, r3, #32
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ffa:	4b4d      	ldr	r3, [pc, #308]	@ (8001130 <MX_GPIO_Init+0x1ac>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	4a4c      	ldr	r2, [pc, #304]	@ (8001130 <MX_GPIO_Init+0x1ac>)
 8001000:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001004:	6313      	str	r3, [r2, #48]	@ 0x30
 8001006:	4b4a      	ldr	r3, [pc, #296]	@ (8001130 <MX_GPIO_Init+0x1ac>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	2107      	movs	r1, #7
 8001016:	4847      	ldr	r0, [pc, #284]	@ (8001134 <MX_GPIO_Init+0x1b0>)
 8001018:	f003 f8ac 	bl	8004174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001022:	4845      	ldr	r0, [pc, #276]	@ (8001138 <MX_GPIO_Init+0x1b4>)
 8001024:	f003 f8a6 	bl	8004174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	2103      	movs	r1, #3
 800102c:	4843      	ldr	r0, [pc, #268]	@ (800113c <MX_GPIO_Init+0x1b8>)
 800102e:	f003 f8a1 	bl	8004174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001038:	4841      	ldr	r0, [pc, #260]	@ (8001140 <MX_GPIO_Init+0x1bc>)
 800103a:	f003 f89b 	bl	8004174 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800103e:	231c      	movs	r3, #28
 8001040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001042:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	483b      	ldr	r0, [pc, #236]	@ (8001140 <MX_GPIO_Init+0x1bc>)
 8001054:	f002 feda 	bl	8003e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001058:	2307      	movs	r3, #7
 800105a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	4831      	ldr	r0, [pc, #196]	@ (8001134 <MX_GPIO_Init+0x1b0>)
 8001070:	f002 fecc 	bl	8003e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001074:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001078:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107a:	2301      	movs	r3, #1
 800107c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	4619      	mov	r1, r3
 800108c:	482a      	ldr	r0, [pc, #168]	@ (8001138 <MX_GPIO_Init+0x1b4>)
 800108e:	f002 febd 	bl	8003e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001092:	2303      	movs	r3, #3
 8001094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001096:	2301      	movs	r3, #1
 8001098:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	4824      	ldr	r0, [pc, #144]	@ (800113c <MX_GPIO_Init+0x1b8>)
 80010aa:	f002 feaf 	bl	8003e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80010ae:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80010b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b4:	2301      	movs	r3, #1
 80010b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	481e      	ldr	r0, [pc, #120]	@ (8001140 <MX_GPIO_Init+0x1bc>)
 80010c8:	f002 fea0 	bl	8003e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80010d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d8:	2301      	movs	r3, #1
 80010da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	4816      	ldr	r0, [pc, #88]	@ (800113c <MX_GPIO_Init+0x1b8>)
 80010e4:	f002 fe92 	bl	8003e0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 3, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2103      	movs	r1, #3
 80010ec:	2008      	movs	r0, #8
 80010ee:	f002 fe56 	bl	8003d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80010f2:	2008      	movs	r0, #8
 80010f4:	f002 fe6f 	bl	8003dd6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 3, 0);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2103      	movs	r1, #3
 80010fc:	2009      	movs	r0, #9
 80010fe:	f002 fe4e 	bl	8003d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001102:	2009      	movs	r0, #9
 8001104:	f002 fe67 	bl	8003dd6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 3, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	2103      	movs	r1, #3
 800110c:	200a      	movs	r0, #10
 800110e:	f002 fe46 	bl	8003d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001112:	200a      	movs	r0, #10
 8001114:	f002 fe5f 	bl	8003dd6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8001118:	2200      	movs	r2, #0
 800111a:	2106      	movs	r1, #6
 800111c:	2028      	movs	r0, #40	@ 0x28
 800111e:	f002 fe3e 	bl	8003d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001122:	2028      	movs	r0, #40	@ 0x28
 8001124:	f002 fe57 	bl	8003dd6 <HAL_NVIC_EnableIRQ>

}
 8001128:	bf00      	nop
 800112a:	3728      	adds	r7, #40	@ 0x28
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40023800 	.word	0x40023800
 8001134:	40020800 	.word	0x40020800
 8001138:	40021400 	.word	0x40021400
 800113c:	40021800 	.word	0x40021800
 8001140:	40021000 	.word	0x40021000

08001144 <HAL_CAN_RxFifo0MsgPendingCallback>:
CAN_FilterTypeDef sFilterConfig;
CAN_RxHeaderTypeDef RxHeader;
uint8_t RxData[8] = {0};

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800114c:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 800114e:	4a07      	ldr	r2, [pc, #28]	@ (800116c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001150:	2100      	movs	r1, #0
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f002 f9d1 	bl	80034fa <HAL_CAN_GetRxMessage>

	msg_flag = msg_flag || 0b00000100; //when Rx interrupt is activated, change flag - there is data that needs to be processed
 8001158:	4b05      	ldr	r3, [pc, #20]	@ (8001170 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800115a:	2201      	movs	r2, #1
 800115c:	701a      	strb	r2, [r3, #0]

}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	2000012c 	.word	0x2000012c
 800116c:	20000110 	.word	0x20000110
 8001170:	200000c0 	.word	0x200000c0

08001174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001178:	f001 fa8f 	bl	800269a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800117c:	f000 fb60 	bl	8001840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001180:	f7ff ff00 	bl	8000f84 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001184:	f7ff fde2 	bl	8000d4c <MX_ADC1_Init>
  MX_CAN1_Init();
 8001188:	f7ff fe72 	bl	8000e70 <MX_CAN1_Init>
  MX_TIM2_Init();
 800118c:	f001 f852 	bl	8002234 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001190:	f001 f8dc 	bl	800234c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001194:	f001 f928 	bl	80023e8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001198:	f001 f976 	bl	8002488 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  //KTM
  HAL_CAN_Start(&hcan1);
 800119c:	4891      	ldr	r0, [pc, #580]	@ (80013e4 <main+0x270>)
 800119e:	f002 f898 	bl	80032d2 <HAL_CAN_Start>

  //CAN bus Tx config
  TxHeader.DLC = 8;
 80011a2:	4b91      	ldr	r3, [pc, #580]	@ (80013e8 <main+0x274>)
 80011a4:	2208      	movs	r2, #8
 80011a6:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 80011a8:	4b8f      	ldr	r3, [pc, #572]	@ (80013e8 <main+0x274>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 80011ae:	4b8e      	ldr	r3, [pc, #568]	@ (80013e8 <main+0x274>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 255;
 80011b4:	4b8c      	ldr	r3, [pc, #560]	@ (80013e8 <main+0x274>)
 80011b6:	22ff      	movs	r2, #255	@ 0xff
 80011b8:	601a      	str	r2, [r3, #0]

  //CAN bus Rx config
  sFilterConfig.FilterBank = 0;
 80011ba:	4b8c      	ldr	r3, [pc, #560]	@ (80013ec <main+0x278>)
 80011bc:	2200      	movs	r2, #0
 80011be:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterIdLow = 0;
 80011c0:	4b8a      	ldr	r3, [pc, #552]	@ (80013ec <main+0x278>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterIdHigh = 0;
 80011c6:	4b89      	ldr	r3, [pc, #548]	@ (80013ec <main+0x278>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterMaskIdLow = 0;
 80011cc:	4b87      	ldr	r3, [pc, #540]	@ (80013ec <main+0x278>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterMaskIdHigh = 0;
 80011d2:	4b86      	ldr	r3, [pc, #536]	@ (80013ec <main+0x278>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80011d8:	4b84      	ldr	r3, [pc, #528]	@ (80013ec <main+0x278>)
 80011da:	2200      	movs	r2, #0
 80011dc:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80011de:	4b83      	ldr	r3, [pc, #524]	@ (80013ec <main+0x278>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80011e4:	4b81      	ldr	r3, [pc, #516]	@ (80013ec <main+0x278>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80011ea:	4b80      	ldr	r3, [pc, #512]	@ (80013ec <main+0x278>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]

  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80011f0:	497e      	ldr	r1, [pc, #504]	@ (80013ec <main+0x278>)
 80011f2:	487c      	ldr	r0, [pc, #496]	@ (80013e4 <main+0x270>)
 80011f4:	f001 ffa3 	bl	800313e <HAL_CAN_ConfigFilter>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING);
 80011f8:	2110      	movs	r1, #16
 80011fa:	487a      	ldr	r0, [pc, #488]	@ (80013e4 <main+0x270>)
 80011fc:	f002 fa9f 	bl	800373e <HAL_CAN_ActivateNotification>
  {



	  //ADC get data
	  HAL_ADC_Start(&hadc1);
 8001200:	487b      	ldr	r0, [pc, #492]	@ (80013f0 <main+0x27c>)
 8001202:	f001 faeb 	bl	80027dc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10); //do ADC every 10 ms
 8001206:	210a      	movs	r1, #10
 8001208:	4879      	ldr	r0, [pc, #484]	@ (80013f0 <main+0x27c>)
 800120a:	f001 fbb5 	bl	8002978 <HAL_ADC_PollForConversion>

	  ADC1_value = HAL_ADC_GetValue(&hadc1);
 800120e:	4878      	ldr	r0, [pc, #480]	@ (80013f0 <main+0x27c>)
 8001210:	f001 fc3d 	bl	8002a8e <HAL_ADC_GetValue>
 8001214:	4603      	mov	r3, r0
 8001216:	b29a      	uxth	r2, r3
 8001218:	4b76      	ldr	r3, [pc, #472]	@ (80013f4 <main+0x280>)
 800121a:	801a      	strh	r2, [r3, #0]


	  //process ADC1 data
	  //reference voltage == 4096 milivolts
	  if (ADC1_value == 1650) //current sensor TCSM1123B5   --> 1.65V == 0A
 800121c:	4b75      	ldr	r3, [pc, #468]	@ (80013f4 <main+0x280>)
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	f240 6272 	movw	r2, #1650	@ 0x672
 8001224:	4293      	cmp	r3, r2
 8001226:	d103      	bne.n	8001230 <main+0xbc>
	  {
		  current = 0;
 8001228:	4b73      	ldr	r3, [pc, #460]	@ (80013f8 <main+0x284>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	e041      	b.n	80012b4 <main+0x140>
	  }

	  //current sensor sensitivity == 150 mV/A
	  else if (ADC1_value > 1650)
 8001230:	4b70      	ldr	r3, [pc, #448]	@ (80013f4 <main+0x280>)
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	f240 6272 	movw	r2, #1650	@ 0x672
 8001238:	4293      	cmp	r3, r2
 800123a:	d920      	bls.n	800127e <main+0x10a>
	  {
		  current = (int)((float)((ADC1_value - 1650) * 1000) / 150); //current in mA
 800123c:	4b6d      	ldr	r3, [pc, #436]	@ (80013f4 <main+0x280>)
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	f2a3 6372 	subw	r3, r3, #1650	@ 0x672
 8001244:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001248:	fb02 f303 	mul.w	r3, r2, r3
 800124c:	ee07 3a90 	vmov	s15, r3
 8001250:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001254:	eddf 6a69 	vldr	s13, [pc, #420]	@ 80013fc <main+0x288>
 8001258:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800125c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001260:	ee17 2a90 	vmov	r2, s15
 8001264:	4b64      	ldr	r3, [pc, #400]	@ (80013f8 <main+0x284>)
 8001266:	601a      	str	r2, [r3, #0]
		  direction = direction && 0b11111110; //normal direction of current
 8001268:	4b65      	ldr	r3, [pc, #404]	@ (8001400 <main+0x28c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	bf14      	ite	ne
 8001270:	2301      	movne	r3, #1
 8001272:	2300      	moveq	r3, #0
 8001274:	b2db      	uxtb	r3, r3
 8001276:	461a      	mov	r2, r3
 8001278:	4b61      	ldr	r3, [pc, #388]	@ (8001400 <main+0x28c>)
 800127a:	701a      	strb	r2, [r3, #0]
 800127c:	e01a      	b.n	80012b4 <main+0x140>
	  }
	  else
	  {
		  current = (int)((float)((1650 - ADC1_value) * 1000) / 150); //current in mA
 800127e:	4b5d      	ldr	r3, [pc, #372]	@ (80013f4 <main+0x280>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	461a      	mov	r2, r3
 8001284:	f240 6372 	movw	r3, #1650	@ 0x672
 8001288:	1a9b      	subs	r3, r3, r2
 800128a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800128e:	fb02 f303 	mul.w	r3, r2, r3
 8001292:	ee07 3a90 	vmov	s15, r3
 8001296:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800129a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80013fc <main+0x288>
 800129e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012a6:	ee17 2a90 	vmov	r2, s15
 80012aa:	4b53      	ldr	r3, [pc, #332]	@ (80013f8 <main+0x284>)
 80012ac:	601a      	str	r2, [r3, #0]
		  direction = direction || 0b00000001; //reverse direction of current
 80012ae:	4b54      	ldr	r3, [pc, #336]	@ (8001400 <main+0x28c>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	701a      	strb	r2, [r3, #0]


	  //KTM
	  //CAN bus data
	  //process CAN data
	  if (msg_flag >> 2) //there is unprocessed received data
 80012b4:	4b53      	ldr	r3, [pc, #332]	@ (8001404 <main+0x290>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	089b      	lsrs	r3, r3, #2
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d01b      	beq.n	80012f8 <main+0x184>
	  {
		  if (RxData[0] >> 1) //last 4 bits of RxData[0] high ---> needs to send data
 80012c0:	4b51      	ldr	r3, [pc, #324]	@ (8001408 <main+0x294>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	085b      	lsrs	r3, r3, #1
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d002      	beq.n	80012d2 <main+0x15e>
		  {
			  msg_flag = msg_flag || 0b00000001;
 80012cc:	4b4d      	ldr	r3, [pc, #308]	@ (8001404 <main+0x290>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	701a      	strb	r2, [r3, #0]
		  }

		  if (RxData[0] >> 5) //first 4 bits of RxData[0] high ---> there is recieved data
 80012d2:	4b4d      	ldr	r3, [pc, #308]	@ (8001408 <main+0x294>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	095b      	lsrs	r3, r3, #5
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d002      	beq.n	80012e4 <main+0x170>
		  {
			  msg_flag = msg_flag || 0b00000010;
 80012de:	4b49      	ldr	r3, [pc, #292]	@ (8001404 <main+0x290>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	701a      	strb	r2, [r3, #0]
		  }

		  msg_flag = msg_flag &&11111011; //reset flag
 80012e4:	4b47      	ldr	r3, [pc, #284]	@ (8001404 <main+0x290>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	bf14      	ite	ne
 80012ec:	2301      	movne	r3, #1
 80012ee:	2300      	moveq	r3, #0
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b43      	ldr	r3, [pc, #268]	@ (8001404 <main+0x290>)
 80012f6:	701a      	strb	r2, [r3, #0]
	  }

	  if (msg_flag >> 1) //if there is recieved data, process it
 80012f8:	4b42      	ldr	r3, [pc, #264]	@ (8001404 <main+0x290>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	085b      	lsrs	r3, r3, #1
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b00      	cmp	r3, #0
 8001302:	d04e      	beq.n	80013a2 <main+0x22e>
	  {
		  if (RxData[1] >> 1) //actuator direction is set to reverse
 8001304:	4b40      	ldr	r3, [pc, #256]	@ (8001408 <main+0x294>)
 8001306:	785b      	ldrb	r3, [r3, #1]
 8001308:	085b      	lsrs	r3, r3, #1
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <main+0x1a4>
		  {
			  actuator_status = actuator_status || 0b00010000;
 8001310:	4b3e      	ldr	r3, [pc, #248]	@ (800140c <main+0x298>)
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
 8001316:	e009      	b.n	800132c <main+0x1b8>
		  }
		  else //actuator direction is set to normal
		  {
			  actuator_status = actuator_status && 0b11101111;
 8001318:	4b3c      	ldr	r3, [pc, #240]	@ (800140c <main+0x298>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	bf14      	ite	ne
 8001320:	2301      	movne	r3, #1
 8001322:	2300      	moveq	r3, #0
 8001324:	b2db      	uxtb	r3, r3
 8001326:	461a      	mov	r2, r3
 8001328:	4b38      	ldr	r3, [pc, #224]	@ (800140c <main+0x298>)
 800132a:	701a      	strb	r2, [r3, #0]
		  }

		  if (RxData[1] >> 5) //actuator is turned
 800132c:	4b36      	ldr	r3, [pc, #216]	@ (8001408 <main+0x294>)
 800132e:	785b      	ldrb	r3, [r3, #1]
 8001330:	095b      	lsrs	r3, r3, #5
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <main+0x1cc>
		  {
			  actuator_status = actuator_status || 0b00100000;
 8001338:	4b34      	ldr	r3, [pc, #208]	@ (800140c <main+0x298>)
 800133a:	2201      	movs	r2, #1
 800133c:	701a      	strb	r2, [r3, #0]
 800133e:	e009      	b.n	8001354 <main+0x1e0>
		  }
		  else //actuator direction is set to normal
		  {
			  actuator_status = actuator_status && 0b11011111;
 8001340:	4b32      	ldr	r3, [pc, #200]	@ (800140c <main+0x298>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	bf14      	ite	ne
 8001348:	2301      	movne	r3, #1
 800134a:	2300      	moveq	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	461a      	mov	r2, r3
 8001350:	4b2e      	ldr	r3, [pc, #184]	@ (800140c <main+0x298>)
 8001352:	701a      	strb	r2, [r3, #0]
		  }

		  //PWM_input = 0;
		  PWM_input = RxData[6];
 8001354:	4b2c      	ldr	r3, [pc, #176]	@ (8001408 <main+0x294>)
 8001356:	799b      	ldrb	r3, [r3, #6]
 8001358:	461a      	mov	r2, r3
 800135a:	4b2d      	ldr	r3, [pc, #180]	@ (8001410 <main+0x29c>)
 800135c:	801a      	strh	r2, [r3, #0]
		  //PWM_input = PWM_input << 8;
		  //PWM_input = PWM_input || RxData[7]

		  msg_flag = msg_flag && 0b11111101; //there is no more need to process data
 800135e:	4b29      	ldr	r3, [pc, #164]	@ (8001404 <main+0x290>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	bf14      	ite	ne
 8001366:	2301      	movne	r3, #1
 8001368:	2300      	moveq	r3, #0
 800136a:	b2db      	uxtb	r3, r3
 800136c:	461a      	mov	r2, r3
 800136e:	4b25      	ldr	r3, [pc, #148]	@ (8001404 <main+0x290>)
 8001370:	701a      	strb	r2, [r3, #0]
		  RxData[0] = 0; //set array to 0
 8001372:	4b25      	ldr	r3, [pc, #148]	@ (8001408 <main+0x294>)
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
		  RxData[1] = 0;
 8001378:	4b23      	ldr	r3, [pc, #140]	@ (8001408 <main+0x294>)
 800137a:	2200      	movs	r2, #0
 800137c:	705a      	strb	r2, [r3, #1]
		  RxData[2] = 0;
 800137e:	4b22      	ldr	r3, [pc, #136]	@ (8001408 <main+0x294>)
 8001380:	2200      	movs	r2, #0
 8001382:	709a      	strb	r2, [r3, #2]
		  RxData[3] = 0;
 8001384:	4b20      	ldr	r3, [pc, #128]	@ (8001408 <main+0x294>)
 8001386:	2200      	movs	r2, #0
 8001388:	70da      	strb	r2, [r3, #3]
		  RxData[4] = 0;
 800138a:	4b1f      	ldr	r3, [pc, #124]	@ (8001408 <main+0x294>)
 800138c:	2200      	movs	r2, #0
 800138e:	711a      	strb	r2, [r3, #4]
		  RxData[5] = 0;
 8001390:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <main+0x294>)
 8001392:	2200      	movs	r2, #0
 8001394:	715a      	strb	r2, [r3, #5]
		  RxData[6] = 0;
 8001396:	4b1c      	ldr	r3, [pc, #112]	@ (8001408 <main+0x294>)
 8001398:	2200      	movs	r2, #0
 800139a:	719a      	strb	r2, [r3, #6]
		  RxData[7] = 0;
 800139c:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <main+0x294>)
 800139e:	2200      	movs	r2, #0
 80013a0:	71da      	strb	r2, [r3, #7]
	  }


	  //process PWM

	  if (PWM_input < 100)
 80013a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001410 <main+0x29c>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	2b63      	cmp	r3, #99	@ 0x63
 80013a8:	d810      	bhi.n	80013cc <main+0x258>
	  {
		  PWM_value = 0;
 80013aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001414 <main+0x2a0>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	801a      	strh	r2, [r3, #0]
		  actuator_status = actuator_status && 0b11111011; //PWM is not present
 80013b0:	4b16      	ldr	r3, [pc, #88]	@ (800140c <main+0x298>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	bf14      	ite	ne
 80013b8:	2301      	movne	r3, #1
 80013ba:	2300      	moveq	r3, #0
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	461a      	mov	r2, r3
 80013c0:	4b12      	ldr	r3, [pc, #72]	@ (800140c <main+0x298>)
 80013c2:	701a      	strb	r2, [r3, #0]
		  actuator_status = actuator_status || 0b00001000; //actuator needs stopping
 80013c4:	4b11      	ldr	r3, [pc, #68]	@ (800140c <main+0x298>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	701a      	strb	r2, [r3, #0]
 80013ca:	e045      	b.n	8001458 <main+0x2e4>
	  }

	  //if PWM is more than 100 then actuator status is set to running and PWM status is present
	  else if (PWM_input > 4000)
 80013cc:	4b10      	ldr	r3, [pc, #64]	@ (8001410 <main+0x29c>)
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80013d4:	d920      	bls.n	8001418 <main+0x2a4>
	  {
		  PWM_value = 100;
 80013d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001414 <main+0x2a0>)
 80013d8:	2264      	movs	r2, #100	@ 0x64
 80013da:	801a      	strh	r2, [r3, #0]
		  actuator_status = actuator_status || 0b00000101; //actuator is running and has PWM
 80013dc:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <main+0x298>)
 80013de:	2201      	movs	r2, #1
 80013e0:	701a      	strb	r2, [r3, #0]
 80013e2:	e039      	b.n	8001458 <main+0x2e4>
 80013e4:	20000074 	.word	0x20000074
 80013e8:	200000c4 	.word	0x200000c4
 80013ec:	200000e8 	.word	0x200000e8
 80013f0:	2000002c 	.word	0x2000002c
 80013f4:	200000ac 	.word	0x200000ac
 80013f8:	200000b0 	.word	0x200000b0
 80013fc:	43160000 	.word	0x43160000
 8001400:	2000009c 	.word	0x2000009c
 8001404:	200000c0 	.word	0x200000c0
 8001408:	2000012c 	.word	0x2000012c
 800140c:	20000000 	.word	0x20000000
 8001410:	200000a4 	.word	0x200000a4
 8001414:	200000a6 	.word	0x200000a6
	  }
	  else if (PWM_input > 4000)
 8001418:	4b8e      	ldr	r3, [pc, #568]	@ (8001654 <main+0x4e0>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001420:	d91a      	bls.n	8001458 <main+0x2e4>
	  {
		  PWM_value = (int)((float)((PWM_input-100)/3900)*100); // scale 100==0, 4000==100
 8001422:	4b8c      	ldr	r3, [pc, #560]	@ (8001654 <main+0x4e0>)
 8001424:	881b      	ldrh	r3, [r3, #0]
 8001426:	3b64      	subs	r3, #100	@ 0x64
 8001428:	4a8b      	ldr	r2, [pc, #556]	@ (8001658 <main+0x4e4>)
 800142a:	fb82 1203 	smull	r1, r2, r2, r3
 800142e:	1252      	asrs	r2, r2, #9
 8001430:	17db      	asrs	r3, r3, #31
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	ee07 3a90 	vmov	s15, r3
 8001438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800143c:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 800165c <main+0x4e8>
 8001440:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001444:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001448:	ee17 3a90 	vmov	r3, s15
 800144c:	b29a      	uxth	r2, r3
 800144e:	4b84      	ldr	r3, [pc, #528]	@ (8001660 <main+0x4ec>)
 8001450:	801a      	strh	r2, [r3, #0]
		  actuator_status = actuator_status || 0b00000101; //actuator is running and has PWM
 8001452:	4b84      	ldr	r3, [pc, #528]	@ (8001664 <main+0x4f0>)
 8001454:	2201      	movs	r2, #1
 8001456:	701a      	strb	r2, [r3, #0]

	  //actuator control


	  //running actuator
	  if ((actuator_status >> 2) && actuator_status) //actuator status is set to running and PWM is present
 8001458:	4b82      	ldr	r3, [pc, #520]	@ (8001664 <main+0x4f0>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	089b      	lsrs	r3, r3, #2
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	d02a      	beq.n	80014ba <main+0x346>
 8001464:	4b7f      	ldr	r3, [pc, #508]	@ (8001664 <main+0x4f0>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d026      	beq.n	80014ba <main+0x346>
	  {
		  //start sequence
		  //does starting sequence until interrupts set "needs starting" status to low
		  if (actuator_status >> 1) //actuator needs starting
 800146c:	4b7d      	ldr	r3, [pc, #500]	@ (8001664 <main+0x4f0>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	085b      	lsrs	r3, r3, #1
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00c      	beq.n	8001492 <main+0x31e>
		  {
			  //start and reset timer 5 if not on
			  restart_tim_5();
 8001478:	f000 fc90 	bl	8001d9c <restart_tim_5>

			  //set coil B to GND and turn on PWM on coil A
			  if (last_change == 0b00000000)
 800147c:	4b7a      	ldr	r3, [pc, #488]	@ (8001668 <main+0x4f4>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d102      	bne.n	800148a <main+0x316>
			  {
				  AHigh_BLow(10); //PWM value is set to 10 (100max)
 8001484:	200a      	movs	r0, #10
 8001486:	f000 fb51 	bl	8001b2c <AHigh_BLow>
			  }
			  PWM_old_value = 10;
 800148a:	4b78      	ldr	r3, [pc, #480]	@ (800166c <main+0x4f8>)
 800148c:	220a      	movs	r2, #10
 800148e:	801a      	strh	r2, [r3, #0]
		  if (actuator_status >> 1) //actuator needs starting
 8001490:	e08e      	b.n	80015b0 <main+0x43c>

		  //running sequence
		  else
		  {
			  //regulator implementation
			  PWM_current_value = PWM_value;
 8001492:	4b73      	ldr	r3, [pc, #460]	@ (8001660 <main+0x4ec>)
 8001494:	881a      	ldrh	r2, [r3, #0]
 8001496:	4b76      	ldr	r3, [pc, #472]	@ (8001670 <main+0x4fc>)
 8001498:	801a      	strh	r2, [r3, #0]
			  //no regulator :)

			  if (!(actuator_status >> 4)) //normal direction
 800149a:	4b72      	ldr	r3, [pc, #456]	@ (8001664 <main+0x4f0>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	091b      	lsrs	r3, r3, #4
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d102      	bne.n	80014ac <main+0x338>
			  {
				  forward_sequence();
 80014a6:	f000 fa27 	bl	80018f8 <forward_sequence>
 80014aa:	e001      	b.n	80014b0 <main+0x33c>
			  }
			  else //reverse direction
			  {
				  backward_sequence();
 80014ac:	f000 fab4 	bl	8001a18 <backward_sequence>
			  }

			  PWM_old_value = PWM_current_value;
 80014b0:	4b6f      	ldr	r3, [pc, #444]	@ (8001670 <main+0x4fc>)
 80014b2:	881a      	ldrh	r2, [r3, #0]
 80014b4:	4b6d      	ldr	r3, [pc, #436]	@ (800166c <main+0x4f8>)
 80014b6:	801a      	strh	r2, [r3, #0]
		  if (actuator_status >> 1) //actuator needs starting
 80014b8:	e07a      	b.n	80015b0 <main+0x43c>
		  }
	  }

	  //actuator is stopping
	  else if(actuator_status && (!(actuator_status >> 1)) && (!(actuator_status >> 2))) //actuator is running, doesnt need starting and PWM is not present
 80014ba:	4b6a      	ldr	r3, [pc, #424]	@ (8001664 <main+0x4f0>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d033      	beq.n	800152a <main+0x3b6>
 80014c2:	4b68      	ldr	r3, [pc, #416]	@ (8001664 <main+0x4f0>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	085b      	lsrs	r3, r3, #1
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d12d      	bne.n	800152a <main+0x3b6>
 80014ce:	4b65      	ldr	r3, [pc, #404]	@ (8001664 <main+0x4f0>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d127      	bne.n	800152a <main+0x3b6>
	  {
		  //disconnect power to actuator coils
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0); //PWM coil A
 80014da:	4b66      	ldr	r3, [pc, #408]	@ (8001674 <main+0x500>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2200      	movs	r2, #0
 80014e0:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0); //PWM coil B
 80014e2:	4b64      	ldr	r3, [pc, #400]	@ (8001674 <main+0x500>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2200      	movs	r2, #0
 80014e8:	639a      	str	r2, [r3, #56]	@ 0x38
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0); //PWM coil C
 80014ea:	4b62      	ldr	r3, [pc, #392]	@ (8001674 <main+0x500>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2200      	movs	r2, #0
 80014f0:	63da      	str	r2, [r3, #60]	@ 0x3c

		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80014f2:	2100      	movs	r1, #0
 80014f4:	485f      	ldr	r0, [pc, #380]	@ (8001674 <main+0x500>)
 80014f6:	f003 fc15 	bl	8004d24 <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80014fa:	2104      	movs	r1, #4
 80014fc:	485d      	ldr	r0, [pc, #372]	@ (8001674 <main+0x500>)
 80014fe:	f003 fc11 	bl	8004d24 <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001502:	2108      	movs	r1, #8
 8001504:	485b      	ldr	r0, [pc, #364]	@ (8001674 <main+0x500>)
 8001506:	f003 fc0d 	bl	8004d24 <HAL_TIM_PWM_Start>

		  //connect actuator coils to GND
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1); //GND coil A
 800150a:	2201      	movs	r2, #1
 800150c:	2101      	movs	r1, #1
 800150e:	485a      	ldr	r0, [pc, #360]	@ (8001678 <main+0x504>)
 8001510:	f002 fe30 	bl	8004174 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1); //GND coil B
 8001514:	2201      	movs	r2, #1
 8001516:	2102      	movs	r1, #2
 8001518:	4857      	ldr	r0, [pc, #348]	@ (8001678 <main+0x504>)
 800151a:	f002 fe2b 	bl	8004174 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1); //GND coil C
 800151e:	2201      	movs	r2, #1
 8001520:	2104      	movs	r1, #4
 8001522:	4855      	ldr	r0, [pc, #340]	@ (8001678 <main+0x504>)
 8001524:	f002 fe26 	bl	8004174 <HAL_GPIO_WritePin>
 8001528:	e042      	b.n	80015b0 <main+0x43c>
	  }

	  //actuator is not active
	  else
	  {
		  if ((tim_5_status >> 7) && (!tim_5_status)) //if timer 5 is on and flag is not set
 800152a:	4b54      	ldr	r3, [pc, #336]	@ (800167c <main+0x508>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	b25b      	sxtb	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	da3d      	bge.n	80015b0 <main+0x43c>
 8001534:	4b51      	ldr	r3, [pc, #324]	@ (800167c <main+0x508>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d139      	bne.n	80015b0 <main+0x43c>
		  {
			  if (__HAL_TIM_GET_COUNTER(&htim5) == htim5.Init.Period)
 800153c:	4b50      	ldr	r3, [pc, #320]	@ (8001680 <main+0x50c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001542:	4b4f      	ldr	r3, [pc, #316]	@ (8001680 <main+0x50c>)
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	429a      	cmp	r2, r3
 8001548:	d132      	bne.n	80015b0 <main+0x43c>
			  {
				  actuator_status = actuator_status && 0b11111110; //change actuator status "is running" status to low
 800154a:	4b46      	ldr	r3, [pc, #280]	@ (8001664 <main+0x4f0>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	bf14      	ite	ne
 8001552:	2301      	movne	r3, #1
 8001554:	2300      	moveq	r3, #0
 8001556:	b2db      	uxtb	r3, r3
 8001558:	461a      	mov	r2, r3
 800155a:	4b42      	ldr	r3, [pc, #264]	@ (8001664 <main+0x4f0>)
 800155c:	701a      	strb	r2, [r3, #0]
				  actuator_status = actuator_status || 0b00000010; //change actuator status "needs starting" status to high
 800155e:	4b41      	ldr	r3, [pc, #260]	@ (8001664 <main+0x4f0>)
 8001560:	2201      	movs	r2, #1
 8001562:	701a      	strb	r2, [r3, #0]

				  //turn of timer 5 and reset timer
				  HAL_TIM_Base_Stop(&htim5);
 8001564:	4846      	ldr	r0, [pc, #280]	@ (8001680 <main+0x50c>)
 8001566:	f003 fb55 	bl	8004c14 <HAL_TIM_Base_Stop>
				  __HAL_TIM_GET_COUNTER(&htim5) = 0;
 800156a:	4b45      	ldr	r3, [pc, #276]	@ (8001680 <main+0x50c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2200      	movs	r2, #0
 8001570:	625a      	str	r2, [r3, #36]	@ 0x24

				  //disconnect remaining connections to actuator coils
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0); //GND coil A
 8001572:	2200      	movs	r2, #0
 8001574:	2101      	movs	r1, #1
 8001576:	4840      	ldr	r0, [pc, #256]	@ (8001678 <main+0x504>)
 8001578:	f002 fdfc 	bl	8004174 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0); //GND coil B
 800157c:	2200      	movs	r2, #0
 800157e:	2102      	movs	r1, #2
 8001580:	483d      	ldr	r0, [pc, #244]	@ (8001678 <main+0x504>)
 8001582:	f002 fdf7 	bl	8004174 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0); //GND coil C
 8001586:	2200      	movs	r2, #0
 8001588:	2104      	movs	r1, #4
 800158a:	483b      	ldr	r0, [pc, #236]	@ (8001678 <main+0x504>)
 800158c:	f002 fdf2 	bl	8004174 <HAL_GPIO_WritePin>

				  last_change = 0b00000000; //for starting sequence
 8001590:	4b35      	ldr	r3, [pc, #212]	@ (8001668 <main+0x4f4>)
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]

				  tim_5_status = tim_5_status || 0b00000001; //put flag so it doesnt do this action each cycle
 8001596:	4b39      	ldr	r3, [pc, #228]	@ (800167c <main+0x508>)
 8001598:	2201      	movs	r2, #1
 800159a:	701a      	strb	r2, [r3, #0]
				  tim_5_status = tim_5_status && 0b01111111; //change timer status to inactive
 800159c:	4b37      	ldr	r3, [pc, #220]	@ (800167c <main+0x508>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	bf14      	ite	ne
 80015a4:	2301      	movne	r3, #1
 80015a6:	2300      	moveq	r3, #0
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b33      	ldr	r3, [pc, #204]	@ (800167c <main+0x508>)
 80015ae:	701a      	strb	r2, [r3, #0]



	  //turn 8 LEDS on/off
	  //process PWM value to digital outputs
	  if (PWM_value == 0)
 80015b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001660 <main+0x4ec>)
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d103      	bne.n	80015c0 <main+0x44c>
	  {
		  digital_outputs = 0;
 80015b8:	4b32      	ldr	r3, [pc, #200]	@ (8001684 <main+0x510>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	701a      	strb	r2, [r3, #0]
 80015be:	e069      	b.n	8001694 <main+0x520>
	  }
	  else
	  {
		  switch ((int)((float)(PWM_value /12.5)))
 80015c0:	4b27      	ldr	r3, [pc, #156]	@ (8001660 <main+0x4ec>)
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ff7d 	bl	80004c4 <__aeabi_i2d>
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001688 <main+0x514>)
 80015d0:	f7ff f90c 	bl	80007ec <__aeabi_ddiv>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	f7ff f9ee 	bl	80009bc <__aeabi_d2f>
 80015e0:	ee07 0a90 	vmov	s15, r0
 80015e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015e8:	ee17 3a90 	vmov	r3, s15
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	d851      	bhi.n	8001694 <main+0x520>
 80015f0:	a201      	add	r2, pc, #4	@ (adr r2, 80015f8 <main+0x484>)
 80015f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f6:	bf00      	nop
 80015f8:	0800161d 	.word	0x0800161d
 80015fc:	08001695 	.word	0x08001695
 8001600:	08001625 	.word	0x08001625
 8001604:	0800162d 	.word	0x0800162d
 8001608:	08001635 	.word	0x08001635
 800160c:	0800163d 	.word	0x0800163d
 8001610:	08001645 	.word	0x08001645
 8001614:	0800164d 	.word	0x0800164d
 8001618:	0800168d 	.word	0x0800168d
		  {
		  case 0:
			  digital_outputs = 0b00000001;
 800161c:	4b19      	ldr	r3, [pc, #100]	@ (8001684 <main+0x510>)
 800161e:	2201      	movs	r2, #1
 8001620:	701a      	strb	r2, [r3, #0]
			  break;
 8001622:	e037      	b.n	8001694 <main+0x520>
		  case 2:
			  digital_outputs = 0b00000011;
 8001624:	4b17      	ldr	r3, [pc, #92]	@ (8001684 <main+0x510>)
 8001626:	2203      	movs	r2, #3
 8001628:	701a      	strb	r2, [r3, #0]
			  break;
 800162a:	e033      	b.n	8001694 <main+0x520>
		  case 3:
			  digital_outputs = 0b00000111;
 800162c:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <main+0x510>)
 800162e:	2207      	movs	r2, #7
 8001630:	701a      	strb	r2, [r3, #0]
			  break;
 8001632:	e02f      	b.n	8001694 <main+0x520>
		  case 4:
			  digital_outputs = 0b00001111;
 8001634:	4b13      	ldr	r3, [pc, #76]	@ (8001684 <main+0x510>)
 8001636:	220f      	movs	r2, #15
 8001638:	701a      	strb	r2, [r3, #0]
			  break;
 800163a:	e02b      	b.n	8001694 <main+0x520>
		  case 5:
			  digital_outputs = 0b00011111;
 800163c:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <main+0x510>)
 800163e:	221f      	movs	r2, #31
 8001640:	701a      	strb	r2, [r3, #0]
			  break;
 8001642:	e027      	b.n	8001694 <main+0x520>
		  case 6:
			  digital_outputs = 0b00111111;
 8001644:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <main+0x510>)
 8001646:	223f      	movs	r2, #63	@ 0x3f
 8001648:	701a      	strb	r2, [r3, #0]
			  break;
 800164a:	e023      	b.n	8001694 <main+0x520>
		  case 7:
			  digital_outputs = 0b01111111;
 800164c:	4b0d      	ldr	r3, [pc, #52]	@ (8001684 <main+0x510>)
 800164e:	227f      	movs	r2, #127	@ 0x7f
 8001650:	701a      	strb	r2, [r3, #0]
			  break;
 8001652:	e01f      	b.n	8001694 <main+0x520>
 8001654:	200000a4 	.word	0x200000a4
 8001658:	219bb355 	.word	0x219bb355
 800165c:	42c80000 	.word	0x42c80000
 8001660:	200000a6 	.word	0x200000a6
 8001664:	20000000 	.word	0x20000000
 8001668:	2000009f 	.word	0x2000009f
 800166c:	200000aa 	.word	0x200000aa
 8001670:	200000a8 	.word	0x200000a8
 8001674:	20000134 	.word	0x20000134
 8001678:	40020800 	.word	0x40020800
 800167c:	200000a2 	.word	0x200000a2
 8001680:	20000218 	.word	0x20000218
 8001684:	200000a0 	.word	0x200000a0
 8001688:	40290000 	.word	0x40290000
		  case 8:
			  digital_outputs = 0b11111111;
 800168c:	4b5d      	ldr	r3, [pc, #372]	@ (8001804 <main+0x690>)
 800168e:	22ff      	movs	r2, #255	@ 0xff
 8001690:	701a      	strb	r2, [r3, #0]
			  break;
 8001692:	bf00      	nop
		  }
	  }

	  //set changes to LEDs (if there are any changes)
	  if (digital_outputs != digital_old_outputs)
 8001694:	4b5b      	ldr	r3, [pc, #364]	@ (8001804 <main+0x690>)
 8001696:	781a      	ldrb	r2, [r3, #0]
 8001698:	4b5b      	ldr	r3, [pc, #364]	@ (8001808 <main+0x694>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	d04e      	beq.n	800173e <main+0x5ca>
	  {
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, digital_outputs >> 0);
 80016a0:	4b58      	ldr	r3, [pc, #352]	@ (8001804 <main+0x690>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016aa:	4858      	ldr	r0, [pc, #352]	@ (800180c <main+0x698>)
 80016ac:	f002 fd62 	bl	8004174 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, digital_outputs >> 1);
 80016b0:	4b54      	ldr	r3, [pc, #336]	@ (8001804 <main+0x690>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	085b      	lsrs	r3, r3, #1
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	461a      	mov	r2, r3
 80016ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016be:	4853      	ldr	r0, [pc, #332]	@ (800180c <main+0x698>)
 80016c0:	f002 fd58 	bl	8004174 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, digital_outputs >> 2);
 80016c4:	4b4f      	ldr	r3, [pc, #316]	@ (8001804 <main+0x690>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	089b      	lsrs	r3, r3, #2
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	461a      	mov	r2, r3
 80016ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016d2:	484e      	ldr	r0, [pc, #312]	@ (800180c <main+0x698>)
 80016d4:	f002 fd4e 	bl	8004174 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, digital_outputs >> 3);
 80016d8:	4b4a      	ldr	r3, [pc, #296]	@ (8001804 <main+0x690>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	08db      	lsrs	r3, r3, #3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	461a      	mov	r2, r3
 80016e2:	2101      	movs	r1, #1
 80016e4:	484a      	ldr	r0, [pc, #296]	@ (8001810 <main+0x69c>)
 80016e6:	f002 fd45 	bl	8004174 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, digital_outputs >> 4);
 80016ea:	4b46      	ldr	r3, [pc, #280]	@ (8001804 <main+0x690>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	091b      	lsrs	r3, r3, #4
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	461a      	mov	r2, r3
 80016f4:	2102      	movs	r1, #2
 80016f6:	4846      	ldr	r0, [pc, #280]	@ (8001810 <main+0x69c>)
 80016f8:	f002 fd3c 	bl	8004174 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, digital_outputs >> 5);
 80016fc:	4b41      	ldr	r3, [pc, #260]	@ (8001804 <main+0x690>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	095b      	lsrs	r3, r3, #5
 8001702:	b2db      	uxtb	r3, r3
 8001704:	461a      	mov	r2, r3
 8001706:	2180      	movs	r1, #128	@ 0x80
 8001708:	4842      	ldr	r0, [pc, #264]	@ (8001814 <main+0x6a0>)
 800170a:	f002 fd33 	bl	8004174 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, digital_outputs >> 6);
 800170e:	4b3d      	ldr	r3, [pc, #244]	@ (8001804 <main+0x690>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	099b      	lsrs	r3, r3, #6
 8001714:	b2db      	uxtb	r3, r3
 8001716:	461a      	mov	r2, r3
 8001718:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800171c:	483d      	ldr	r0, [pc, #244]	@ (8001814 <main+0x6a0>)
 800171e:	f002 fd29 	bl	8004174 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, digital_outputs >> 7);
 8001722:	4b38      	ldr	r3, [pc, #224]	@ (8001804 <main+0x690>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	09db      	lsrs	r3, r3, #7
 8001728:	b2db      	uxtb	r3, r3
 800172a:	461a      	mov	r2, r3
 800172c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001730:	4838      	ldr	r0, [pc, #224]	@ (8001814 <main+0x6a0>)
 8001732:	f002 fd1f 	bl	8004174 <HAL_GPIO_WritePin>

		  digital_old_outputs = digital_outputs;
 8001736:	4b33      	ldr	r3, [pc, #204]	@ (8001804 <main+0x690>)
 8001738:	781a      	ldrb	r2, [r3, #0]
 800173a:	4b33      	ldr	r3, [pc, #204]	@ (8001808 <main+0x694>)
 800173c:	701a      	strb	r2, [r3, #0]


	  //KTM
	  //CAN bus data
	  //send CAN data
	  if (msg_flag) //there is data to be sent
 800173e:	4b36      	ldr	r3, [pc, #216]	@ (8001818 <main+0x6a4>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f43f ad5c 	beq.w	8001200 <main+0x8c>
	  {
		  TxData[0] = 0b11110000; //package contains data
 8001748:	4b34      	ldr	r3, [pc, #208]	@ (800181c <main+0x6a8>)
 800174a:	22f0      	movs	r2, #240	@ 0xf0
 800174c:	701a      	strb	r2, [r3, #0]


		  TxData[1] = 0b00000000;
 800174e:	4b33      	ldr	r3, [pc, #204]	@ (800181c <main+0x6a8>)
 8001750:	2200      	movs	r2, #0
 8001752:	705a      	strb	r2, [r3, #1]
		  if (actuator_status >> 4)
 8001754:	4b32      	ldr	r3, [pc, #200]	@ (8001820 <main+0x6ac>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	091b      	lsrs	r3, r3, #4
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	d002      	beq.n	8001766 <main+0x5f2>
		  {
			  TxData[1] = TxData[1] || 0b00000011; //actuator normal direction
 8001760:	4b2e      	ldr	r3, [pc, #184]	@ (800181c <main+0x6a8>)
 8001762:	2201      	movs	r2, #1
 8001764:	705a      	strb	r2, [r3, #1]
		  }
		  if (!(direction))
 8001766:	4b2f      	ldr	r3, [pc, #188]	@ (8001824 <main+0x6b0>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d102      	bne.n	8001774 <main+0x600>
		  {
			  TxData[1] = TxData[1] || 0b00001100; //current reverse direction
 800176e:	4b2b      	ldr	r3, [pc, #172]	@ (800181c <main+0x6a8>)
 8001770:	2201      	movs	r2, #1
 8001772:	705a      	strb	r2, [r3, #1]
		  }
		  if (actuator_status >> 5)
 8001774:	4b2a      	ldr	r3, [pc, #168]	@ (8001820 <main+0x6ac>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	095b      	lsrs	r3, r3, #5
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <main+0x612>
		  {
			  TxData[1] = TxData[1] || 0b00110000; //actuator is on
 8001780:	4b26      	ldr	r3, [pc, #152]	@ (800181c <main+0x6a8>)
 8001782:	2201      	movs	r2, #1
 8001784:	705a      	strb	r2, [r3, #1]
		  }


		  TxData[2] = current; //TxData 2,3,4,5 (32 bit number)
 8001786:	4b28      	ldr	r3, [pc, #160]	@ (8001828 <main+0x6b4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	b2da      	uxtb	r2, r3
 800178c:	4b23      	ldr	r3, [pc, #140]	@ (800181c <main+0x6a8>)
 800178e:	709a      	strb	r2, [r3, #2]


		  TxData[6] = ((PWM_value/100) * 3900 + 100); //
 8001790:	4b26      	ldr	r3, [pc, #152]	@ (800182c <main+0x6b8>)
 8001792:	881b      	ldrh	r3, [r3, #0]
 8001794:	4a26      	ldr	r2, [pc, #152]	@ (8001830 <main+0x6bc>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	095b      	lsrs	r3, r3, #5
 800179c:	b29b      	uxth	r3, r3
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	461a      	mov	r2, r3
 80017a2:	0112      	lsls	r2, r2, #4
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	3364      	adds	r3, #100	@ 0x64
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4b1b      	ldr	r3, [pc, #108]	@ (800181c <main+0x6a8>)
 80017b0:	719a      	strb	r2, [r3, #6]


		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailBox);
 80017b2:	4b20      	ldr	r3, [pc, #128]	@ (8001834 <main+0x6c0>)
 80017b4:	4a19      	ldr	r2, [pc, #100]	@ (800181c <main+0x6a8>)
 80017b6:	4920      	ldr	r1, [pc, #128]	@ (8001838 <main+0x6c4>)
 80017b8:	4820      	ldr	r0, [pc, #128]	@ (800183c <main+0x6c8>)
 80017ba:	f001 fdce 	bl	800335a <HAL_CAN_AddTxMessage>
		  msg_flag = msg_flag && 0b11111110; //there is no more need to send data
 80017be:	4b16      	ldr	r3, [pc, #88]	@ (8001818 <main+0x6a4>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	bf14      	ite	ne
 80017c6:	2301      	movne	r3, #1
 80017c8:	2300      	moveq	r3, #0
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b12      	ldr	r3, [pc, #72]	@ (8001818 <main+0x6a4>)
 80017d0:	701a      	strb	r2, [r3, #0]

		  TxData[0] = 0; //set array to 0
 80017d2:	4b12      	ldr	r3, [pc, #72]	@ (800181c <main+0x6a8>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
		  TxData[1] = 0;
 80017d8:	4b10      	ldr	r3, [pc, #64]	@ (800181c <main+0x6a8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	705a      	strb	r2, [r3, #1]
		  TxData[2] = 0;
 80017de:	4b0f      	ldr	r3, [pc, #60]	@ (800181c <main+0x6a8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	709a      	strb	r2, [r3, #2]
		  TxData[3] = 0;
 80017e4:	4b0d      	ldr	r3, [pc, #52]	@ (800181c <main+0x6a8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	70da      	strb	r2, [r3, #3]
		  TxData[4] = 0;
 80017ea:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <main+0x6a8>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	711a      	strb	r2, [r3, #4]
		  TxData[5] = 0;
 80017f0:	4b0a      	ldr	r3, [pc, #40]	@ (800181c <main+0x6a8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	715a      	strb	r2, [r3, #5]
		  TxData[6] = 0;
 80017f6:	4b09      	ldr	r3, [pc, #36]	@ (800181c <main+0x6a8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	719a      	strb	r2, [r3, #6]
		  TxData[7] = 0;
 80017fc:	4b07      	ldr	r3, [pc, #28]	@ (800181c <main+0x6a8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	71da      	strb	r2, [r3, #7]
	  HAL_ADC_Start(&hadc1);
 8001802:	e4fd      	b.n	8001200 <main+0x8c>
 8001804:	200000a0 	.word	0x200000a0
 8001808:	200000a1 	.word	0x200000a1
 800180c:	40021400 	.word	0x40021400
 8001810:	40021800 	.word	0x40021800
 8001814:	40021000 	.word	0x40021000
 8001818:	200000c0 	.word	0x200000c0
 800181c:	200000e0 	.word	0x200000e0
 8001820:	20000000 	.word	0x20000000
 8001824:	2000009c 	.word	0x2000009c
 8001828:	200000b0 	.word	0x200000b0
 800182c:	200000a6 	.word	0x200000a6
 8001830:	51eb851f 	.word	0x51eb851f
 8001834:	200000dc 	.word	0x200000dc
 8001838:	200000c4 	.word	0x200000c4
 800183c:	20000074 	.word	0x20000074

08001840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b094      	sub	sp, #80	@ 0x50
 8001844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001846:	f107 0320 	add.w	r3, r7, #32
 800184a:	2230      	movs	r2, #48	@ 0x30
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f004 f998 	bl	8005b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001864:	4b22      	ldr	r3, [pc, #136]	@ (80018f0 <SystemClock_Config+0xb0>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001868:	4a21      	ldr	r2, [pc, #132]	@ (80018f0 <SystemClock_Config+0xb0>)
 800186a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800186e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001870:	4b1f      	ldr	r3, [pc, #124]	@ (80018f0 <SystemClock_Config+0xb0>)
 8001872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001874:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800187c:	4b1d      	ldr	r3, [pc, #116]	@ (80018f4 <SystemClock_Config+0xb4>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001884:	4a1b      	ldr	r2, [pc, #108]	@ (80018f4 <SystemClock_Config+0xb4>)
 8001886:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	4b19      	ldr	r3, [pc, #100]	@ (80018f4 <SystemClock_Config+0xb4>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001898:	2302      	movs	r3, #2
 800189a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800189c:	2301      	movs	r3, #1
 800189e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018a0:	2310      	movs	r3, #16
 80018a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a8:	f107 0320 	add.w	r3, r7, #32
 80018ac:	4618      	mov	r0, r3
 80018ae:	f002 fc93 	bl	80041d8 <HAL_RCC_OscConfig>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80018b8:	f000 fc20 	bl	80020fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018bc:	230f      	movs	r3, #15
 80018be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018c0:	2300      	movs	r3, #0
 80018c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	2100      	movs	r1, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f002 ff22 	bl	8004720 <HAL_RCC_ClockConfig>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80018e2:	f000 fc0b 	bl	80020fc <Error_Handler>
  }
}
 80018e6:	bf00      	nop
 80018e8:	3750      	adds	r7, #80	@ 0x50
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40007000 	.word	0x40007000

080018f8 <forward_sequence>:

/* USER CODE BEGIN 4 */
void forward_sequence()
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	if ((last_change != 0b11111111) && (last_change != 0b00000000) )
 80018fc:	4b44      	ldr	r3, [pc, #272]	@ (8001a10 <forward_sequence+0x118>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2bff      	cmp	r3, #255	@ 0xff
 8001902:	f000 8083 	beq.w	8001a0c <forward_sequence+0x114>
 8001906:	4b42      	ldr	r3, [pc, #264]	@ (8001a10 <forward_sequence+0x118>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d07e      	beq.n	8001a0c <forward_sequence+0x114>
	{
		switch (last_change)
 800190e:	4b40      	ldr	r3, [pc, #256]	@ (8001a10 <forward_sequence+0x118>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	3b01      	subs	r3, #1
 8001914:	2b1f      	cmp	r3, #31
 8001916:	d879      	bhi.n	8001a0c <forward_sequence+0x114>
 8001918:	a201      	add	r2, pc, #4	@ (adr r2, 8001920 <forward_sequence+0x28>)
 800191a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191e:	bf00      	nop
 8001920:	080019a1 	.word	0x080019a1
 8001924:	080019b3 	.word	0x080019b3
 8001928:	08001a0d 	.word	0x08001a0d
 800192c:	080019c5 	.word	0x080019c5
 8001930:	08001a0d 	.word	0x08001a0d
 8001934:	08001a0d 	.word	0x08001a0d
 8001938:	08001a0d 	.word	0x08001a0d
 800193c:	080019d7 	.word	0x080019d7
 8001940:	08001a0d 	.word	0x08001a0d
 8001944:	08001a0d 	.word	0x08001a0d
 8001948:	08001a0d 	.word	0x08001a0d
 800194c:	08001a0d 	.word	0x08001a0d
 8001950:	08001a0d 	.word	0x08001a0d
 8001954:	08001a0d 	.word	0x08001a0d
 8001958:	08001a0d 	.word	0x08001a0d
 800195c:	080019e9 	.word	0x080019e9
 8001960:	08001a0d 	.word	0x08001a0d
 8001964:	08001a0d 	.word	0x08001a0d
 8001968:	08001a0d 	.word	0x08001a0d
 800196c:	08001a0d 	.word	0x08001a0d
 8001970:	08001a0d 	.word	0x08001a0d
 8001974:	08001a0d 	.word	0x08001a0d
 8001978:	08001a0d 	.word	0x08001a0d
 800197c:	08001a0d 	.word	0x08001a0d
 8001980:	08001a0d 	.word	0x08001a0d
 8001984:	08001a0d 	.word	0x08001a0d
 8001988:	08001a0d 	.word	0x08001a0d
 800198c:	08001a0d 	.word	0x08001a0d
 8001990:	08001a0d 	.word	0x08001a0d
 8001994:	08001a0d 	.word	0x08001a0d
 8001998:	08001a0d 	.word	0x08001a0d
 800199c:	080019fb 	.word	0x080019fb
		{
		case 0b00000001: //A fall
			AHigh_BLow(PWM_current_value);
 80019a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a14 <forward_sequence+0x11c>)
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f000 f8c1 	bl	8001b2c <AHigh_BLow>
			last_change = 0b11111111;// change variable once PWM and GND pins are set so it doesnt do it on every cycle
 80019aa:	4b19      	ldr	r3, [pc, #100]	@ (8001a10 <forward_sequence+0x118>)
 80019ac:	22ff      	movs	r2, #255	@ 0xff
 80019ae:	701a      	strb	r2, [r3, #0]
			break;
 80019b0:	e02c      	b.n	8001a0c <forward_sequence+0x114>
		case 0b00000010: //A rise
			BHigh_ALow(PWM_current_value);
 80019b2:	4b18      	ldr	r3, [pc, #96]	@ (8001a14 <forward_sequence+0x11c>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 f920 	bl	8001bfc <BHigh_ALow>
			last_change = 0b11111111;// change variable once PWM and GND pins are set so it doesnt do it on every cycle
 80019bc:	4b14      	ldr	r3, [pc, #80]	@ (8001a10 <forward_sequence+0x118>)
 80019be:	22ff      	movs	r2, #255	@ 0xff
 80019c0:	701a      	strb	r2, [r3, #0]
			break;
 80019c2:	e023      	b.n	8001a0c <forward_sequence+0x114>
		case 0b00000100: //B fall
			BHigh_CLow(PWM_current_value);
 80019c4:	4b13      	ldr	r3, [pc, #76]	@ (8001a14 <forward_sequence+0x11c>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 f94b 	bl	8001c64 <BHigh_CLow>
			last_change = 0b11111111;// change variable once PWM and GND pins are set so it doesnt do it on every cycle
 80019ce:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <forward_sequence+0x118>)
 80019d0:	22ff      	movs	r2, #255	@ 0xff
 80019d2:	701a      	strb	r2, [r3, #0]
			break;
 80019d4:	e01a      	b.n	8001a0c <forward_sequence+0x114>
		case 0b00001000: //B rise
			CHigh_BLow(PWM_current_value);
 80019d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a14 <forward_sequence+0x11c>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 f9aa 	bl	8001d34 <CHigh_BLow>
			last_change = 0b11111111;// change variable once PWM and GND pins are set so it doesnt do it on every cycle
 80019e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <forward_sequence+0x118>)
 80019e2:	22ff      	movs	r2, #255	@ 0xff
 80019e4:	701a      	strb	r2, [r3, #0]
			break;
 80019e6:	e011      	b.n	8001a0c <forward_sequence+0x114>
		case 0b00010000: //C fall
			CHigh_ALow(PWM_current_value);
 80019e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001a14 <forward_sequence+0x11c>)
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 f96d 	bl	8001ccc <CHigh_ALow>
			last_change = 0b11111111;// change variable once PWM and GND pins are set so it doesnt do it on every cycle
 80019f2:	4b07      	ldr	r3, [pc, #28]	@ (8001a10 <forward_sequence+0x118>)
 80019f4:	22ff      	movs	r2, #255	@ 0xff
 80019f6:	701a      	strb	r2, [r3, #0]
			break;
 80019f8:	e008      	b.n	8001a0c <forward_sequence+0x114>
		case 0b00100000: //C rise
			AHigh_CLow(PWM_current_value);
 80019fa:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <forward_sequence+0x11c>)
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 f8c8 	bl	8001b94 <AHigh_CLow>
			last_change = 0b11111111;// change variable once PWM and GND pins are set so it doesnt do it on every cycle
 8001a04:	4b02      	ldr	r3, [pc, #8]	@ (8001a10 <forward_sequence+0x118>)
 8001a06:	22ff      	movs	r2, #255	@ 0xff
 8001a08:	701a      	strb	r2, [r3, #0]
			break;
 8001a0a:	bf00      	nop
		}
	}
}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	2000009f 	.word	0x2000009f
 8001a14:	200000a8 	.word	0x200000a8

08001a18 <backward_sequence>:

void backward_sequence()
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	if (last_change != 0b11111111)
 8001a1c:	4b41      	ldr	r3, [pc, #260]	@ (8001b24 <backward_sequence+0x10c>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2bff      	cmp	r3, #255	@ 0xff
 8001a22:	d07d      	beq.n	8001b20 <backward_sequence+0x108>
	{
		switch (last_change)
 8001a24:	4b3f      	ldr	r3, [pc, #252]	@ (8001b24 <backward_sequence+0x10c>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	2b1f      	cmp	r3, #31
 8001a2c:	d878      	bhi.n	8001b20 <backward_sequence+0x108>
 8001a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a34 <backward_sequence+0x1c>)
 8001a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a34:	08001ab5 	.word	0x08001ab5
 8001a38:	08001ac7 	.word	0x08001ac7
 8001a3c:	08001b21 	.word	0x08001b21
 8001a40:	08001ad9 	.word	0x08001ad9
 8001a44:	08001b21 	.word	0x08001b21
 8001a48:	08001b21 	.word	0x08001b21
 8001a4c:	08001b21 	.word	0x08001b21
 8001a50:	08001aeb 	.word	0x08001aeb
 8001a54:	08001b21 	.word	0x08001b21
 8001a58:	08001b21 	.word	0x08001b21
 8001a5c:	08001b21 	.word	0x08001b21
 8001a60:	08001b21 	.word	0x08001b21
 8001a64:	08001b21 	.word	0x08001b21
 8001a68:	08001b21 	.word	0x08001b21
 8001a6c:	08001b21 	.word	0x08001b21
 8001a70:	08001afd 	.word	0x08001afd
 8001a74:	08001b21 	.word	0x08001b21
 8001a78:	08001b21 	.word	0x08001b21
 8001a7c:	08001b21 	.word	0x08001b21
 8001a80:	08001b21 	.word	0x08001b21
 8001a84:	08001b21 	.word	0x08001b21
 8001a88:	08001b21 	.word	0x08001b21
 8001a8c:	08001b21 	.word	0x08001b21
 8001a90:	08001b21 	.word	0x08001b21
 8001a94:	08001b21 	.word	0x08001b21
 8001a98:	08001b21 	.word	0x08001b21
 8001a9c:	08001b21 	.word	0x08001b21
 8001aa0:	08001b21 	.word	0x08001b21
 8001aa4:	08001b21 	.word	0x08001b21
 8001aa8:	08001b21 	.word	0x08001b21
 8001aac:	08001b21 	.word	0x08001b21
 8001ab0:	08001b0f 	.word	0x08001b0f
		{
		case 0b00000001: //A fall
			CHigh_ALow(PWM_current_value);
 8001ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b28 <backward_sequence+0x110>)
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f000 f907 	bl	8001ccc <CHigh_ALow>
			last_change = 0b11111111;// change variable once PWM and GND pins are set so it doesnt do it on every cycle
 8001abe:	4b19      	ldr	r3, [pc, #100]	@ (8001b24 <backward_sequence+0x10c>)
 8001ac0:	22ff      	movs	r2, #255	@ 0xff
 8001ac2:	701a      	strb	r2, [r3, #0]
			break;
 8001ac4:	e02c      	b.n	8001b20 <backward_sequence+0x108>
		case 0b00000010: //A rise
			AHigh_CLow(PWM_current_value);
 8001ac6:	4b18      	ldr	r3, [pc, #96]	@ (8001b28 <backward_sequence+0x110>)
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 f862 	bl	8001b94 <AHigh_CLow>
			last_change = 0b11111111;// change variable once PWM and GND pins are set so it doesnt do it on every cycle
 8001ad0:	4b14      	ldr	r3, [pc, #80]	@ (8001b24 <backward_sequence+0x10c>)
 8001ad2:	22ff      	movs	r2, #255	@ 0xff
 8001ad4:	701a      	strb	r2, [r3, #0]
			break;
 8001ad6:	e023      	b.n	8001b20 <backward_sequence+0x108>
		case 0b00000100: //B fall
			AHigh_BLow(PWM_current_value);
 8001ad8:	4b13      	ldr	r3, [pc, #76]	@ (8001b28 <backward_sequence+0x110>)
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 f825 	bl	8001b2c <AHigh_BLow>
			last_change = 0b11111111;// change variable once PWM and GND pins are set so it doesnt do it on every cycle
 8001ae2:	4b10      	ldr	r3, [pc, #64]	@ (8001b24 <backward_sequence+0x10c>)
 8001ae4:	22ff      	movs	r2, #255	@ 0xff
 8001ae6:	701a      	strb	r2, [r3, #0]
			break;
 8001ae8:	e01a      	b.n	8001b20 <backward_sequence+0x108>
		case 0b00001000: //B rise
			BHigh_ALow(PWM_current_value);
 8001aea:	4b0f      	ldr	r3, [pc, #60]	@ (8001b28 <backward_sequence+0x110>)
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 f884 	bl	8001bfc <BHigh_ALow>
			last_change = 0b11111111;// change variable once PWM and GND pins are set so it doesnt do it on every cycle
 8001af4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b24 <backward_sequence+0x10c>)
 8001af6:	22ff      	movs	r2, #255	@ 0xff
 8001af8:	701a      	strb	r2, [r3, #0]
			break;
 8001afa:	e011      	b.n	8001b20 <backward_sequence+0x108>
		case 0b00010000: //C fall
			BHigh_CLow(PWM_current_value);
 8001afc:	4b0a      	ldr	r3, [pc, #40]	@ (8001b28 <backward_sequence+0x110>)
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 f8af 	bl	8001c64 <BHigh_CLow>
			last_change = 0b11111111;// change variable once PWM and GND pins are set so it doesnt do it on every cycle
 8001b06:	4b07      	ldr	r3, [pc, #28]	@ (8001b24 <backward_sequence+0x10c>)
 8001b08:	22ff      	movs	r2, #255	@ 0xff
 8001b0a:	701a      	strb	r2, [r3, #0]
			break;
 8001b0c:	e008      	b.n	8001b20 <backward_sequence+0x108>
		case 0b00100000: //C rise
			CHigh_BLow(PWM_current_value);
 8001b0e:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <backward_sequence+0x110>)
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 f90e 	bl	8001d34 <CHigh_BLow>
			last_change = 0b11111111;// change variable once PWM and GND pins are set so it doesnt do it on every cycle
 8001b18:	4b02      	ldr	r3, [pc, #8]	@ (8001b24 <backward_sequence+0x10c>)
 8001b1a:	22ff      	movs	r2, #255	@ 0xff
 8001b1c:	701a      	strb	r2, [r3, #0]
			break;
 8001b1e:	bf00      	nop
		}
	}
}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	2000009f 	.word	0x2000009f
 8001b28:	200000a8 	.word	0x200000a8

08001b2c <AHigh_BLow>:

void AHigh_BLow(uint16_t PWM)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM); //PWM coil A
 8001b36:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <AHigh_BLow+0x60>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	88fa      	ldrh	r2, [r7, #6]
 8001b3c:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0); //PWM coil B
 8001b3e:	4b13      	ldr	r3, [pc, #76]	@ (8001b8c <AHigh_BLow+0x60>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2200      	movs	r2, #0
 8001b44:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0); //PWM coil C
 8001b46:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <AHigh_BLow+0x60>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001b4e:	2100      	movs	r1, #0
 8001b50:	480e      	ldr	r0, [pc, #56]	@ (8001b8c <AHigh_BLow+0x60>)
 8001b52:	f003 f8e7 	bl	8004d24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001b56:	2104      	movs	r1, #4
 8001b58:	480c      	ldr	r0, [pc, #48]	@ (8001b8c <AHigh_BLow+0x60>)
 8001b5a:	f003 f8e3 	bl	8004d24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001b5e:	2108      	movs	r1, #8
 8001b60:	480a      	ldr	r0, [pc, #40]	@ (8001b8c <AHigh_BLow+0x60>)
 8001b62:	f003 f8df 	bl	8004d24 <HAL_TIM_PWM_Start>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0); //GND coil A
 8001b66:	2200      	movs	r2, #0
 8001b68:	2101      	movs	r1, #1
 8001b6a:	4809      	ldr	r0, [pc, #36]	@ (8001b90 <AHigh_BLow+0x64>)
 8001b6c:	f002 fb02 	bl	8004174 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1); //GND coil B
 8001b70:	2201      	movs	r2, #1
 8001b72:	2102      	movs	r1, #2
 8001b74:	4806      	ldr	r0, [pc, #24]	@ (8001b90 <AHigh_BLow+0x64>)
 8001b76:	f002 fafd 	bl	8004174 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0); //GND coil C
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2104      	movs	r1, #4
 8001b7e:	4804      	ldr	r0, [pc, #16]	@ (8001b90 <AHigh_BLow+0x64>)
 8001b80:	f002 faf8 	bl	8004174 <HAL_GPIO_WritePin>
}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000134 	.word	0x20000134
 8001b90:	40020800 	.word	0x40020800

08001b94 <AHigh_CLow>:
void AHigh_CLow(uint16_t PWM)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM); //PWM coil A
 8001b9e:	4b15      	ldr	r3, [pc, #84]	@ (8001bf4 <AHigh_CLow+0x60>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	88fa      	ldrh	r2, [r7, #6]
 8001ba4:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0); //PWM coil B
 8001ba6:	4b13      	ldr	r3, [pc, #76]	@ (8001bf4 <AHigh_CLow+0x60>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2200      	movs	r2, #0
 8001bac:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0); //PWM coil C
 8001bae:	4b11      	ldr	r3, [pc, #68]	@ (8001bf4 <AHigh_CLow+0x60>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	480e      	ldr	r0, [pc, #56]	@ (8001bf4 <AHigh_CLow+0x60>)
 8001bba:	f003 f8b3 	bl	8004d24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001bbe:	2104      	movs	r1, #4
 8001bc0:	480c      	ldr	r0, [pc, #48]	@ (8001bf4 <AHigh_CLow+0x60>)
 8001bc2:	f003 f8af 	bl	8004d24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001bc6:	2108      	movs	r1, #8
 8001bc8:	480a      	ldr	r0, [pc, #40]	@ (8001bf4 <AHigh_CLow+0x60>)
 8001bca:	f003 f8ab 	bl	8004d24 <HAL_TIM_PWM_Start>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0); //GND coil A
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	4809      	ldr	r0, [pc, #36]	@ (8001bf8 <AHigh_CLow+0x64>)
 8001bd4:	f002 face 	bl	8004174 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0); //GND coil B
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2102      	movs	r1, #2
 8001bdc:	4806      	ldr	r0, [pc, #24]	@ (8001bf8 <AHigh_CLow+0x64>)
 8001bde:	f002 fac9 	bl	8004174 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1); //GND coil C
 8001be2:	2201      	movs	r2, #1
 8001be4:	2104      	movs	r1, #4
 8001be6:	4804      	ldr	r0, [pc, #16]	@ (8001bf8 <AHigh_CLow+0x64>)
 8001be8:	f002 fac4 	bl	8004174 <HAL_GPIO_WritePin>
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000134 	.word	0x20000134
 8001bf8:	40020800 	.word	0x40020800

08001bfc <BHigh_ALow>:
void BHigh_ALow(uint16_t PWM)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0); //PWM coil A
 8001c06:	4b15      	ldr	r3, [pc, #84]	@ (8001c5c <BHigh_ALow+0x60>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWM); //PWM coil B
 8001c0e:	4b13      	ldr	r3, [pc, #76]	@ (8001c5c <BHigh_ALow+0x60>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	88fa      	ldrh	r2, [r7, #6]
 8001c14:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0); //PWM coil C
 8001c16:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <BHigh_ALow+0x60>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001c1e:	2100      	movs	r1, #0
 8001c20:	480e      	ldr	r0, [pc, #56]	@ (8001c5c <BHigh_ALow+0x60>)
 8001c22:	f003 f87f 	bl	8004d24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001c26:	2104      	movs	r1, #4
 8001c28:	480c      	ldr	r0, [pc, #48]	@ (8001c5c <BHigh_ALow+0x60>)
 8001c2a:	f003 f87b 	bl	8004d24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001c2e:	2108      	movs	r1, #8
 8001c30:	480a      	ldr	r0, [pc, #40]	@ (8001c5c <BHigh_ALow+0x60>)
 8001c32:	f003 f877 	bl	8004d24 <HAL_TIM_PWM_Start>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1); //GND coil A
 8001c36:	2201      	movs	r2, #1
 8001c38:	2101      	movs	r1, #1
 8001c3a:	4809      	ldr	r0, [pc, #36]	@ (8001c60 <BHigh_ALow+0x64>)
 8001c3c:	f002 fa9a 	bl	8004174 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0); //GND coil B
 8001c40:	2200      	movs	r2, #0
 8001c42:	2102      	movs	r1, #2
 8001c44:	4806      	ldr	r0, [pc, #24]	@ (8001c60 <BHigh_ALow+0x64>)
 8001c46:	f002 fa95 	bl	8004174 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0); //GND coil C
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2104      	movs	r1, #4
 8001c4e:	4804      	ldr	r0, [pc, #16]	@ (8001c60 <BHigh_ALow+0x64>)
 8001c50:	f002 fa90 	bl	8004174 <HAL_GPIO_WritePin>
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000134 	.word	0x20000134
 8001c60:	40020800 	.word	0x40020800

08001c64 <BHigh_CLow>:
void BHigh_CLow(uint16_t PWM)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0); //PWM coil A
 8001c6e:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <BHigh_CLow+0x60>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2200      	movs	r2, #0
 8001c74:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWM); //PWM coil B
 8001c76:	4b13      	ldr	r3, [pc, #76]	@ (8001cc4 <BHigh_CLow+0x60>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	88fa      	ldrh	r2, [r7, #6]
 8001c7c:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0); //PWM coil C
 8001c7e:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <BHigh_CLow+0x60>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2200      	movs	r2, #0
 8001c84:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001c86:	2100      	movs	r1, #0
 8001c88:	480e      	ldr	r0, [pc, #56]	@ (8001cc4 <BHigh_CLow+0x60>)
 8001c8a:	f003 f84b 	bl	8004d24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001c8e:	2104      	movs	r1, #4
 8001c90:	480c      	ldr	r0, [pc, #48]	@ (8001cc4 <BHigh_CLow+0x60>)
 8001c92:	f003 f847 	bl	8004d24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001c96:	2108      	movs	r1, #8
 8001c98:	480a      	ldr	r0, [pc, #40]	@ (8001cc4 <BHigh_CLow+0x60>)
 8001c9a:	f003 f843 	bl	8004d24 <HAL_TIM_PWM_Start>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0); //GND coil A
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	4809      	ldr	r0, [pc, #36]	@ (8001cc8 <BHigh_CLow+0x64>)
 8001ca4:	f002 fa66 	bl	8004174 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0); //GND coil B
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2102      	movs	r1, #2
 8001cac:	4806      	ldr	r0, [pc, #24]	@ (8001cc8 <BHigh_CLow+0x64>)
 8001cae:	f002 fa61 	bl	8004174 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1); //GND coil C
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	2104      	movs	r1, #4
 8001cb6:	4804      	ldr	r0, [pc, #16]	@ (8001cc8 <BHigh_CLow+0x64>)
 8001cb8:	f002 fa5c 	bl	8004174 <HAL_GPIO_WritePin>
}
 8001cbc:	bf00      	nop
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000134 	.word	0x20000134
 8001cc8:	40020800 	.word	0x40020800

08001ccc <CHigh_ALow>:
void CHigh_ALow(uint16_t PWM)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0); //PWM coil A
 8001cd6:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <CHigh_ALow+0x60>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0); //PWM coil B
 8001cde:	4b13      	ldr	r3, [pc, #76]	@ (8001d2c <CHigh_ALow+0x60>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, PWM); //PWM coil C
 8001ce6:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <CHigh_ALow+0x60>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	88fa      	ldrh	r2, [r7, #6]
 8001cec:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001cee:	2100      	movs	r1, #0
 8001cf0:	480e      	ldr	r0, [pc, #56]	@ (8001d2c <CHigh_ALow+0x60>)
 8001cf2:	f003 f817 	bl	8004d24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001cf6:	2104      	movs	r1, #4
 8001cf8:	480c      	ldr	r0, [pc, #48]	@ (8001d2c <CHigh_ALow+0x60>)
 8001cfa:	f003 f813 	bl	8004d24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001cfe:	2108      	movs	r1, #8
 8001d00:	480a      	ldr	r0, [pc, #40]	@ (8001d2c <CHigh_ALow+0x60>)
 8001d02:	f003 f80f 	bl	8004d24 <HAL_TIM_PWM_Start>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1); //GND coil A
 8001d06:	2201      	movs	r2, #1
 8001d08:	2101      	movs	r1, #1
 8001d0a:	4809      	ldr	r0, [pc, #36]	@ (8001d30 <CHigh_ALow+0x64>)
 8001d0c:	f002 fa32 	bl	8004174 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0); //GND coil B
 8001d10:	2200      	movs	r2, #0
 8001d12:	2102      	movs	r1, #2
 8001d14:	4806      	ldr	r0, [pc, #24]	@ (8001d30 <CHigh_ALow+0x64>)
 8001d16:	f002 fa2d 	bl	8004174 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0); //GND coil C
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2104      	movs	r1, #4
 8001d1e:	4804      	ldr	r0, [pc, #16]	@ (8001d30 <CHigh_ALow+0x64>)
 8001d20:	f002 fa28 	bl	8004174 <HAL_GPIO_WritePin>
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000134 	.word	0x20000134
 8001d30:	40020800 	.word	0x40020800

08001d34 <CHigh_BLow>:
void CHigh_BLow(uint16_t PWM)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0); //PWM coil A
 8001d3e:	4b15      	ldr	r3, [pc, #84]	@ (8001d94 <CHigh_BLow+0x60>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2200      	movs	r2, #0
 8001d44:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0); //PWM coil B
 8001d46:	4b13      	ldr	r3, [pc, #76]	@ (8001d94 <CHigh_BLow+0x60>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, PWM); //PWM coil C
 8001d4e:	4b11      	ldr	r3, [pc, #68]	@ (8001d94 <CHigh_BLow+0x60>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	88fa      	ldrh	r2, [r7, #6]
 8001d54:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001d56:	2100      	movs	r1, #0
 8001d58:	480e      	ldr	r0, [pc, #56]	@ (8001d94 <CHigh_BLow+0x60>)
 8001d5a:	f002 ffe3 	bl	8004d24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001d5e:	2104      	movs	r1, #4
 8001d60:	480c      	ldr	r0, [pc, #48]	@ (8001d94 <CHigh_BLow+0x60>)
 8001d62:	f002 ffdf 	bl	8004d24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001d66:	2108      	movs	r1, #8
 8001d68:	480a      	ldr	r0, [pc, #40]	@ (8001d94 <CHigh_BLow+0x60>)
 8001d6a:	f002 ffdb 	bl	8004d24 <HAL_TIM_PWM_Start>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0); //GND coil A
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2101      	movs	r1, #1
 8001d72:	4809      	ldr	r0, [pc, #36]	@ (8001d98 <CHigh_BLow+0x64>)
 8001d74:	f002 f9fe 	bl	8004174 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1); //GND coil B
 8001d78:	2201      	movs	r2, #1
 8001d7a:	2102      	movs	r1, #2
 8001d7c:	4806      	ldr	r0, [pc, #24]	@ (8001d98 <CHigh_BLow+0x64>)
 8001d7e:	f002 f9f9 	bl	8004174 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0); //GND coil C
 8001d82:	2200      	movs	r2, #0
 8001d84:	2104      	movs	r1, #4
 8001d86:	4804      	ldr	r0, [pc, #16]	@ (8001d98 <CHigh_BLow+0x64>)
 8001d88:	f002 f9f4 	bl	8004174 <HAL_GPIO_WritePin>
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000134 	.word	0x20000134
 8001d98:	40020800 	.word	0x40020800

08001d9c <restart_tim_5>:
		__HAL_TIM_GET_COUNTER(&htim4) = 0;
	}
}

void restart_tim_5()
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
	if (!(tim_5_status >> 7))//if timer is off, start it
 8001da0:	4b0a      	ldr	r3, [pc, #40]	@ (8001dcc <restart_tim_5+0x30>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b25b      	sxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	db05      	blt.n	8001db6 <restart_tim_5+0x1a>
	{
		HAL_TIM_Base_Start(&htim5);
 8001daa:	4809      	ldr	r0, [pc, #36]	@ (8001dd0 <restart_tim_5+0x34>)
 8001dac:	f002 fec2 	bl	8004b34 <HAL_TIM_Base_Start>
		tim_5_status = tim_5_status || 0b1000000;
 8001db0:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <restart_tim_5+0x30>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	701a      	strb	r2, [r3, #0]
	}
	if (__HAL_TIM_GET_COUNTER(&htim5) != 0)//if timer counter is not 0, reset it
 8001db6:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <restart_tim_5+0x34>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <restart_tim_5+0x2c>
	{
		__HAL_TIM_GET_COUNTER(&htim5) = 0;
 8001dc0:	4b03      	ldr	r3, [pc, #12]	@ (8001dd0 <restart_tim_5+0x34>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	200000a2 	.word	0x200000a2
 8001dd0:	20000218 	.word	0x20000218

08001dd4 <check_coil_status>:

void check_coil_status() //used in interrupts
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
	  //read pin PE2 (coil A)
	  switch(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2))
 8001dd8:	2104      	movs	r1, #4
 8001dda:	4826      	ldr	r0, [pc, #152]	@ (8001e74 <check_coil_status+0xa0>)
 8001ddc:	f002 f9b2 	bl	8004144 <HAL_GPIO_ReadPin>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d002      	beq.n	8001dec <check_coil_status+0x18>
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d00b      	beq.n	8001e02 <check_coil_status+0x2e>
 8001dea:	e00e      	b.n	8001e0a <check_coil_status+0x36>
	  {
	  case 0:
		  coil_status = coil_status && 0b11111110; //status of coil A is lower than COM
 8001dec:	4b22      	ldr	r3, [pc, #136]	@ (8001e78 <check_coil_status+0xa4>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	bf14      	ite	ne
 8001df4:	2301      	movne	r3, #1
 8001df6:	2300      	moveq	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	4b1e      	ldr	r3, [pc, #120]	@ (8001e78 <check_coil_status+0xa4>)
 8001dfe:	701a      	strb	r2, [r3, #0]
		  break;
 8001e00:	e003      	b.n	8001e0a <check_coil_status+0x36>
	  case 1:
		  coil_status = coil_status || 0b00000001; //status of coil A is higher than COM
 8001e02:	4b1d      	ldr	r3, [pc, #116]	@ (8001e78 <check_coil_status+0xa4>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	701a      	strb	r2, [r3, #0]
		  break;
 8001e08:	bf00      	nop
	  }

	  //read pin PE3 (coil B)
	  switch(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_3))
 8001e0a:	2108      	movs	r1, #8
 8001e0c:	4819      	ldr	r0, [pc, #100]	@ (8001e74 <check_coil_status+0xa0>)
 8001e0e:	f002 f999 	bl	8004144 <HAL_GPIO_ReadPin>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d002      	beq.n	8001e1e <check_coil_status+0x4a>
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d00b      	beq.n	8001e34 <check_coil_status+0x60>
 8001e1c:	e00e      	b.n	8001e3c <check_coil_status+0x68>
	  {
	  case 0:
		  coil_status = coil_status && 0b11111101; //status of coil B is lower than COM
 8001e1e:	4b16      	ldr	r3, [pc, #88]	@ (8001e78 <check_coil_status+0xa4>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	bf14      	ite	ne
 8001e26:	2301      	movne	r3, #1
 8001e28:	2300      	moveq	r3, #0
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b12      	ldr	r3, [pc, #72]	@ (8001e78 <check_coil_status+0xa4>)
 8001e30:	701a      	strb	r2, [r3, #0]
		  break;
 8001e32:	e003      	b.n	8001e3c <check_coil_status+0x68>
	  case 1:
		  coil_status = coil_status || 0b00000010; //status of coil B is higher than COM
 8001e34:	4b10      	ldr	r3, [pc, #64]	@ (8001e78 <check_coil_status+0xa4>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]
		  break;
 8001e3a:	bf00      	nop
	  }

	  //read pin PE4 (coil C)
	  switch(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_3))
 8001e3c:	2108      	movs	r1, #8
 8001e3e:	480d      	ldr	r0, [pc, #52]	@ (8001e74 <check_coil_status+0xa0>)
 8001e40:	f002 f980 	bl	8004144 <HAL_GPIO_ReadPin>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d002      	beq.n	8001e50 <check_coil_status+0x7c>
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d00b      	beq.n	8001e66 <check_coil_status+0x92>
	  case 1:
		  coil_status = coil_status || 0b00000100; //status of coil C is higher than COM
		  break;
	  }

}
 8001e4e:	e00e      	b.n	8001e6e <check_coil_status+0x9a>
		  coil_status = coil_status && 0b11111011; //status of coil C is lower than COM
 8001e50:	4b09      	ldr	r3, [pc, #36]	@ (8001e78 <check_coil_status+0xa4>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	bf14      	ite	ne
 8001e58:	2301      	movne	r3, #1
 8001e5a:	2300      	moveq	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	461a      	mov	r2, r3
 8001e60:	4b05      	ldr	r3, [pc, #20]	@ (8001e78 <check_coil_status+0xa4>)
 8001e62:	701a      	strb	r2, [r3, #0]
		  break;
 8001e64:	e003      	b.n	8001e6e <check_coil_status+0x9a>
		  coil_status = coil_status || 0b00000100; //status of coil C is higher than COM
 8001e66:	4b04      	ldr	r3, [pc, #16]	@ (8001e78 <check_coil_status+0xa4>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
		  break;
 8001e6c:	bf00      	nop
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000
 8001e78:	2000009d 	.word	0x2000009d

08001e7c <find_change>:

void find_change(uint8_t num) //used in interrupts
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
	switch (num)
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	2b0c      	cmp	r3, #12
 8001e8a:	d020      	beq.n	8001ece <find_change+0x52>
 8001e8c:	2b0c      	cmp	r3, #12
 8001e8e:	dc2c      	bgt.n	8001eea <find_change+0x6e>
 8001e90:	2b0a      	cmp	r3, #10
 8001e92:	d002      	beq.n	8001e9a <find_change+0x1e>
 8001e94:	2b0b      	cmp	r3, #11
 8001e96:	d00c      	beq.n	8001eb2 <find_change+0x36>
 8001e98:	e027      	b.n	8001eea <find_change+0x6e>
	{
	case 0x0A:
		if(coil_status) //if current coil A status is high
 8001e9a:	4b19      	ldr	r3, [pc, #100]	@ (8001f00 <find_change+0x84>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <find_change+0x2e>
		{
			last_change = 0b00000010; //coil A rise
 8001ea2:	4b18      	ldr	r3, [pc, #96]	@ (8001f04 <find_change+0x88>)
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			last_change = 0b00000001; //coil A fall
		}
		break;
 8001ea8:	e01f      	b.n	8001eea <find_change+0x6e>
			last_change = 0b00000001; //coil A fall
 8001eaa:	4b16      	ldr	r3, [pc, #88]	@ (8001f04 <find_change+0x88>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	701a      	strb	r2, [r3, #0]
		break;
 8001eb0:	e01b      	b.n	8001eea <find_change+0x6e>
	case 0x0B: //if current coil B status is high
		if(coil_status>>1)
 8001eb2:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <find_change+0x84>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	085b      	lsrs	r3, r3, #1
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <find_change+0x4a>
		{
			last_change = 0b00001000; //coil B rise
 8001ebe:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <find_change+0x88>)
 8001ec0:	2208      	movs	r2, #8
 8001ec2:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			last_change = 0b00000100; //coil B fall
		}
		break;
 8001ec4:	e011      	b.n	8001eea <find_change+0x6e>
			last_change = 0b00000100; //coil B fall
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8001f04 <find_change+0x88>)
 8001ec8:	2204      	movs	r2, #4
 8001eca:	701a      	strb	r2, [r3, #0]
		break;
 8001ecc:	e00d      	b.n	8001eea <find_change+0x6e>
	case 0x0C: //if current coil C status is high
		if(coil_status>>2)
 8001ece:	4b0c      	ldr	r3, [pc, #48]	@ (8001f00 <find_change+0x84>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	089b      	lsrs	r3, r3, #2
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <find_change+0x66>
		{
			last_change = 0b00100000; //coil C rise
 8001eda:	4b0a      	ldr	r3, [pc, #40]	@ (8001f04 <find_change+0x88>)
 8001edc:	2220      	movs	r2, #32
 8001ede:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			last_change = 0b00010000; //coil C fall
		}
		break;
 8001ee0:	e002      	b.n	8001ee8 <find_change+0x6c>
			last_change = 0b00010000; //coil C fall
 8001ee2:	4b08      	ldr	r3, [pc, #32]	@ (8001f04 <find_change+0x88>)
 8001ee4:	2210      	movs	r2, #16
 8001ee6:	701a      	strb	r2, [r3, #0]
		break;
 8001ee8:	bf00      	nop
	}
	coil_old_status = coil_status;
 8001eea:	4b05      	ldr	r3, [pc, #20]	@ (8001f00 <find_change+0x84>)
 8001eec:	781a      	ldrb	r2, [r3, #0]
 8001eee:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <find_change+0x8c>)
 8001ef0:	701a      	strb	r2, [r3, #0]

}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	2000009d 	.word	0x2000009d
 8001f04:	2000009f 	.word	0x2000009f
 8001f08:	2000009e 	.word	0x2000009e

08001f0c <check_actuator_status>:

void check_actuator_status() //used in interrupts
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
	if(actuator_status >> 1)// if actuator "needs starting" status is high, change it to low
 8001f10:	4b0a      	ldr	r3, [pc, #40]	@ (8001f3c <check_actuator_status+0x30>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	085b      	lsrs	r3, r3, #1
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d009      	beq.n	8001f30 <check_actuator_status+0x24>
	{
		actuator_status = actuator_status && 0b11111101;
 8001f1c:	4b07      	ldr	r3, [pc, #28]	@ (8001f3c <check_actuator_status+0x30>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	bf14      	ite	ne
 8001f24:	2301      	movne	r3, #1
 8001f26:	2300      	moveq	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4b03      	ldr	r3, [pc, #12]	@ (8001f3c <check_actuator_status+0x30>)
 8001f2e:	701a      	strb	r2, [r3, #0]
	}
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	20000000 	.word	0x20000000

08001f40 <HAL_GPIO_EXTI_Callback>:



//interrupts
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) //interrupt callback function
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f50:	f000 8094 	beq.w	800207c <HAL_GPIO_EXTI_Callback+0x13c>
 8001f54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f58:	f300 80bf 	bgt.w	80020da <HAL_GPIO_EXTI_Callback+0x19a>
 8001f5c:	2b10      	cmp	r3, #16
 8001f5e:	d063      	beq.n	8002028 <HAL_GPIO_EXTI_Callback+0xe8>
 8001f60:	2b10      	cmp	r3, #16
 8001f62:	f300 80ba 	bgt.w	80020da <HAL_GPIO_EXTI_Callback+0x19a>
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d002      	beq.n	8001f70 <HAL_GPIO_EXTI_Callback+0x30>
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d032      	beq.n	8001fd4 <HAL_GPIO_EXTI_Callback+0x94>
			HAL_GPIO_Init(GPIOG, &GPIO_InitStructPrivate);

		}
		break;
	}
}
 8001f6e:	e0b4      	b.n	80020da <HAL_GPIO_EXTI_Callback+0x19a>
		GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8001f70:	f107 030c 	add.w	r3, r7, #12
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
		GPIO_InitStructPrivate.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001f80:	231c      	movs	r3, #28
 8001f82:	60fb      	str	r3, [r7, #12]
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]
		GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOE, &GPIO_InitStructPrivate);
 8001f90:	f107 030c 	add.w	r3, r7, #12
 8001f94:	4619      	mov	r1, r3
 8001f96:	4853      	ldr	r0, [pc, #332]	@ (80020e4 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001f98:	f001 ff38 	bl	8003e0c <HAL_GPIO_Init>
		check_coil_status();
 8001f9c:	f7ff ff1a 	bl	8001dd4 <check_coil_status>
		find_change(0x0A);// find out if its rising or falling edge
 8001fa0:	200a      	movs	r0, #10
 8001fa2:	f7ff ff6b 	bl	8001e7c <find_change>
		check_actuator_status();
 8001fa6:	f7ff ffb1 	bl	8001f0c <check_actuator_status>
		counter_2 = __HAL_TIM_GET_COUNTER(&htim5);
 8001faa:	4b4f      	ldr	r3, [pc, #316]	@ (80020e8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb0:	4a4e      	ldr	r2, [pc, #312]	@ (80020ec <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001fb2:	6013      	str	r3, [r2, #0]
		restart_tim_5();
 8001fb4:	f7ff fef2 	bl	8001d9c <restart_tim_5>
		GPIO_InitStructPrivate.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001fb8:	231c      	movs	r3, #28
 8001fba:	60fb      	str	r3, [r7, #12]
		GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001fbc:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001fc0:	613b      	str	r3, [r7, #16]
		GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOE, &GPIO_InitStructPrivate);
 8001fc6:	f107 030c 	add.w	r3, r7, #12
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4845      	ldr	r0, [pc, #276]	@ (80020e4 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001fce:	f001 ff1d 	bl	8003e0c <HAL_GPIO_Init>
		break;
 8001fd2:	e082      	b.n	80020da <HAL_GPIO_EXTI_Callback+0x19a>
		GPIO_InitStructPrivate.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001fd4:	231c      	movs	r3, #28
 8001fd6:	60fb      	str	r3, [r7, #12]
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	613b      	str	r3, [r7, #16]
		GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOE, &GPIO_InitStructPrivate);
 8001fe4:	f107 030c 	add.w	r3, r7, #12
 8001fe8:	4619      	mov	r1, r3
 8001fea:	483e      	ldr	r0, [pc, #248]	@ (80020e4 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001fec:	f001 ff0e 	bl	8003e0c <HAL_GPIO_Init>
		check_coil_status();
 8001ff0:	f7ff fef0 	bl	8001dd4 <check_coil_status>
		find_change(0x0B);// find out if its rising or falling edge
 8001ff4:	200b      	movs	r0, #11
 8001ff6:	f7ff ff41 	bl	8001e7c <find_change>
		check_actuator_status();
 8001ffa:	f7ff ff87 	bl	8001f0c <check_actuator_status>
		counter_2 = __HAL_TIM_GET_COUNTER(&htim5);
 8001ffe:	4b3a      	ldr	r3, [pc, #232]	@ (80020e8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002004:	4a39      	ldr	r2, [pc, #228]	@ (80020ec <HAL_GPIO_EXTI_Callback+0x1ac>)
 8002006:	6013      	str	r3, [r2, #0]
		restart_tim_5();
 8002008:	f7ff fec8 	bl	8001d9c <restart_tim_5>
		GPIO_InitStructPrivate.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800200c:	231c      	movs	r3, #28
 800200e:	60fb      	str	r3, [r7, #12]
		GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002010:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002014:	613b      	str	r3, [r7, #16]
		GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOE, &GPIO_InitStructPrivate);
 800201a:	f107 030c 	add.w	r3, r7, #12
 800201e:	4619      	mov	r1, r3
 8002020:	4830      	ldr	r0, [pc, #192]	@ (80020e4 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8002022:	f001 fef3 	bl	8003e0c <HAL_GPIO_Init>
		break;
 8002026:	e058      	b.n	80020da <HAL_GPIO_EXTI_Callback+0x19a>
		GPIO_InitStructPrivate.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8002028:	231c      	movs	r3, #28
 800202a:	60fb      	str	r3, [r7, #12]
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 800202c:	2300      	movs	r3, #0
 800202e:	613b      	str	r3, [r7, #16]
		GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8002034:	2300      	movs	r3, #0
 8002036:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOE, &GPIO_InitStructPrivate);
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	4619      	mov	r1, r3
 800203e:	4829      	ldr	r0, [pc, #164]	@ (80020e4 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8002040:	f001 fee4 	bl	8003e0c <HAL_GPIO_Init>
		check_coil_status();
 8002044:	f7ff fec6 	bl	8001dd4 <check_coil_status>
		find_change(0x0C);// find out if its rising or falling edge
 8002048:	200c      	movs	r0, #12
 800204a:	f7ff ff17 	bl	8001e7c <find_change>
		check_actuator_status();
 800204e:	f7ff ff5d 	bl	8001f0c <check_actuator_status>
		counter_2 = __HAL_TIM_GET_COUNTER(&htim5);
 8002052:	4b25      	ldr	r3, [pc, #148]	@ (80020e8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002058:	4a24      	ldr	r2, [pc, #144]	@ (80020ec <HAL_GPIO_EXTI_Callback+0x1ac>)
 800205a:	6013      	str	r3, [r2, #0]
		restart_tim_5();
 800205c:	f7ff fe9e 	bl	8001d9c <restart_tim_5>
		GPIO_InitStructPrivate.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8002060:	231c      	movs	r3, #28
 8002062:	60fb      	str	r3, [r7, #12]
		GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002064:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002068:	613b      	str	r3, [r7, #16]
		GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOE, &GPIO_InitStructPrivate);
 800206e:	f107 030c 	add.w	r3, r7, #12
 8002072:	4619      	mov	r1, r3
 8002074:	481b      	ldr	r0, [pc, #108]	@ (80020e4 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8002076:	f001 fec9 	bl	8003e0c <HAL_GPIO_Init>
		break;
 800207a:	e02e      	b.n	80020da <HAL_GPIO_EXTI_Callback+0x19a>
		mils_current = HAL_GetTick();
 800207c:	f000 fb5e 	bl	800273c <HAL_GetTick>
 8002080:	4603      	mov	r3, r0
 8002082:	4a1b      	ldr	r2, [pc, #108]	@ (80020f0 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8002084:	6013      	str	r3, [r2, #0]
		if (mils_current - mils_old > 10)
 8002086:	4b1a      	ldr	r3, [pc, #104]	@ (80020f0 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	4b1a      	ldr	r3, [pc, #104]	@ (80020f4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b0a      	cmp	r3, #10
 8002092:	d921      	bls.n	80020d8 <HAL_GPIO_EXTI_Callback+0x198>
			GPIO_InitStructPrivate.Pin = GPIO_PIN_11;
 8002094:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002098:	60fb      	str	r3, [r7, #12]
			GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
			GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
			GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
			HAL_GPIO_Init(GPIOG, &GPIO_InitStructPrivate);
 80020a6:	f107 030c 	add.w	r3, r7, #12
 80020aa:	4619      	mov	r1, r3
 80020ac:	4812      	ldr	r0, [pc, #72]	@ (80020f8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80020ae:	f001 fead 	bl	8003e0c <HAL_GPIO_Init>
			HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_11);
 80020b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020b6:	4810      	ldr	r0, [pc, #64]	@ (80020f8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80020b8:	f002 f844 	bl	8004144 <HAL_GPIO_ReadPin>
			GPIO_InitStructPrivate.Pin = GPIO_PIN_11;
 80020bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020c0:	60fb      	str	r3, [r7, #12]
			GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 80020c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020c6:	613b      	str	r3, [r7, #16]
			GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 80020c8:	2302      	movs	r3, #2
 80020ca:	617b      	str	r3, [r7, #20]
			HAL_GPIO_Init(GPIOG, &GPIO_InitStructPrivate);
 80020cc:	f107 030c 	add.w	r3, r7, #12
 80020d0:	4619      	mov	r1, r3
 80020d2:	4809      	ldr	r0, [pc, #36]	@ (80020f8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80020d4:	f001 fe9a 	bl	8003e0c <HAL_GPIO_Init>
		break;
 80020d8:	bf00      	nop
}
 80020da:	bf00      	nop
 80020dc:	3720      	adds	r7, #32
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000
 80020e8:	20000218 	.word	0x20000218
 80020ec:	200000b4 	.word	0x200000b4
 80020f0:	200000b8 	.word	0x200000b8
 80020f4:	200000bc 	.word	0x200000bc
 80020f8:	40021800 	.word	0x40021800

080020fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002100:	b672      	cpsid	i
}
 8002102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002104:	bf00      	nop
 8002106:	e7fd      	b.n	8002104 <Error_Handler+0x8>

08002108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800210e:	4b0f      	ldr	r3, [pc, #60]	@ (800214c <HAL_MspInit+0x44>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002112:	4a0e      	ldr	r2, [pc, #56]	@ (800214c <HAL_MspInit+0x44>)
 8002114:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002118:	6413      	str	r3, [r2, #64]	@ 0x40
 800211a:	4b0c      	ldr	r3, [pc, #48]	@ (800214c <HAL_MspInit+0x44>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002122:	607b      	str	r3, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	4b09      	ldr	r3, [pc, #36]	@ (800214c <HAL_MspInit+0x44>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212a:	4a08      	ldr	r2, [pc, #32]	@ (800214c <HAL_MspInit+0x44>)
 800212c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002130:	6453      	str	r3, [r2, #68]	@ 0x44
 8002132:	4b06      	ldr	r3, [pc, #24]	@ (800214c <HAL_MspInit+0x44>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002136:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40023800 	.word	0x40023800

08002150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002154:	bf00      	nop
 8002156:	e7fd      	b.n	8002154 <NMI_Handler+0x4>

08002158 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800215c:	bf00      	nop
 800215e:	e7fd      	b.n	800215c <HardFault_Handler+0x4>

08002160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002164:	bf00      	nop
 8002166:	e7fd      	b.n	8002164 <MemManage_Handler+0x4>

08002168 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800216c:	bf00      	nop
 800216e:	e7fd      	b.n	800216c <BusFault_Handler+0x4>

08002170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002174:	bf00      	nop
 8002176:	e7fd      	b.n	8002174 <UsageFault_Handler+0x4>

08002178 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a6:	f000 fab5 	bl	8002714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}

080021ae <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80021b2:	2004      	movs	r0, #4
 80021b4:	f001 fff8 	bl	80041a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}

080021bc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80021c0:	2008      	movs	r0, #8
 80021c2:	f001 fff1 	bl	80041a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}

080021ca <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80021ce:	2010      	movs	r0, #16
 80021d0:	f001 ffea 	bl	80041a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80021d4:	bf00      	nop
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80021dc:	4802      	ldr	r0, [pc, #8]	@ (80021e8 <CAN1_TX_IRQHandler+0x10>)
 80021de:	f001 fad4 	bl	800378a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000074 	.word	0x20000074

080021ec <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80021f0:	4802      	ldr	r0, [pc, #8]	@ (80021fc <CAN1_RX0_IRQHandler+0x10>)
 80021f2:	f001 faca 	bl	800378a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000074 	.word	0x20000074

08002200 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002204:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002208:	f001 ffce 	bl	80041a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}

08002210 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002214:	4b06      	ldr	r3, [pc, #24]	@ (8002230 <SystemInit+0x20>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221a:	4a05      	ldr	r2, [pc, #20]	@ (8002230 <SystemInit+0x20>)
 800221c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002220:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08e      	sub	sp, #56	@ 0x38
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800223a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	605a      	str	r2, [r3, #4]
 8002244:	609a      	str	r2, [r3, #8]
 8002246:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002248:	f107 031c 	add.w	r3, r7, #28
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002254:	463b      	mov	r3, r7
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	60da      	str	r2, [r3, #12]
 8002260:	611a      	str	r2, [r3, #16]
 8002262:	615a      	str	r2, [r3, #20]
 8002264:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002266:	4b38      	ldr	r3, [pc, #224]	@ (8002348 <MX_TIM2_Init+0x114>)
 8002268:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800226c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 800226e:	4b36      	ldr	r3, [pc, #216]	@ (8002348 <MX_TIM2_Init+0x114>)
 8002270:	2203      	movs	r2, #3
 8002272:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002274:	4b34      	ldr	r3, [pc, #208]	@ (8002348 <MX_TIM2_Init+0x114>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800227a:	4b33      	ldr	r3, [pc, #204]	@ (8002348 <MX_TIM2_Init+0x114>)
 800227c:	2263      	movs	r2, #99	@ 0x63
 800227e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002280:	4b31      	ldr	r3, [pc, #196]	@ (8002348 <MX_TIM2_Init+0x114>)
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002286:	4b30      	ldr	r3, [pc, #192]	@ (8002348 <MX_TIM2_Init+0x114>)
 8002288:	2200      	movs	r2, #0
 800228a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800228c:	482e      	ldr	r0, [pc, #184]	@ (8002348 <MX_TIM2_Init+0x114>)
 800228e:	f002 fbf9 	bl	8004a84 <HAL_TIM_Base_Init>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002298:	f7ff ff30 	bl	80020fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800229c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022a6:	4619      	mov	r1, r3
 80022a8:	4827      	ldr	r0, [pc, #156]	@ (8002348 <MX_TIM2_Init+0x114>)
 80022aa:	f002 ff49 	bl	8005140 <HAL_TIM_ConfigClockSource>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80022b4:	f7ff ff22 	bl	80020fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80022b8:	4823      	ldr	r0, [pc, #140]	@ (8002348 <MX_TIM2_Init+0x114>)
 80022ba:	f002 fcd2 	bl	8004c62 <HAL_TIM_PWM_Init>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80022c4:	f7ff ff1a 	bl	80020fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022cc:	2300      	movs	r3, #0
 80022ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022d0:	f107 031c 	add.w	r3, r7, #28
 80022d4:	4619      	mov	r1, r3
 80022d6:	481c      	ldr	r0, [pc, #112]	@ (8002348 <MX_TIM2_Init+0x114>)
 80022d8:	f003 fbc6 	bl	8005a68 <HAL_TIMEx_MasterConfigSynchronization>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80022e2:	f7ff ff0b 	bl	80020fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022e6:	2360      	movs	r3, #96	@ 0x60
 80022e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022f6:	463b      	mov	r3, r7
 80022f8:	2200      	movs	r2, #0
 80022fa:	4619      	mov	r1, r3
 80022fc:	4812      	ldr	r0, [pc, #72]	@ (8002348 <MX_TIM2_Init+0x114>)
 80022fe:	f002 fe0b 	bl	8004f18 <HAL_TIM_PWM_ConfigChannel>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002308:	f7ff fef8 	bl	80020fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800230c:	463b      	mov	r3, r7
 800230e:	2204      	movs	r2, #4
 8002310:	4619      	mov	r1, r3
 8002312:	480d      	ldr	r0, [pc, #52]	@ (8002348 <MX_TIM2_Init+0x114>)
 8002314:	f002 fe00 	bl	8004f18 <HAL_TIM_PWM_ConfigChannel>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800231e:	f7ff feed 	bl	80020fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002322:	463b      	mov	r3, r7
 8002324:	2208      	movs	r2, #8
 8002326:	4619      	mov	r1, r3
 8002328:	4807      	ldr	r0, [pc, #28]	@ (8002348 <MX_TIM2_Init+0x114>)
 800232a:	f002 fdf5 	bl	8004f18 <HAL_TIM_PWM_ConfigChannel>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002334:	f7ff fee2 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002338:	4803      	ldr	r0, [pc, #12]	@ (8002348 <MX_TIM2_Init+0x114>)
 800233a:	f000 f94f 	bl	80025dc <HAL_TIM_MspPostInit>

}
 800233e:	bf00      	nop
 8002340:	3738      	adds	r7, #56	@ 0x38
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000134 	.word	0x20000134

0800234c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002352:	f107 0310 	add.w	r3, r7, #16
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800236a:	4b1d      	ldr	r3, [pc, #116]	@ (80023e0 <MX_TIM3_Init+0x94>)
 800236c:	4a1d      	ldr	r2, [pc, #116]	@ (80023e4 <MX_TIM3_Init+0x98>)
 800236e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 8002370:	4b1b      	ldr	r3, [pc, #108]	@ (80023e0 <MX_TIM3_Init+0x94>)
 8002372:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8002376:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002378:	4b19      	ldr	r3, [pc, #100]	@ (80023e0 <MX_TIM3_Init+0x94>)
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800237e:	4b18      	ldr	r3, [pc, #96]	@ (80023e0 <MX_TIM3_Init+0x94>)
 8002380:	2263      	movs	r2, #99	@ 0x63
 8002382:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002384:	4b16      	ldr	r3, [pc, #88]	@ (80023e0 <MX_TIM3_Init+0x94>)
 8002386:	2200      	movs	r2, #0
 8002388:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800238a:	4b15      	ldr	r3, [pc, #84]	@ (80023e0 <MX_TIM3_Init+0x94>)
 800238c:	2200      	movs	r2, #0
 800238e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002390:	4813      	ldr	r0, [pc, #76]	@ (80023e0 <MX_TIM3_Init+0x94>)
 8002392:	f002 fb77 	bl	8004a84 <HAL_TIM_Base_Init>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800239c:	f7ff feae 	bl	80020fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023a6:	f107 0310 	add.w	r3, r7, #16
 80023aa:	4619      	mov	r1, r3
 80023ac:	480c      	ldr	r0, [pc, #48]	@ (80023e0 <MX_TIM3_Init+0x94>)
 80023ae:	f002 fec7 	bl	8005140 <HAL_TIM_ConfigClockSource>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80023b8:	f7ff fea0 	bl	80020fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023bc:	2300      	movs	r3, #0
 80023be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023c4:	1d3b      	adds	r3, r7, #4
 80023c6:	4619      	mov	r1, r3
 80023c8:	4805      	ldr	r0, [pc, #20]	@ (80023e0 <MX_TIM3_Init+0x94>)
 80023ca:	f003 fb4d 	bl	8005a68 <HAL_TIMEx_MasterConfigSynchronization>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80023d4:	f7ff fe92 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80023d8:	bf00      	nop
 80023da:	3720      	adds	r7, #32
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20000180 	.word	0x20000180
 80023e4:	40000400 	.word	0x40000400

080023e8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023ee:	f107 0310 	add.w	r3, r7, #16
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	605a      	str	r2, [r3, #4]
 80023f8:	609a      	str	r2, [r3, #8]
 80023fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023fc:	1d3b      	adds	r3, r7, #4
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	605a      	str	r2, [r3, #4]
 8002404:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002406:	4b1e      	ldr	r3, [pc, #120]	@ (8002480 <MX_TIM4_Init+0x98>)
 8002408:	4a1e      	ldr	r2, [pc, #120]	@ (8002484 <MX_TIM4_Init+0x9c>)
 800240a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1599;
 800240c:	4b1c      	ldr	r3, [pc, #112]	@ (8002480 <MX_TIM4_Init+0x98>)
 800240e:	f240 623f 	movw	r2, #1599	@ 0x63f
 8002412:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002414:	4b1a      	ldr	r3, [pc, #104]	@ (8002480 <MX_TIM4_Init+0x98>)
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800241a:	4b19      	ldr	r3, [pc, #100]	@ (8002480 <MX_TIM4_Init+0x98>)
 800241c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002420:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002422:	4b17      	ldr	r3, [pc, #92]	@ (8002480 <MX_TIM4_Init+0x98>)
 8002424:	2200      	movs	r2, #0
 8002426:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002428:	4b15      	ldr	r3, [pc, #84]	@ (8002480 <MX_TIM4_Init+0x98>)
 800242a:	2200      	movs	r2, #0
 800242c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800242e:	4814      	ldr	r0, [pc, #80]	@ (8002480 <MX_TIM4_Init+0x98>)
 8002430:	f002 fb28 	bl	8004a84 <HAL_TIM_Base_Init>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800243a:	f7ff fe5f 	bl	80020fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800243e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002442:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002444:	f107 0310 	add.w	r3, r7, #16
 8002448:	4619      	mov	r1, r3
 800244a:	480d      	ldr	r0, [pc, #52]	@ (8002480 <MX_TIM4_Init+0x98>)
 800244c:	f002 fe78 	bl	8005140 <HAL_TIM_ConfigClockSource>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002456:	f7ff fe51 	bl	80020fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800245a:	2300      	movs	r3, #0
 800245c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	4619      	mov	r1, r3
 8002466:	4806      	ldr	r0, [pc, #24]	@ (8002480 <MX_TIM4_Init+0x98>)
 8002468:	f003 fafe 	bl	8005a68 <HAL_TIMEx_MasterConfigSynchronization>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002472:	f7ff fe43 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002476:	bf00      	nop
 8002478:	3720      	adds	r7, #32
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	200001cc 	.word	0x200001cc
 8002484:	40000800 	.word	0x40000800

08002488 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800248e:	f107 0310 	add.w	r3, r7, #16
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800249c:	1d3b      	adds	r3, r7, #4
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80024a6:	4b1d      	ldr	r3, [pc, #116]	@ (800251c <MX_TIM5_Init+0x94>)
 80024a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002520 <MX_TIM5_Init+0x98>)
 80024aa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1;
 80024ac:	4b1b      	ldr	r3, [pc, #108]	@ (800251c <MX_TIM5_Init+0x94>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b2:	4b1a      	ldr	r3, [pc, #104]	@ (800251c <MX_TIM5_Init+0x94>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 3999999;
 80024b8:	4b18      	ldr	r3, [pc, #96]	@ (800251c <MX_TIM5_Init+0x94>)
 80024ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002524 <MX_TIM5_Init+0x9c>)
 80024bc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024be:	4b17      	ldr	r3, [pc, #92]	@ (800251c <MX_TIM5_Init+0x94>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c4:	4b15      	ldr	r3, [pc, #84]	@ (800251c <MX_TIM5_Init+0x94>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80024ca:	4814      	ldr	r0, [pc, #80]	@ (800251c <MX_TIM5_Init+0x94>)
 80024cc:	f002 fada 	bl	8004a84 <HAL_TIM_Base_Init>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80024d6:	f7ff fe11 	bl	80020fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80024e0:	f107 0310 	add.w	r3, r7, #16
 80024e4:	4619      	mov	r1, r3
 80024e6:	480d      	ldr	r0, [pc, #52]	@ (800251c <MX_TIM5_Init+0x94>)
 80024e8:	f002 fe2a 	bl	8005140 <HAL_TIM_ConfigClockSource>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80024f2:	f7ff fe03 	bl	80020fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024f6:	2300      	movs	r3, #0
 80024f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80024fe:	1d3b      	adds	r3, r7, #4
 8002500:	4619      	mov	r1, r3
 8002502:	4806      	ldr	r0, [pc, #24]	@ (800251c <MX_TIM5_Init+0x94>)
 8002504:	f003 fab0 	bl	8005a68 <HAL_TIMEx_MasterConfigSynchronization>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800250e:	f7ff fdf5 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002512:	bf00      	nop
 8002514:	3720      	adds	r7, #32
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000218 	.word	0x20000218
 8002520:	40000c00 	.word	0x40000c00
 8002524:	003d08ff 	.word	0x003d08ff

08002528 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002528:	b480      	push	{r7}
 800252a:	b087      	sub	sp, #28
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002538:	d10c      	bne.n	8002554 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800253a:	4b24      	ldr	r3, [pc, #144]	@ (80025cc <HAL_TIM_Base_MspInit+0xa4>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	4a23      	ldr	r2, [pc, #140]	@ (80025cc <HAL_TIM_Base_MspInit+0xa4>)
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	6413      	str	r3, [r2, #64]	@ 0x40
 8002546:	4b21      	ldr	r3, [pc, #132]	@ (80025cc <HAL_TIM_Base_MspInit+0xa4>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002552:	e034      	b.n	80025be <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM3)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a1d      	ldr	r2, [pc, #116]	@ (80025d0 <HAL_TIM_Base_MspInit+0xa8>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d10c      	bne.n	8002578 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800255e:	4b1b      	ldr	r3, [pc, #108]	@ (80025cc <HAL_TIM_Base_MspInit+0xa4>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	4a1a      	ldr	r2, [pc, #104]	@ (80025cc <HAL_TIM_Base_MspInit+0xa4>)
 8002564:	f043 0302 	orr.w	r3, r3, #2
 8002568:	6413      	str	r3, [r2, #64]	@ 0x40
 800256a:	4b18      	ldr	r3, [pc, #96]	@ (80025cc <HAL_TIM_Base_MspInit+0xa4>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	693b      	ldr	r3, [r7, #16]
}
 8002576:	e022      	b.n	80025be <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM4)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a15      	ldr	r2, [pc, #84]	@ (80025d4 <HAL_TIM_Base_MspInit+0xac>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d10c      	bne.n	800259c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002582:	4b12      	ldr	r3, [pc, #72]	@ (80025cc <HAL_TIM_Base_MspInit+0xa4>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002586:	4a11      	ldr	r2, [pc, #68]	@ (80025cc <HAL_TIM_Base_MspInit+0xa4>)
 8002588:	f043 0304 	orr.w	r3, r3, #4
 800258c:	6413      	str	r3, [r2, #64]	@ 0x40
 800258e:	4b0f      	ldr	r3, [pc, #60]	@ (80025cc <HAL_TIM_Base_MspInit+0xa4>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]
}
 800259a:	e010      	b.n	80025be <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM5)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a0d      	ldr	r2, [pc, #52]	@ (80025d8 <HAL_TIM_Base_MspInit+0xb0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d10b      	bne.n	80025be <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80025a6:	4b09      	ldr	r3, [pc, #36]	@ (80025cc <HAL_TIM_Base_MspInit+0xa4>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	4a08      	ldr	r2, [pc, #32]	@ (80025cc <HAL_TIM_Base_MspInit+0xa4>)
 80025ac:	f043 0308 	orr.w	r3, r3, #8
 80025b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025b2:	4b06      	ldr	r3, [pc, #24]	@ (80025cc <HAL_TIM_Base_MspInit+0xa4>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
}
 80025be:	bf00      	nop
 80025c0:	371c      	adds	r7, #28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40000400 	.word	0x40000400
 80025d4:	40000800 	.word	0x40000800
 80025d8:	40000c00 	.word	0x40000c00

080025dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e4:	f107 030c 	add.w	r3, r7, #12
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025fc:	d11b      	bne.n	8002636 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fe:	4b10      	ldr	r3, [pc, #64]	@ (8002640 <HAL_TIM_MspPostInit+0x64>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	4a0f      	ldr	r2, [pc, #60]	@ (8002640 <HAL_TIM_MspPostInit+0x64>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6313      	str	r3, [r2, #48]	@ 0x30
 800260a:	4b0d      	ldr	r3, [pc, #52]	@ (8002640 <HAL_TIM_MspPostInit+0x64>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002616:	2307      	movs	r3, #7
 8002618:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261a:	2302      	movs	r3, #2
 800261c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002626:	2301      	movs	r3, #1
 8002628:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262a:	f107 030c 	add.w	r3, r7, #12
 800262e:	4619      	mov	r1, r3
 8002630:	4804      	ldr	r0, [pc, #16]	@ (8002644 <HAL_TIM_MspPostInit+0x68>)
 8002632:	f001 fbeb 	bl	8003e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002636:	bf00      	nop
 8002638:	3720      	adds	r7, #32
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800
 8002644:	40020000 	.word	0x40020000

08002648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002648:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002680 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 800264c:	f7ff fde0 	bl	8002210 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002650:	480c      	ldr	r0, [pc, #48]	@ (8002684 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002652:	490d      	ldr	r1, [pc, #52]	@ (8002688 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002654:	4a0d      	ldr	r2, [pc, #52]	@ (800268c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002658:	e002      	b.n	8002660 <LoopCopyDataInit>

0800265a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800265a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800265c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800265e:	3304      	adds	r3, #4

08002660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002664:	d3f9      	bcc.n	800265a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002666:	4a0a      	ldr	r2, [pc, #40]	@ (8002690 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002668:	4c0a      	ldr	r4, [pc, #40]	@ (8002694 <LoopFillZerobss+0x22>)
  movs r3, #0
 800266a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800266c:	e001      	b.n	8002672 <LoopFillZerobss>

0800266e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800266e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002670:	3204      	adds	r2, #4

08002672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002674:	d3fb      	bcc.n	800266e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002676:	f003 fa8d 	bl	8005b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800267a:	f7fe fd7b 	bl	8001174 <main>
  bx  lr    
 800267e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002680:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002688:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800268c:	08005c14 	.word	0x08005c14
  ldr r2, =_sbss
 8002690:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002694:	20000268 	.word	0x20000268

08002698 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002698:	e7fe      	b.n	8002698 <ADC_IRQHandler>

0800269a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800269e:	2003      	movs	r0, #3
 80026a0:	f001 fb72 	bl	8003d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026a4:	200f      	movs	r0, #15
 80026a6:	f000 f805 	bl	80026b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026aa:	f7ff fd2d 	bl	8002108 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026bc:	4b12      	ldr	r3, [pc, #72]	@ (8002708 <HAL_InitTick+0x54>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4b12      	ldr	r3, [pc, #72]	@ (800270c <HAL_InitTick+0x58>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	4619      	mov	r1, r3
 80026c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d2:	4618      	mov	r0, r3
 80026d4:	f001 fb8d 	bl	8003df2 <HAL_SYSTICK_Config>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e00e      	b.n	8002700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b0f      	cmp	r3, #15
 80026e6:	d80a      	bhi.n	80026fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026e8:	2200      	movs	r2, #0
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	f04f 30ff 	mov.w	r0, #4294967295
 80026f0:	f001 fb55 	bl	8003d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026f4:	4a06      	ldr	r2, [pc, #24]	@ (8002710 <HAL_InitTick+0x5c>)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	e000      	b.n	8002700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
}
 8002700:	4618      	mov	r0, r3
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20000004 	.word	0x20000004
 800270c:	2000000c 	.word	0x2000000c
 8002710:	20000008 	.word	0x20000008

08002714 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002718:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <HAL_IncTick+0x20>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	4b06      	ldr	r3, [pc, #24]	@ (8002738 <HAL_IncTick+0x24>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4413      	add	r3, r2
 8002724:	4a04      	ldr	r2, [pc, #16]	@ (8002738 <HAL_IncTick+0x24>)
 8002726:	6013      	str	r3, [r2, #0]
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	2000000c 	.word	0x2000000c
 8002738:	20000264 	.word	0x20000264

0800273c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return uwTick;
 8002740:	4b03      	ldr	r3, [pc, #12]	@ (8002750 <HAL_GetTick+0x14>)
 8002742:	681b      	ldr	r3, [r3, #0]
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	20000264 	.word	0x20000264

08002754 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800275c:	2300      	movs	r3, #0
 800275e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e031      	b.n	80027ce <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276e:	2b00      	cmp	r3, #0
 8002770:	d109      	bne.n	8002786 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7fe fb3c 	bl	8000df0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278a:	f003 0310 	and.w	r3, r3, #16
 800278e:	2b00      	cmp	r3, #0
 8002790:	d116      	bne.n	80027c0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002796:	4b10      	ldr	r3, [pc, #64]	@ (80027d8 <HAL_ADC_Init+0x84>)
 8002798:	4013      	ands	r3, r2
 800279a:	f043 0202 	orr.w	r2, r3, #2
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fad6 	bl	8002d54 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b2:	f023 0303 	bic.w	r3, r3, #3
 80027b6:	f043 0201 	orr.w	r2, r3, #1
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80027be:	e001      	b.n	80027c4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	ffffeefd 	.word	0xffffeefd

080027dc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_ADC_Start+0x1a>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e0ad      	b.n	8002952 <HAL_ADC_Start+0x176>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b01      	cmp	r3, #1
 800280a:	d018      	beq.n	800283e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0201 	orr.w	r2, r2, #1
 800281a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800281c:	4b50      	ldr	r3, [pc, #320]	@ (8002960 <HAL_ADC_Start+0x184>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a50      	ldr	r2, [pc, #320]	@ (8002964 <HAL_ADC_Start+0x188>)
 8002822:	fba2 2303 	umull	r2, r3, r2, r3
 8002826:	0c9a      	lsrs	r2, r3, #18
 8002828:	4613      	mov	r3, r2
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	4413      	add	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002830:	e002      	b.n	8002838 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	3b01      	subs	r3, #1
 8002836:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f9      	bne.n	8002832 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b01      	cmp	r3, #1
 800284a:	d175      	bne.n	8002938 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002850:	4b45      	ldr	r3, [pc, #276]	@ (8002968 <HAL_ADC_Start+0x18c>)
 8002852:	4013      	ands	r3, r2
 8002854:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002866:	2b00      	cmp	r3, #0
 8002868:	d007      	beq.n	800287a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002872:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002882:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002886:	d106      	bne.n	8002896 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288c:	f023 0206 	bic.w	r2, r3, #6
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	645a      	str	r2, [r3, #68]	@ 0x44
 8002894:	e002      	b.n	800289c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80028ac:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80028ae:	4b2f      	ldr	r3, [pc, #188]	@ (800296c <HAL_ADC_Start+0x190>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 031f 	and.w	r3, r3, #31
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10f      	bne.n	80028da <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d143      	bne.n	8002950 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	e03a      	b.n	8002950 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a24      	ldr	r2, [pc, #144]	@ (8002970 <HAL_ADC_Start+0x194>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d10e      	bne.n	8002902 <HAL_ADC_Start+0x126>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d107      	bne.n	8002902 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002900:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002902:	4b1a      	ldr	r3, [pc, #104]	@ (800296c <HAL_ADC_Start+0x190>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 0310 	and.w	r3, r3, #16
 800290a:	2b00      	cmp	r3, #0
 800290c:	d120      	bne.n	8002950 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a18      	ldr	r2, [pc, #96]	@ (8002974 <HAL_ADC_Start+0x198>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d11b      	bne.n	8002950 <HAL_ADC_Start+0x174>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d114      	bne.n	8002950 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002934:	609a      	str	r2, [r3, #8]
 8002936:	e00b      	b.n	8002950 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293c:	f043 0210 	orr.w	r2, r3, #16
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002948:	f043 0201 	orr.w	r2, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	20000004 	.word	0x20000004
 8002964:	431bde83 	.word	0x431bde83
 8002968:	fffff8fe 	.word	0xfffff8fe
 800296c:	40012300 	.word	0x40012300
 8002970:	40012000 	.word	0x40012000
 8002974:	40012200 	.word	0x40012200

08002978 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002990:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002994:	d113      	bne.n	80029be <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80029a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029a4:	d10b      	bne.n	80029be <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	f043 0220 	orr.w	r2, r3, #32
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e063      	b.n	8002a86 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80029be:	f7ff febd 	bl	800273c <HAL_GetTick>
 80029c2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029c4:	e021      	b.n	8002a0a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029cc:	d01d      	beq.n	8002a0a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d007      	beq.n	80029e4 <HAL_ADC_PollForConversion+0x6c>
 80029d4:	f7ff feb2 	bl	800273c <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d212      	bcs.n	8002a0a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d00b      	beq.n	8002a0a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	f043 0204 	orr.w	r2, r3, #4
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e03d      	b.n	8002a86 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d1d6      	bne.n	80029c6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f06f 0212 	mvn.w	r2, #18
 8002a20:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d123      	bne.n	8002a84 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d11f      	bne.n	8002a84 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d006      	beq.n	8002a60 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d111      	bne.n	8002a84 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d105      	bne.n	8002a84 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7c:	f043 0201 	orr.w	r2, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x1c>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e136      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x28a>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b09      	cmp	r3, #9
 8002ad2:	d93a      	bls.n	8002b4a <HAL_ADC_ConfigChannel+0xa2>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002adc:	d035      	beq.n	8002b4a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68d9      	ldr	r1, [r3, #12]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	461a      	mov	r2, r3
 8002aec:	4613      	mov	r3, r2
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	4413      	add	r3, r2
 8002af2:	3b1e      	subs	r3, #30
 8002af4:	2207      	movs	r2, #7
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43da      	mvns	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	400a      	ands	r2, r1
 8002b02:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a8d      	ldr	r2, [pc, #564]	@ (8002d40 <HAL_ADC_ConfigChannel+0x298>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d10a      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68d9      	ldr	r1, [r3, #12]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	061a      	lsls	r2, r3, #24
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b22:	e035      	b.n	8002b90 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68d9      	ldr	r1, [r3, #12]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	4618      	mov	r0, r3
 8002b36:	4603      	mov	r3, r0
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	4403      	add	r3, r0
 8002b3c:	3b1e      	subs	r3, #30
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b48:	e022      	b.n	8002b90 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6919      	ldr	r1, [r3, #16]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	461a      	mov	r2, r3
 8002b58:	4613      	mov	r3, r2
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	4413      	add	r3, r2
 8002b5e:	2207      	movs	r2, #7
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43da      	mvns	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	400a      	ands	r2, r1
 8002b6c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6919      	ldr	r1, [r3, #16]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	4618      	mov	r0, r3
 8002b80:	4603      	mov	r3, r0
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	4403      	add	r3, r0
 8002b86:	409a      	lsls	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b06      	cmp	r3, #6
 8002b96:	d824      	bhi.n	8002be2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3b05      	subs	r3, #5
 8002baa:	221f      	movs	r2, #31
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43da      	mvns	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	400a      	ands	r2, r1
 8002bb8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3b05      	subs	r3, #5
 8002bd4:	fa00 f203 	lsl.w	r2, r0, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	635a      	str	r2, [r3, #52]	@ 0x34
 8002be0:	e04c      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b0c      	cmp	r3, #12
 8002be8:	d824      	bhi.n	8002c34 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3b23      	subs	r3, #35	@ 0x23
 8002bfc:	221f      	movs	r2, #31
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43da      	mvns	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	400a      	ands	r2, r1
 8002c0a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	4618      	mov	r0, r3
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	3b23      	subs	r3, #35	@ 0x23
 8002c26:	fa00 f203 	lsl.w	r2, r0, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c32:	e023      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	3b41      	subs	r3, #65	@ 0x41
 8002c46:	221f      	movs	r2, #31
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43da      	mvns	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	400a      	ands	r2, r1
 8002c54:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	4618      	mov	r0, r3
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3b41      	subs	r3, #65	@ 0x41
 8002c70:	fa00 f203 	lsl.w	r2, r0, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a30      	ldr	r2, [pc, #192]	@ (8002d44 <HAL_ADC_ConfigChannel+0x29c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d10a      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x1f4>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c8e:	d105      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002c90:	4b2d      	ldr	r3, [pc, #180]	@ (8002d48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	4a2c      	ldr	r2, [pc, #176]	@ (8002d48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c96:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002c9a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a28      	ldr	r2, [pc, #160]	@ (8002d44 <HAL_ADC_ConfigChannel+0x29c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d10f      	bne.n	8002cc6 <HAL_ADC_ConfigChannel+0x21e>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2b12      	cmp	r3, #18
 8002cac:	d10b      	bne.n	8002cc6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002cae:	4b26      	ldr	r3, [pc, #152]	@ (8002d48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	4a25      	ldr	r2, [pc, #148]	@ (8002d48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002cb4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002cb8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002cba:	4b23      	ldr	r3, [pc, #140]	@ (8002d48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4a22      	ldr	r2, [pc, #136]	@ (8002d48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002cc0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002cc4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a1e      	ldr	r2, [pc, #120]	@ (8002d44 <HAL_ADC_ConfigChannel+0x29c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d12b      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x280>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a1a      	ldr	r2, [pc, #104]	@ (8002d40 <HAL_ADC_ConfigChannel+0x298>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d003      	beq.n	8002ce2 <HAL_ADC_ConfigChannel+0x23a>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2b11      	cmp	r3, #17
 8002ce0:	d122      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002ce2:	4b19      	ldr	r3, [pc, #100]	@ (8002d48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	4a18      	ldr	r2, [pc, #96]	@ (8002d48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ce8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002cec:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002cee:	4b16      	ldr	r3, [pc, #88]	@ (8002d48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4a15      	ldr	r2, [pc, #84]	@ (8002d48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002cf4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002cf8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a10      	ldr	r2, [pc, #64]	@ (8002d40 <HAL_ADC_ConfigChannel+0x298>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d111      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002d04:	4b11      	ldr	r3, [pc, #68]	@ (8002d4c <HAL_ADC_ConfigChannel+0x2a4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a11      	ldr	r2, [pc, #68]	@ (8002d50 <HAL_ADC_ConfigChannel+0x2a8>)
 8002d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0e:	0c9a      	lsrs	r2, r3, #18
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002d1a:	e002      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1f9      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	10000012 	.word	0x10000012
 8002d44:	40012000 	.word	0x40012000
 8002d48:	40012300 	.word	0x40012300
 8002d4c:	20000004 	.word	0x20000004
 8002d50:	431bde83 	.word	0x431bde83

08002d54 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002d5c:	4b78      	ldr	r3, [pc, #480]	@ (8002f40 <ADC_Init+0x1ec>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	4a77      	ldr	r2, [pc, #476]	@ (8002f40 <ADC_Init+0x1ec>)
 8002d62:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002d66:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002d68:	4b75      	ldr	r3, [pc, #468]	@ (8002f40 <ADC_Init+0x1ec>)
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	4973      	ldr	r1, [pc, #460]	@ (8002f40 <ADC_Init+0x1ec>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6859      	ldr	r1, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	021a      	lsls	r2, r3, #8
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002da8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6859      	ldr	r1, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6899      	ldr	r1, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de2:	4a58      	ldr	r2, [pc, #352]	@ (8002f44 <ADC_Init+0x1f0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d022      	beq.n	8002e2e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002df6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6899      	ldr	r1, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002e18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6899      	ldr	r1, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	e00f      	b.n	8002e4e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002e4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0202 	bic.w	r2, r2, #2
 8002e5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6899      	ldr	r1, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	005a      	lsls	r2, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d01b      	beq.n	8002eb4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002e9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6859      	ldr	r1, [r3, #4]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	035a      	lsls	r2, r3, #13
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	e007      	b.n	8002ec4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ec2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002ed2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	051a      	lsls	r2, r3, #20
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ef8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6899      	ldr	r1, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f06:	025a      	lsls	r2, r3, #9
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6899      	ldr	r1, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	029a      	lsls	r2, r3, #10
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	609a      	str	r2, [r3, #8]
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	40012300 	.word	0x40012300
 8002f44:	0f000001 	.word	0x0f000001

08002f48 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e0ed      	b.n	8003136 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d102      	bne.n	8002f6c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7fd ffb8 	bl	8000edc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f7c:	f7ff fbde 	bl	800273c <HAL_GetTick>
 8002f80:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f82:	e012      	b.n	8002faa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f84:	f7ff fbda 	bl	800273c <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b0a      	cmp	r3, #10
 8002f90:	d90b      	bls.n	8002faa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2205      	movs	r2, #5
 8002fa2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e0c5      	b.n	8003136 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0e5      	beq.n	8002f84 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0202 	bic.w	r2, r2, #2
 8002fc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fc8:	f7ff fbb8 	bl	800273c <HAL_GetTick>
 8002fcc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002fce:	e012      	b.n	8002ff6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002fd0:	f7ff fbb4 	bl	800273c <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b0a      	cmp	r3, #10
 8002fdc:	d90b      	bls.n	8002ff6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2205      	movs	r2, #5
 8002fee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e09f      	b.n	8003136 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1e5      	bne.n	8002fd0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	7e1b      	ldrb	r3, [r3, #24]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d108      	bne.n	800301e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	e007      	b.n	800302e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800302c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	7e5b      	ldrb	r3, [r3, #25]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d108      	bne.n	8003048 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	e007      	b.n	8003058 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003056:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	7e9b      	ldrb	r3, [r3, #26]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d108      	bne.n	8003072 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0220 	orr.w	r2, r2, #32
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	e007      	b.n	8003082 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0220 	bic.w	r2, r2, #32
 8003080:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	7edb      	ldrb	r3, [r3, #27]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d108      	bne.n	800309c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0210 	bic.w	r2, r2, #16
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	e007      	b.n	80030ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0210 	orr.w	r2, r2, #16
 80030aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	7f1b      	ldrb	r3, [r3, #28]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d108      	bne.n	80030c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0208 	orr.w	r2, r2, #8
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	e007      	b.n	80030d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0208 	bic.w	r2, r2, #8
 80030d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	7f5b      	ldrb	r3, [r3, #29]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d108      	bne.n	80030f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0204 	orr.w	r2, r2, #4
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	e007      	b.n	8003100 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0204 	bic.w	r2, r2, #4
 80030fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	ea42 0103 	orr.w	r1, r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	1e5a      	subs	r2, r3, #1
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800313e:	b480      	push	{r7}
 8003140:	b087      	sub	sp, #28
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003154:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003156:	7cfb      	ldrb	r3, [r7, #19]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d003      	beq.n	8003164 <HAL_CAN_ConfigFilter+0x26>
 800315c:	7cfb      	ldrb	r3, [r7, #19]
 800315e:	2b02      	cmp	r3, #2
 8003160:	f040 80aa 	bne.w	80032b8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800316a:	f043 0201 	orr.w	r2, r3, #1
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	f003 031f 	and.w	r3, r3, #31
 800317c:	2201      	movs	r2, #1
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	43db      	mvns	r3, r3
 800318e:	401a      	ands	r2, r3
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d123      	bne.n	80031e6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	43db      	mvns	r3, r3
 80031a8:	401a      	ands	r2, r3
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80031c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	3248      	adds	r2, #72	@ 0x48
 80031c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031dc:	6979      	ldr	r1, [r7, #20]
 80031de:	3348      	adds	r3, #72	@ 0x48
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	440b      	add	r3, r1
 80031e4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d122      	bne.n	8003234 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	431a      	orrs	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800320e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	3248      	adds	r2, #72	@ 0x48
 8003214:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003228:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800322a:	6979      	ldr	r1, [r7, #20]
 800322c:	3348      	adds	r3, #72	@ 0x48
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	440b      	add	r3, r1
 8003232:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d109      	bne.n	8003250 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	43db      	mvns	r3, r3
 8003246:	401a      	ands	r2, r3
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800324e:	e007      	b.n	8003260 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	431a      	orrs	r2, r3
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d109      	bne.n	800327c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	43db      	mvns	r3, r3
 8003272:	401a      	ands	r2, r3
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800327a:	e007      	b.n	800328c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	431a      	orrs	r2, r3
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d107      	bne.n	80032a4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	431a      	orrs	r2, r3
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80032aa:	f023 0201 	bic.w	r2, r3, #1
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	e006      	b.n	80032c6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032bc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
  }
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	371c      	adds	r7, #28
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d12e      	bne.n	8003344 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2202      	movs	r2, #2
 80032ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0201 	bic.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032fe:	f7ff fa1d 	bl	800273c <HAL_GetTick>
 8003302:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003304:	e012      	b.n	800332c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003306:	f7ff fa19 	bl	800273c <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b0a      	cmp	r3, #10
 8003312:	d90b      	bls.n	800332c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003318:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2205      	movs	r2, #5
 8003324:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e012      	b.n	8003352 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1e5      	bne.n	8003306 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003340:	2300      	movs	r3, #0
 8003342:	e006      	b.n	8003352 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003348:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
  }
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800335a:	b480      	push	{r7}
 800335c:	b089      	sub	sp, #36	@ 0x24
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800336e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003378:	7ffb      	ldrb	r3, [r7, #31]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d003      	beq.n	8003386 <HAL_CAN_AddTxMessage+0x2c>
 800337e:	7ffb      	ldrb	r3, [r7, #31]
 8003380:	2b02      	cmp	r3, #2
 8003382:	f040 80ad 	bne.w	80034e0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10a      	bne.n	80033a6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003396:	2b00      	cmp	r3, #0
 8003398:	d105      	bne.n	80033a6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 8095 	beq.w	80034d0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	0e1b      	lsrs	r3, r3, #24
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80033b0:	2201      	movs	r2, #1
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	409a      	lsls	r2, r3
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10d      	bne.n	80033de <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80033cc:	68f9      	ldr	r1, [r7, #12]
 80033ce:	6809      	ldr	r1, [r1, #0]
 80033d0:	431a      	orrs	r2, r3
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	3318      	adds	r3, #24
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	440b      	add	r3, r1
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	e00f      	b.n	80033fe <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033e8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033ee:	68f9      	ldr	r1, [r7, #12]
 80033f0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80033f2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	3318      	adds	r3, #24
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	440b      	add	r3, r1
 80033fc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6819      	ldr	r1, [r3, #0]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	691a      	ldr	r2, [r3, #16]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	3318      	adds	r3, #24
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	440b      	add	r3, r1
 800340e:	3304      	adds	r3, #4
 8003410:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	7d1b      	ldrb	r3, [r3, #20]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d111      	bne.n	800343e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	3318      	adds	r3, #24
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	4413      	add	r3, r2
 8003426:	3304      	adds	r3, #4
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	6811      	ldr	r1, [r2, #0]
 800342e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	3318      	adds	r3, #24
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	440b      	add	r3, r1
 800343a:	3304      	adds	r3, #4
 800343c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3307      	adds	r3, #7
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	061a      	lsls	r2, r3, #24
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3306      	adds	r3, #6
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	041b      	lsls	r3, r3, #16
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3305      	adds	r3, #5
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	021b      	lsls	r3, r3, #8
 8003458:	4313      	orrs	r3, r2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	3204      	adds	r2, #4
 800345e:	7812      	ldrb	r2, [r2, #0]
 8003460:	4610      	mov	r0, r2
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	6811      	ldr	r1, [r2, #0]
 8003466:	ea43 0200 	orr.w	r2, r3, r0
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	440b      	add	r3, r1
 8003470:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003474:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	3303      	adds	r3, #3
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	061a      	lsls	r2, r3, #24
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3302      	adds	r3, #2
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	041b      	lsls	r3, r3, #16
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3301      	adds	r3, #1
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	021b      	lsls	r3, r3, #8
 8003490:	4313      	orrs	r3, r2
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	7812      	ldrb	r2, [r2, #0]
 8003496:	4610      	mov	r0, r2
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	6811      	ldr	r1, [r2, #0]
 800349c:	ea43 0200 	orr.w	r2, r3, r0
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	440b      	add	r3, r1
 80034a6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80034aa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	3318      	adds	r3, #24
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	4413      	add	r3, r2
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	6811      	ldr	r1, [r2, #0]
 80034be:	f043 0201 	orr.w	r2, r3, #1
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	3318      	adds	r3, #24
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	440b      	add	r3, r1
 80034ca:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80034cc:	2300      	movs	r3, #0
 80034ce:	e00e      	b.n	80034ee <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e006      	b.n	80034ee <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
  }
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3724      	adds	r7, #36	@ 0x24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80034fa:	b480      	push	{r7}
 80034fc:	b087      	sub	sp, #28
 80034fe:	af00      	add	r7, sp, #0
 8003500:	60f8      	str	r0, [r7, #12]
 8003502:	60b9      	str	r1, [r7, #8]
 8003504:	607a      	str	r2, [r7, #4]
 8003506:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800350e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003510:	7dfb      	ldrb	r3, [r7, #23]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d003      	beq.n	800351e <HAL_CAN_GetRxMessage+0x24>
 8003516:	7dfb      	ldrb	r3, [r7, #23]
 8003518:	2b02      	cmp	r3, #2
 800351a:	f040 8103 	bne.w	8003724 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10e      	bne.n	8003542 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d116      	bne.n	8003560 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003536:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e0f7      	b.n	8003732 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	f003 0303 	and.w	r3, r3, #3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d107      	bne.n	8003560 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003554:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e0e8      	b.n	8003732 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	331b      	adds	r3, #27
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	4413      	add	r3, r2
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0204 	and.w	r2, r3, #4
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10c      	bne.n	8003598 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	331b      	adds	r3, #27
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	4413      	add	r3, r2
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	0d5b      	lsrs	r3, r3, #21
 800358e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	e00b      	b.n	80035b0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	331b      	adds	r3, #27
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	4413      	add	r3, r2
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	08db      	lsrs	r3, r3, #3
 80035a8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	331b      	adds	r3, #27
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	4413      	add	r3, r2
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0202 	and.w	r2, r3, #2
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	331b      	adds	r3, #27
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	4413      	add	r3, r2
 80035d2:	3304      	adds	r3, #4
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2208      	movs	r2, #8
 80035e2:	611a      	str	r2, [r3, #16]
 80035e4:	e00b      	b.n	80035fe <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	331b      	adds	r3, #27
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	4413      	add	r3, r2
 80035f2:	3304      	adds	r3, #4
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 020f 	and.w	r2, r3, #15
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	331b      	adds	r3, #27
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	4413      	add	r3, r2
 800360a:	3304      	adds	r3, #4
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	0a1b      	lsrs	r3, r3, #8
 8003610:	b2da      	uxtb	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	331b      	adds	r3, #27
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	4413      	add	r3, r2
 8003622:	3304      	adds	r3, #4
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	0c1b      	lsrs	r3, r3, #16
 8003628:	b29a      	uxth	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	4413      	add	r3, r2
 8003638:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	b2da      	uxtb	r2, r3
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	4413      	add	r3, r2
 800364e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	0a1a      	lsrs	r2, r3, #8
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	3301      	adds	r3, #1
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	4413      	add	r3, r2
 8003668:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	0c1a      	lsrs	r2, r3, #16
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	3302      	adds	r3, #2
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	4413      	add	r3, r2
 8003682:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	0e1a      	lsrs	r2, r3, #24
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	3303      	adds	r3, #3
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	4413      	add	r3, r2
 800369c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	3304      	adds	r3, #4
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	0a1a      	lsrs	r2, r3, #8
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	3305      	adds	r3, #5
 80036c0:	b2d2      	uxtb	r2, r2
 80036c2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	0c1a      	lsrs	r2, r3, #16
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	3306      	adds	r3, #6
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	0e1a      	lsrs	r2, r3, #24
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	3307      	adds	r3, #7
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d108      	bne.n	8003710 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 0220 	orr.w	r2, r2, #32
 800370c:	60da      	str	r2, [r3, #12]
 800370e:	e007      	b.n	8003720 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691a      	ldr	r2, [r3, #16]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0220 	orr.w	r2, r2, #32
 800371e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	e006      	b.n	8003732 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003728:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
  }
}
 8003732:	4618      	mov	r0, r3
 8003734:	371c      	adds	r7, #28
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800373e:	b480      	push	{r7}
 8003740:	b085      	sub	sp, #20
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800374e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003750:	7bfb      	ldrb	r3, [r7, #15]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d002      	beq.n	800375c <HAL_CAN_ActivateNotification+0x1e>
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	2b02      	cmp	r3, #2
 800375a:	d109      	bne.n	8003770 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6959      	ldr	r1, [r3, #20]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	e006      	b.n	800377e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003774:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
  }
}
 800377e:	4618      	mov	r0, r3
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b08a      	sub	sp, #40	@ 0x28
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003792:	2300      	movs	r3, #0
 8003794:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d07c      	beq.n	80038ca <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d023      	beq.n	8003822 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2201      	movs	r2, #1
 80037e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f983 	bl	8003af8 <HAL_CAN_TxMailbox0CompleteCallback>
 80037f2:	e016      	b.n	8003822 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d004      	beq.n	8003808 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80037fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003800:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003804:	627b      	str	r3, [r7, #36]	@ 0x24
 8003806:	e00c      	b.n	8003822 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d004      	beq.n	800381c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003814:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003818:	627b      	str	r3, [r7, #36]	@ 0x24
 800381a:	e002      	b.n	8003822 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f989 	bl	8003b34 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d024      	beq.n	8003876 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003834:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f963 	bl	8003b0c <HAL_CAN_TxMailbox1CompleteCallback>
 8003846:	e016      	b.n	8003876 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800384e:	2b00      	cmp	r3, #0
 8003850:	d004      	beq.n	800385c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003854:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003858:	627b      	str	r3, [r7, #36]	@ 0x24
 800385a:	e00c      	b.n	8003876 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003862:	2b00      	cmp	r3, #0
 8003864:	d004      	beq.n	8003870 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003868:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800386c:	627b      	str	r3, [r7, #36]	@ 0x24
 800386e:	e002      	b.n	8003876 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f969 	bl	8003b48 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d024      	beq.n	80038ca <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003888:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f943 	bl	8003b20 <HAL_CAN_TxMailbox2CompleteCallback>
 800389a:	e016      	b.n	80038ca <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d004      	beq.n	80038b0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80038a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ae:	e00c      	b.n	80038ca <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d004      	beq.n	80038c4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80038ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80038c2:	e002      	b.n	80038ca <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f949 	bl	8003b5c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00c      	beq.n	80038ee <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f003 0310 	and.w	r3, r3, #16
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d007      	beq.n	80038ee <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80038de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038e4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2210      	movs	r2, #16
 80038ec:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00b      	beq.n	8003910 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d006      	beq.n	8003910 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2208      	movs	r2, #8
 8003908:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f930 	bl	8003b70 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d009      	beq.n	800392e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7fd fc0b 	bl	8001144 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00c      	beq.n	8003952 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f003 0310 	and.w	r3, r3, #16
 800393e:	2b00      	cmp	r3, #0
 8003940:	d007      	beq.n	8003952 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003944:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003948:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2210      	movs	r2, #16
 8003950:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	f003 0320 	and.w	r3, r3, #32
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00b      	beq.n	8003974 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d006      	beq.n	8003974 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2208      	movs	r2, #8
 800396c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f912 	bl	8003b98 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	f003 0310 	and.w	r3, r3, #16
 800397a:	2b00      	cmp	r3, #0
 800397c:	d009      	beq.n	8003992 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	f003 0303 	and.w	r3, r3, #3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f8f9 	bl	8003b84 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00b      	beq.n	80039b4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f003 0310 	and.w	r3, r3, #16
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d006      	beq.n	80039b4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2210      	movs	r2, #16
 80039ac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f8fc 	bl	8003bac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00b      	beq.n	80039d6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d006      	beq.n	80039d6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2208      	movs	r2, #8
 80039ce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f8f5 	bl	8003bc0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d07b      	beq.n	8003ad8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d072      	beq.n	8003ad0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d008      	beq.n	8003a06 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80039fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a00:	f043 0301 	orr.w	r3, r3, #1
 8003a04:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1c:	f043 0302 	orr.w	r3, r3, #2
 8003a20:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d008      	beq.n	8003a3e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a38:	f043 0304 	orr.w	r3, r3, #4
 8003a3c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d043      	beq.n	8003ad0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d03e      	beq.n	8003ad0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a58:	2b60      	cmp	r3, #96	@ 0x60
 8003a5a:	d02b      	beq.n	8003ab4 <HAL_CAN_IRQHandler+0x32a>
 8003a5c:	2b60      	cmp	r3, #96	@ 0x60
 8003a5e:	d82e      	bhi.n	8003abe <HAL_CAN_IRQHandler+0x334>
 8003a60:	2b50      	cmp	r3, #80	@ 0x50
 8003a62:	d022      	beq.n	8003aaa <HAL_CAN_IRQHandler+0x320>
 8003a64:	2b50      	cmp	r3, #80	@ 0x50
 8003a66:	d82a      	bhi.n	8003abe <HAL_CAN_IRQHandler+0x334>
 8003a68:	2b40      	cmp	r3, #64	@ 0x40
 8003a6a:	d019      	beq.n	8003aa0 <HAL_CAN_IRQHandler+0x316>
 8003a6c:	2b40      	cmp	r3, #64	@ 0x40
 8003a6e:	d826      	bhi.n	8003abe <HAL_CAN_IRQHandler+0x334>
 8003a70:	2b30      	cmp	r3, #48	@ 0x30
 8003a72:	d010      	beq.n	8003a96 <HAL_CAN_IRQHandler+0x30c>
 8003a74:	2b30      	cmp	r3, #48	@ 0x30
 8003a76:	d822      	bhi.n	8003abe <HAL_CAN_IRQHandler+0x334>
 8003a78:	2b10      	cmp	r3, #16
 8003a7a:	d002      	beq.n	8003a82 <HAL_CAN_IRQHandler+0x2f8>
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	d005      	beq.n	8003a8c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003a80:	e01d      	b.n	8003abe <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a84:	f043 0308 	orr.w	r3, r3, #8
 8003a88:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003a8a:	e019      	b.n	8003ac0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8e:	f043 0310 	orr.w	r3, r3, #16
 8003a92:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003a94:	e014      	b.n	8003ac0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a98:	f043 0320 	orr.w	r3, r3, #32
 8003a9c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003a9e:	e00f      	b.n	8003ac0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003aa6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003aa8:	e00a      	b.n	8003ac0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ab0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ab2:	e005      	b.n	8003ac0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aba:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003abc:	e000      	b.n	8003ac0 <HAL_CAN_IRQHandler+0x336>
            break;
 8003abe:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699a      	ldr	r2, [r3, #24]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003ace:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2204      	movs	r2, #4
 8003ad6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d008      	beq.n	8003af0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f872 	bl	8003bd4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003af0:	bf00      	nop
 8003af2:	3728      	adds	r7, #40	@ 0x28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c28 <__NVIC_SetPriorityGrouping+0x40>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c04:	4013      	ands	r3, r2
 8003c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c10:	4b06      	ldr	r3, [pc, #24]	@ (8003c2c <__NVIC_SetPriorityGrouping+0x44>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c16:	4a04      	ldr	r2, [pc, #16]	@ (8003c28 <__NVIC_SetPriorityGrouping+0x40>)
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	60d3      	str	r3, [r2, #12]
}
 8003c1c:	bf00      	nop
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	e000ed00 	.word	0xe000ed00
 8003c2c:	05fa0000 	.word	0x05fa0000

08003c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c34:	4b04      	ldr	r3, [pc, #16]	@ (8003c48 <__NVIC_GetPriorityGrouping+0x18>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	0a1b      	lsrs	r3, r3, #8
 8003c3a:	f003 0307 	and.w	r3, r3, #7
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	e000ed00 	.word	0xe000ed00

08003c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	4603      	mov	r3, r0
 8003c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	db0b      	blt.n	8003c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	f003 021f 	and.w	r2, r3, #31
 8003c64:	4907      	ldr	r1, [pc, #28]	@ (8003c84 <__NVIC_EnableIRQ+0x38>)
 8003c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	e000e100 	.word	0xe000e100

08003c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	6039      	str	r1, [r7, #0]
 8003c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	db0a      	blt.n	8003cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	490c      	ldr	r1, [pc, #48]	@ (8003cd4 <__NVIC_SetPriority+0x4c>)
 8003ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca6:	0112      	lsls	r2, r2, #4
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	440b      	add	r3, r1
 8003cac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cb0:	e00a      	b.n	8003cc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	4908      	ldr	r1, [pc, #32]	@ (8003cd8 <__NVIC_SetPriority+0x50>)
 8003cb8:	79fb      	ldrb	r3, [r7, #7]
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	3b04      	subs	r3, #4
 8003cc0:	0112      	lsls	r2, r2, #4
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	761a      	strb	r2, [r3, #24]
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	e000e100 	.word	0xe000e100
 8003cd8:	e000ed00 	.word	0xe000ed00

08003cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b089      	sub	sp, #36	@ 0x24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f1c3 0307 	rsb	r3, r3, #7
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	bf28      	it	cs
 8003cfa:	2304      	movcs	r3, #4
 8003cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	3304      	adds	r3, #4
 8003d02:	2b06      	cmp	r3, #6
 8003d04:	d902      	bls.n	8003d0c <NVIC_EncodePriority+0x30>
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	3b03      	subs	r3, #3
 8003d0a:	e000      	b.n	8003d0e <NVIC_EncodePriority+0x32>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d10:	f04f 32ff 	mov.w	r2, #4294967295
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	43da      	mvns	r2, r3
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	401a      	ands	r2, r3
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d24:	f04f 31ff 	mov.w	r1, #4294967295
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2e:	43d9      	mvns	r1, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d34:	4313      	orrs	r3, r2
         );
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3724      	adds	r7, #36	@ 0x24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
	...

08003d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d54:	d301      	bcc.n	8003d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d56:	2301      	movs	r3, #1
 8003d58:	e00f      	b.n	8003d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d84 <SysTick_Config+0x40>)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d62:	210f      	movs	r1, #15
 8003d64:	f04f 30ff 	mov.w	r0, #4294967295
 8003d68:	f7ff ff8e 	bl	8003c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d6c:	4b05      	ldr	r3, [pc, #20]	@ (8003d84 <SysTick_Config+0x40>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d72:	4b04      	ldr	r3, [pc, #16]	@ (8003d84 <SysTick_Config+0x40>)
 8003d74:	2207      	movs	r2, #7
 8003d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	e000e010 	.word	0xe000e010

08003d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff ff29 	bl	8003be8 <__NVIC_SetPriorityGrouping>
}
 8003d96:	bf00      	nop
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b086      	sub	sp, #24
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	4603      	mov	r3, r0
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	607a      	str	r2, [r7, #4]
 8003daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003db0:	f7ff ff3e 	bl	8003c30 <__NVIC_GetPriorityGrouping>
 8003db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	68b9      	ldr	r1, [r7, #8]
 8003dba:	6978      	ldr	r0, [r7, #20]
 8003dbc:	f7ff ff8e 	bl	8003cdc <NVIC_EncodePriority>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff ff5d 	bl	8003c88 <__NVIC_SetPriority>
}
 8003dce:	bf00      	nop
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b082      	sub	sp, #8
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	4603      	mov	r3, r0
 8003dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff ff31 	bl	8003c4c <__NVIC_EnableIRQ>
}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b082      	sub	sp, #8
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff ffa2 	bl	8003d44 <SysTick_Config>
 8003e00:	4603      	mov	r3, r0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b089      	sub	sp, #36	@ 0x24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003e16:	2300      	movs	r3, #0
 8003e18:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003e22:	2300      	movs	r3, #0
 8003e24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003e26:	2300      	movs	r3, #0
 8003e28:	61fb      	str	r3, [r7, #28]
 8003e2a:	e169      	b.n	8004100 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	f040 8158 	bne.w	80040fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d005      	beq.n	8003e62 <HAL_GPIO_Init+0x56>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d130      	bne.n	8003ec4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	2203      	movs	r2, #3
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	43db      	mvns	r3, r3
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	4013      	ands	r3, r2
 8003e78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e98:	2201      	movs	r2, #1
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	091b      	lsrs	r3, r3, #4
 8003eae:	f003 0201 	and.w	r2, r3, #1
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f003 0303 	and.w	r3, r3, #3
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	d017      	beq.n	8003f00 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	2203      	movs	r2, #3
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f003 0303 	and.w	r3, r3, #3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d123      	bne.n	8003f54 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	08da      	lsrs	r2, r3, #3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3208      	adds	r2, #8
 8003f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	220f      	movs	r2, #15
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	691a      	ldr	r2, [r3, #16]
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	08da      	lsrs	r2, r3, #3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	3208      	adds	r2, #8
 8003f4e:	69b9      	ldr	r1, [r7, #24]
 8003f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	2203      	movs	r2, #3
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	43db      	mvns	r3, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f003 0203 	and.w	r2, r3, #3
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 80b2 	beq.w	80040fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f96:	4b60      	ldr	r3, [pc, #384]	@ (8004118 <HAL_GPIO_Init+0x30c>)
 8003f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9a:	4a5f      	ldr	r2, [pc, #380]	@ (8004118 <HAL_GPIO_Init+0x30c>)
 8003f9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fa2:	4b5d      	ldr	r3, [pc, #372]	@ (8004118 <HAL_GPIO_Init+0x30c>)
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003fae:	4a5b      	ldr	r2, [pc, #364]	@ (800411c <HAL_GPIO_Init+0x310>)
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	089b      	lsrs	r3, r3, #2
 8003fb4:	3302      	adds	r3, #2
 8003fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	220f      	movs	r2, #15
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	43db      	mvns	r3, r3
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a52      	ldr	r2, [pc, #328]	@ (8004120 <HAL_GPIO_Init+0x314>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d02b      	beq.n	8004032 <HAL_GPIO_Init+0x226>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a51      	ldr	r2, [pc, #324]	@ (8004124 <HAL_GPIO_Init+0x318>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d025      	beq.n	800402e <HAL_GPIO_Init+0x222>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a50      	ldr	r2, [pc, #320]	@ (8004128 <HAL_GPIO_Init+0x31c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d01f      	beq.n	800402a <HAL_GPIO_Init+0x21e>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a4f      	ldr	r2, [pc, #316]	@ (800412c <HAL_GPIO_Init+0x320>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d019      	beq.n	8004026 <HAL_GPIO_Init+0x21a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a4e      	ldr	r2, [pc, #312]	@ (8004130 <HAL_GPIO_Init+0x324>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d013      	beq.n	8004022 <HAL_GPIO_Init+0x216>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a4d      	ldr	r2, [pc, #308]	@ (8004134 <HAL_GPIO_Init+0x328>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d00d      	beq.n	800401e <HAL_GPIO_Init+0x212>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a4c      	ldr	r2, [pc, #304]	@ (8004138 <HAL_GPIO_Init+0x32c>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d007      	beq.n	800401a <HAL_GPIO_Init+0x20e>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a4b      	ldr	r2, [pc, #300]	@ (800413c <HAL_GPIO_Init+0x330>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d101      	bne.n	8004016 <HAL_GPIO_Init+0x20a>
 8004012:	2307      	movs	r3, #7
 8004014:	e00e      	b.n	8004034 <HAL_GPIO_Init+0x228>
 8004016:	2308      	movs	r3, #8
 8004018:	e00c      	b.n	8004034 <HAL_GPIO_Init+0x228>
 800401a:	2306      	movs	r3, #6
 800401c:	e00a      	b.n	8004034 <HAL_GPIO_Init+0x228>
 800401e:	2305      	movs	r3, #5
 8004020:	e008      	b.n	8004034 <HAL_GPIO_Init+0x228>
 8004022:	2304      	movs	r3, #4
 8004024:	e006      	b.n	8004034 <HAL_GPIO_Init+0x228>
 8004026:	2303      	movs	r3, #3
 8004028:	e004      	b.n	8004034 <HAL_GPIO_Init+0x228>
 800402a:	2302      	movs	r3, #2
 800402c:	e002      	b.n	8004034 <HAL_GPIO_Init+0x228>
 800402e:	2301      	movs	r3, #1
 8004030:	e000      	b.n	8004034 <HAL_GPIO_Init+0x228>
 8004032:	2300      	movs	r3, #0
 8004034:	69fa      	ldr	r2, [r7, #28]
 8004036:	f002 0203 	and.w	r2, r2, #3
 800403a:	0092      	lsls	r2, r2, #2
 800403c:	4093      	lsls	r3, r2
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	4313      	orrs	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004044:	4935      	ldr	r1, [pc, #212]	@ (800411c <HAL_GPIO_Init+0x310>)
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	089b      	lsrs	r3, r3, #2
 800404a:	3302      	adds	r3, #2
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004052:	4b3b      	ldr	r3, [pc, #236]	@ (8004140 <HAL_GPIO_Init+0x334>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	43db      	mvns	r3, r3
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	4013      	ands	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004076:	4a32      	ldr	r2, [pc, #200]	@ (8004140 <HAL_GPIO_Init+0x334>)
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800407c:	4b30      	ldr	r3, [pc, #192]	@ (8004140 <HAL_GPIO_Init+0x334>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	43db      	mvns	r3, r3
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	4013      	ands	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040a0:	4a27      	ldr	r2, [pc, #156]	@ (8004140 <HAL_GPIO_Init+0x334>)
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040a6:	4b26      	ldr	r3, [pc, #152]	@ (8004140 <HAL_GPIO_Init+0x334>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	43db      	mvns	r3, r3
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	4013      	ands	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040ca:	4a1d      	ldr	r2, [pc, #116]	@ (8004140 <HAL_GPIO_Init+0x334>)
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004140 <HAL_GPIO_Init+0x334>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	43db      	mvns	r3, r3
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	4013      	ands	r3, r2
 80040de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040f4:	4a12      	ldr	r2, [pc, #72]	@ (8004140 <HAL_GPIO_Init+0x334>)
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	3301      	adds	r3, #1
 80040fe:	61fb      	str	r3, [r7, #28]
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	2b0f      	cmp	r3, #15
 8004104:	f67f ae92 	bls.w	8003e2c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004108:	bf00      	nop
 800410a:	bf00      	nop
 800410c:	3724      	adds	r7, #36	@ 0x24
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40023800 	.word	0x40023800
 800411c:	40013800 	.word	0x40013800
 8004120:	40020000 	.word	0x40020000
 8004124:	40020400 	.word	0x40020400
 8004128:	40020800 	.word	0x40020800
 800412c:	40020c00 	.word	0x40020c00
 8004130:	40021000 	.word	0x40021000
 8004134:	40021400 	.word	0x40021400
 8004138:	40021800 	.word	0x40021800
 800413c:	40021c00 	.word	0x40021c00
 8004140:	40013c00 	.word	0x40013c00

08004144 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	887b      	ldrh	r3, [r7, #2]
 8004156:	4013      	ands	r3, r2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800415c:	2301      	movs	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
 8004160:	e001      	b.n	8004166 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004162:	2300      	movs	r3, #0
 8004164:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004166:	7bfb      	ldrb	r3, [r7, #15]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	807b      	strh	r3, [r7, #2]
 8004180:	4613      	mov	r3, r2
 8004182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004184:	787b      	ldrb	r3, [r7, #1]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800418a:	887a      	ldrh	r2, [r7, #2]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004190:	e003      	b.n	800419a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004192:	887b      	ldrh	r3, [r7, #2]
 8004194:	041a      	lsls	r2, r3, #16
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	619a      	str	r2, [r3, #24]
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
	...

080041a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80041b2:	4b08      	ldr	r3, [pc, #32]	@ (80041d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041b4:	695a      	ldr	r2, [r3, #20]
 80041b6:	88fb      	ldrh	r3, [r7, #6]
 80041b8:	4013      	ands	r3, r2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d006      	beq.n	80041cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041be:	4a05      	ldr	r2, [pc, #20]	@ (80041d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041c0:	88fb      	ldrh	r3, [r7, #6]
 80041c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041c4:	88fb      	ldrh	r3, [r7, #6]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fd feba 	bl	8001f40 <HAL_GPIO_EXTI_Callback>
  }
}
 80041cc:	bf00      	nop
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40013c00 	.word	0x40013c00

080041d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80041e0:	2300      	movs	r3, #0
 80041e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e291      	b.n	8004712 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 8087 	beq.w	800430a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041fc:	4b96      	ldr	r3, [pc, #600]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 030c 	and.w	r3, r3, #12
 8004204:	2b04      	cmp	r3, #4
 8004206:	d00c      	beq.n	8004222 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004208:	4b93      	ldr	r3, [pc, #588]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 030c 	and.w	r3, r3, #12
 8004210:	2b08      	cmp	r3, #8
 8004212:	d112      	bne.n	800423a <HAL_RCC_OscConfig+0x62>
 8004214:	4b90      	ldr	r3, [pc, #576]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800421c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004220:	d10b      	bne.n	800423a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004222:	4b8d      	ldr	r3, [pc, #564]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d06c      	beq.n	8004308 <HAL_RCC_OscConfig+0x130>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d168      	bne.n	8004308 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e26b      	b.n	8004712 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004242:	d106      	bne.n	8004252 <HAL_RCC_OscConfig+0x7a>
 8004244:	4b84      	ldr	r3, [pc, #528]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a83      	ldr	r2, [pc, #524]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 800424a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	e02e      	b.n	80042b0 <HAL_RCC_OscConfig+0xd8>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10c      	bne.n	8004274 <HAL_RCC_OscConfig+0x9c>
 800425a:	4b7f      	ldr	r3, [pc, #508]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a7e      	ldr	r2, [pc, #504]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004260:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004264:	6013      	str	r3, [r2, #0]
 8004266:	4b7c      	ldr	r3, [pc, #496]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a7b      	ldr	r2, [pc, #492]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 800426c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	e01d      	b.n	80042b0 <HAL_RCC_OscConfig+0xd8>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800427c:	d10c      	bne.n	8004298 <HAL_RCC_OscConfig+0xc0>
 800427e:	4b76      	ldr	r3, [pc, #472]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a75      	ldr	r2, [pc, #468]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004284:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	4b73      	ldr	r3, [pc, #460]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a72      	ldr	r2, [pc, #456]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	e00b      	b.n	80042b0 <HAL_RCC_OscConfig+0xd8>
 8004298:	4b6f      	ldr	r3, [pc, #444]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a6e      	ldr	r2, [pc, #440]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 800429e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042a2:	6013      	str	r3, [r2, #0]
 80042a4:	4b6c      	ldr	r3, [pc, #432]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a6b      	ldr	r2, [pc, #428]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 80042aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d013      	beq.n	80042e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b8:	f7fe fa40 	bl	800273c <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042c0:	f7fe fa3c 	bl	800273c <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b64      	cmp	r3, #100	@ 0x64
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e21f      	b.n	8004712 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d2:	4b61      	ldr	r3, [pc, #388]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0f0      	beq.n	80042c0 <HAL_RCC_OscConfig+0xe8>
 80042de:	e014      	b.n	800430a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e0:	f7fe fa2c 	bl	800273c <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042e8:	f7fe fa28 	bl	800273c <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b64      	cmp	r3, #100	@ 0x64
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e20b      	b.n	8004712 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042fa:	4b57      	ldr	r3, [pc, #348]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1f0      	bne.n	80042e8 <HAL_RCC_OscConfig+0x110>
 8004306:	e000      	b.n	800430a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d069      	beq.n	80043ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004316:	4b50      	ldr	r3, [pc, #320]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 030c 	and.w	r3, r3, #12
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00b      	beq.n	800433a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004322:	4b4d      	ldr	r3, [pc, #308]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 030c 	and.w	r3, r3, #12
 800432a:	2b08      	cmp	r3, #8
 800432c:	d11c      	bne.n	8004368 <HAL_RCC_OscConfig+0x190>
 800432e:	4b4a      	ldr	r3, [pc, #296]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d116      	bne.n	8004368 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800433a:	4b47      	ldr	r3, [pc, #284]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d005      	beq.n	8004352 <HAL_RCC_OscConfig+0x17a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d001      	beq.n	8004352 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e1df      	b.n	8004712 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004352:	4b41      	ldr	r3, [pc, #260]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	493d      	ldr	r1, [pc, #244]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004362:	4313      	orrs	r3, r2
 8004364:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004366:	e040      	b.n	80043ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d023      	beq.n	80043b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004370:	4b39      	ldr	r3, [pc, #228]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a38      	ldr	r2, [pc, #224]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004376:	f043 0301 	orr.w	r3, r3, #1
 800437a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437c:	f7fe f9de 	bl	800273c <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004384:	f7fe f9da 	bl	800273c <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e1bd      	b.n	8004712 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004396:	4b30      	ldr	r3, [pc, #192]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a2:	4b2d      	ldr	r3, [pc, #180]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	4929      	ldr	r1, [pc, #164]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	600b      	str	r3, [r1, #0]
 80043b6:	e018      	b.n	80043ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043b8:	4b27      	ldr	r3, [pc, #156]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a26      	ldr	r2, [pc, #152]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 80043be:	f023 0301 	bic.w	r3, r3, #1
 80043c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c4:	f7fe f9ba 	bl	800273c <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043cc:	f7fe f9b6 	bl	800273c <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e199      	b.n	8004712 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043de:	4b1e      	ldr	r3, [pc, #120]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f0      	bne.n	80043cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d038      	beq.n	8004468 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d019      	beq.n	8004432 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043fe:	4b16      	ldr	r3, [pc, #88]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004402:	4a15      	ldr	r2, [pc, #84]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004404:	f043 0301 	orr.w	r3, r3, #1
 8004408:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440a:	f7fe f997 	bl	800273c <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004412:	f7fe f993 	bl	800273c <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e176      	b.n	8004712 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004424:	4b0c      	ldr	r3, [pc, #48]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004426:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0f0      	beq.n	8004412 <HAL_RCC_OscConfig+0x23a>
 8004430:	e01a      	b.n	8004468 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004432:	4b09      	ldr	r3, [pc, #36]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004434:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004436:	4a08      	ldr	r2, [pc, #32]	@ (8004458 <HAL_RCC_OscConfig+0x280>)
 8004438:	f023 0301 	bic.w	r3, r3, #1
 800443c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443e:	f7fe f97d 	bl	800273c <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004444:	e00a      	b.n	800445c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004446:	f7fe f979 	bl	800273c <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d903      	bls.n	800445c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e15c      	b.n	8004712 <HAL_RCC_OscConfig+0x53a>
 8004458:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800445c:	4b91      	ldr	r3, [pc, #580]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 800445e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1ee      	bne.n	8004446 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 80a4 	beq.w	80045be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004476:	4b8b      	ldr	r3, [pc, #556]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10d      	bne.n	800449e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004482:	4b88      	ldr	r3, [pc, #544]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 8004484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004486:	4a87      	ldr	r2, [pc, #540]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 8004488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800448c:	6413      	str	r3, [r2, #64]	@ 0x40
 800448e:	4b85      	ldr	r3, [pc, #532]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004496:	60bb      	str	r3, [r7, #8]
 8004498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800449a:	2301      	movs	r3, #1
 800449c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800449e:	4b82      	ldr	r3, [pc, #520]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d118      	bne.n	80044dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80044aa:	4b7f      	ldr	r3, [pc, #508]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a7e      	ldr	r2, [pc, #504]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 80044b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044b6:	f7fe f941 	bl	800273c <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044be:	f7fe f93d 	bl	800273c <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b64      	cmp	r3, #100	@ 0x64
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e120      	b.n	8004712 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044d0:	4b75      	ldr	r3, [pc, #468]	@ (80046a8 <HAL_RCC_OscConfig+0x4d0>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0f0      	beq.n	80044be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d106      	bne.n	80044f2 <HAL_RCC_OscConfig+0x31a>
 80044e4:	4b6f      	ldr	r3, [pc, #444]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 80044e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e8:	4a6e      	ldr	r2, [pc, #440]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 80044ea:	f043 0301 	orr.w	r3, r3, #1
 80044ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80044f0:	e02d      	b.n	800454e <HAL_RCC_OscConfig+0x376>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10c      	bne.n	8004514 <HAL_RCC_OscConfig+0x33c>
 80044fa:	4b6a      	ldr	r3, [pc, #424]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 80044fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fe:	4a69      	ldr	r2, [pc, #420]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 8004500:	f023 0301 	bic.w	r3, r3, #1
 8004504:	6713      	str	r3, [r2, #112]	@ 0x70
 8004506:	4b67      	ldr	r3, [pc, #412]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 8004508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800450a:	4a66      	ldr	r2, [pc, #408]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 800450c:	f023 0304 	bic.w	r3, r3, #4
 8004510:	6713      	str	r3, [r2, #112]	@ 0x70
 8004512:	e01c      	b.n	800454e <HAL_RCC_OscConfig+0x376>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	2b05      	cmp	r3, #5
 800451a:	d10c      	bne.n	8004536 <HAL_RCC_OscConfig+0x35e>
 800451c:	4b61      	ldr	r3, [pc, #388]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 800451e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004520:	4a60      	ldr	r2, [pc, #384]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 8004522:	f043 0304 	orr.w	r3, r3, #4
 8004526:	6713      	str	r3, [r2, #112]	@ 0x70
 8004528:	4b5e      	ldr	r3, [pc, #376]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800452c:	4a5d      	ldr	r2, [pc, #372]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 800452e:	f043 0301 	orr.w	r3, r3, #1
 8004532:	6713      	str	r3, [r2, #112]	@ 0x70
 8004534:	e00b      	b.n	800454e <HAL_RCC_OscConfig+0x376>
 8004536:	4b5b      	ldr	r3, [pc, #364]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800453a:	4a5a      	ldr	r2, [pc, #360]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 800453c:	f023 0301 	bic.w	r3, r3, #1
 8004540:	6713      	str	r3, [r2, #112]	@ 0x70
 8004542:	4b58      	ldr	r3, [pc, #352]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004546:	4a57      	ldr	r2, [pc, #348]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 8004548:	f023 0304 	bic.w	r3, r3, #4
 800454c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d015      	beq.n	8004582 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004556:	f7fe f8f1 	bl	800273c <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800455c:	e00a      	b.n	8004574 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800455e:	f7fe f8ed 	bl	800273c <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	f241 3288 	movw	r2, #5000	@ 0x1388
 800456c:	4293      	cmp	r3, r2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e0ce      	b.n	8004712 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004574:	4b4b      	ldr	r3, [pc, #300]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 8004576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0ee      	beq.n	800455e <HAL_RCC_OscConfig+0x386>
 8004580:	e014      	b.n	80045ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004582:	f7fe f8db 	bl	800273c <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004588:	e00a      	b.n	80045a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800458a:	f7fe f8d7 	bl	800273c <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004598:	4293      	cmp	r3, r2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e0b8      	b.n	8004712 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045a0:	4b40      	ldr	r3, [pc, #256]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 80045a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1ee      	bne.n	800458a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045ac:	7dfb      	ldrb	r3, [r7, #23]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d105      	bne.n	80045be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045b2:	4b3c      	ldr	r3, [pc, #240]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 80045b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b6:	4a3b      	ldr	r2, [pc, #236]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 80045b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045bc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 80a4 	beq.w	8004710 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045c8:	4b36      	ldr	r3, [pc, #216]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 030c 	and.w	r3, r3, #12
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d06b      	beq.n	80046ac <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d149      	bne.n	8004670 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045dc:	4b31      	ldr	r3, [pc, #196]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a30      	ldr	r2, [pc, #192]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 80045e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e8:	f7fe f8a8 	bl	800273c <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f0:	f7fe f8a4 	bl	800273c <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e087      	b.n	8004712 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004602:	4b28      	ldr	r3, [pc, #160]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f0      	bne.n	80045f0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69da      	ldr	r2, [r3, #28]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461c:	019b      	lsls	r3, r3, #6
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004624:	085b      	lsrs	r3, r3, #1
 8004626:	3b01      	subs	r3, #1
 8004628:	041b      	lsls	r3, r3, #16
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004630:	061b      	lsls	r3, r3, #24
 8004632:	4313      	orrs	r3, r2
 8004634:	4a1b      	ldr	r2, [pc, #108]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 8004636:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800463a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800463c:	4b19      	ldr	r3, [pc, #100]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a18      	ldr	r2, [pc, #96]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 8004642:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004648:	f7fe f878 	bl	800273c <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004650:	f7fe f874 	bl	800273c <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e057      	b.n	8004712 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004662:	4b10      	ldr	r3, [pc, #64]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f0      	beq.n	8004650 <HAL_RCC_OscConfig+0x478>
 800466e:	e04f      	b.n	8004710 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004670:	4b0c      	ldr	r3, [pc, #48]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a0b      	ldr	r2, [pc, #44]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 8004676:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800467a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467c:	f7fe f85e 	bl	800273c <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004684:	f7fe f85a 	bl	800273c <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e03d      	b.n	8004712 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004696:	4b03      	ldr	r3, [pc, #12]	@ (80046a4 <HAL_RCC_OscConfig+0x4cc>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1f0      	bne.n	8004684 <HAL_RCC_OscConfig+0x4ac>
 80046a2:	e035      	b.n	8004710 <HAL_RCC_OscConfig+0x538>
 80046a4:	40023800 	.word	0x40023800
 80046a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80046ac:	4b1b      	ldr	r3, [pc, #108]	@ (800471c <HAL_RCC_OscConfig+0x544>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d028      	beq.n	800470c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d121      	bne.n	800470c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d11a      	bne.n	800470c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80046dc:	4013      	ands	r3, r2
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80046e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d111      	bne.n	800470c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f2:	085b      	lsrs	r3, r3, #1
 80046f4:	3b01      	subs	r3, #1
 80046f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d107      	bne.n	800470c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004706:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004708:	429a      	cmp	r2, r3
 800470a:	d001      	beq.n	8004710 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e000      	b.n	8004712 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	40023800 	.word	0x40023800

08004720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800472a:	2300      	movs	r3, #0
 800472c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e0d0      	b.n	80048da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004738:	4b6a      	ldr	r3, [pc, #424]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 030f 	and.w	r3, r3, #15
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d910      	bls.n	8004768 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004746:	4b67      	ldr	r3, [pc, #412]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f023 020f 	bic.w	r2, r3, #15
 800474e:	4965      	ldr	r1, [pc, #404]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	4313      	orrs	r3, r2
 8004754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004756:	4b63      	ldr	r3, [pc, #396]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	429a      	cmp	r2, r3
 8004762:	d001      	beq.n	8004768 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e0b8      	b.n	80048da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d020      	beq.n	80047b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d005      	beq.n	800478c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004780:	4b59      	ldr	r3, [pc, #356]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c8>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	4a58      	ldr	r2, [pc, #352]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c8>)
 8004786:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800478a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0308 	and.w	r3, r3, #8
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004798:	4b53      	ldr	r3, [pc, #332]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c8>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	4a52      	ldr	r2, [pc, #328]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c8>)
 800479e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047a4:	4b50      	ldr	r3, [pc, #320]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c8>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	494d      	ldr	r1, [pc, #308]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c8>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d040      	beq.n	8004844 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d107      	bne.n	80047da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ca:	4b47      	ldr	r3, [pc, #284]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c8>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d115      	bne.n	8004802 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e07f      	b.n	80048da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d107      	bne.n	80047f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047e2:	4b41      	ldr	r3, [pc, #260]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c8>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d109      	bne.n	8004802 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e073      	b.n	80048da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f2:	4b3d      	ldr	r3, [pc, #244]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c8>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e06b      	b.n	80048da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004802:	4b39      	ldr	r3, [pc, #228]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c8>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f023 0203 	bic.w	r2, r3, #3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	4936      	ldr	r1, [pc, #216]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c8>)
 8004810:	4313      	orrs	r3, r2
 8004812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004814:	f7fd ff92 	bl	800273c <HAL_GetTick>
 8004818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800481a:	e00a      	b.n	8004832 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800481c:	f7fd ff8e 	bl	800273c <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800482a:	4293      	cmp	r3, r2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e053      	b.n	80048da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004832:	4b2d      	ldr	r3, [pc, #180]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c8>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 020c 	and.w	r2, r3, #12
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	429a      	cmp	r2, r3
 8004842:	d1eb      	bne.n	800481c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004844:	4b27      	ldr	r3, [pc, #156]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 030f 	and.w	r3, r3, #15
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	429a      	cmp	r2, r3
 8004850:	d210      	bcs.n	8004874 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004852:	4b24      	ldr	r3, [pc, #144]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f023 020f 	bic.w	r2, r3, #15
 800485a:	4922      	ldr	r1, [pc, #136]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	4313      	orrs	r3, r2
 8004860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004862:	4b20      	ldr	r3, [pc, #128]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	429a      	cmp	r2, r3
 800486e:	d001      	beq.n	8004874 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e032      	b.n	80048da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	d008      	beq.n	8004892 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004880:	4b19      	ldr	r3, [pc, #100]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c8>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	4916      	ldr	r1, [pc, #88]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c8>)
 800488e:	4313      	orrs	r3, r2
 8004890:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0308 	and.w	r3, r3, #8
 800489a:	2b00      	cmp	r3, #0
 800489c:	d009      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800489e:	4b12      	ldr	r3, [pc, #72]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c8>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	490e      	ldr	r1, [pc, #56]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c8>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048b2:	f000 f821 	bl	80048f8 <HAL_RCC_GetSysClockFreq>
 80048b6:	4602      	mov	r2, r0
 80048b8:	4b0b      	ldr	r3, [pc, #44]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c8>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	091b      	lsrs	r3, r3, #4
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	490a      	ldr	r1, [pc, #40]	@ (80048ec <HAL_RCC_ClockConfig+0x1cc>)
 80048c4:	5ccb      	ldrb	r3, [r1, r3]
 80048c6:	fa22 f303 	lsr.w	r3, r2, r3
 80048ca:	4a09      	ldr	r2, [pc, #36]	@ (80048f0 <HAL_RCC_ClockConfig+0x1d0>)
 80048cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048ce:	4b09      	ldr	r3, [pc, #36]	@ (80048f4 <HAL_RCC_ClockConfig+0x1d4>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fd feee 	bl	80026b4 <HAL_InitTick>

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	40023c00 	.word	0x40023c00
 80048e8:	40023800 	.word	0x40023800
 80048ec:	08005bf4 	.word	0x08005bf4
 80048f0:	20000004 	.word	0x20000004
 80048f4:	20000008 	.word	0x20000008

080048f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048fc:	b090      	sub	sp, #64	@ 0x40
 80048fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004900:	2300      	movs	r3, #0
 8004902:	637b      	str	r3, [r7, #52]	@ 0x34
 8004904:	2300      	movs	r3, #0
 8004906:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004908:	2300      	movs	r3, #0
 800490a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800490c:	2300      	movs	r3, #0
 800490e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004910:	4b59      	ldr	r3, [pc, #356]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0x180>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f003 030c 	and.w	r3, r3, #12
 8004918:	2b08      	cmp	r3, #8
 800491a:	d00d      	beq.n	8004938 <HAL_RCC_GetSysClockFreq+0x40>
 800491c:	2b08      	cmp	r3, #8
 800491e:	f200 80a1 	bhi.w	8004a64 <HAL_RCC_GetSysClockFreq+0x16c>
 8004922:	2b00      	cmp	r3, #0
 8004924:	d002      	beq.n	800492c <HAL_RCC_GetSysClockFreq+0x34>
 8004926:	2b04      	cmp	r3, #4
 8004928:	d003      	beq.n	8004932 <HAL_RCC_GetSysClockFreq+0x3a>
 800492a:	e09b      	b.n	8004a64 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800492c:	4b53      	ldr	r3, [pc, #332]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x184>)
 800492e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004930:	e09b      	b.n	8004a6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004932:	4b53      	ldr	r3, [pc, #332]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x188>)
 8004934:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004936:	e098      	b.n	8004a6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004938:	4b4f      	ldr	r3, [pc, #316]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0x180>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004940:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004942:	4b4d      	ldr	r3, [pc, #308]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0x180>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d028      	beq.n	80049a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800494e:	4b4a      	ldr	r3, [pc, #296]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0x180>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	099b      	lsrs	r3, r3, #6
 8004954:	2200      	movs	r2, #0
 8004956:	623b      	str	r3, [r7, #32]
 8004958:	627a      	str	r2, [r7, #36]	@ 0x24
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004960:	2100      	movs	r1, #0
 8004962:	4b47      	ldr	r3, [pc, #284]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x188>)
 8004964:	fb03 f201 	mul.w	r2, r3, r1
 8004968:	2300      	movs	r3, #0
 800496a:	fb00 f303 	mul.w	r3, r0, r3
 800496e:	4413      	add	r3, r2
 8004970:	4a43      	ldr	r2, [pc, #268]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x188>)
 8004972:	fba0 1202 	umull	r1, r2, r0, r2
 8004976:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004978:	460a      	mov	r2, r1
 800497a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800497c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800497e:	4413      	add	r3, r2
 8004980:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004984:	2200      	movs	r2, #0
 8004986:	61bb      	str	r3, [r7, #24]
 8004988:	61fa      	str	r2, [r7, #28]
 800498a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800498e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004992:	f7fc f863 	bl	8000a5c <__aeabi_uldivmod>
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4613      	mov	r3, r2
 800499c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800499e:	e053      	b.n	8004a48 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049a0:	4b35      	ldr	r3, [pc, #212]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0x180>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	099b      	lsrs	r3, r3, #6
 80049a6:	2200      	movs	r2, #0
 80049a8:	613b      	str	r3, [r7, #16]
 80049aa:	617a      	str	r2, [r7, #20]
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80049b2:	f04f 0b00 	mov.w	fp, #0
 80049b6:	4652      	mov	r2, sl
 80049b8:	465b      	mov	r3, fp
 80049ba:	f04f 0000 	mov.w	r0, #0
 80049be:	f04f 0100 	mov.w	r1, #0
 80049c2:	0159      	lsls	r1, r3, #5
 80049c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049c8:	0150      	lsls	r0, r2, #5
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	ebb2 080a 	subs.w	r8, r2, sl
 80049d2:	eb63 090b 	sbc.w	r9, r3, fp
 80049d6:	f04f 0200 	mov.w	r2, #0
 80049da:	f04f 0300 	mov.w	r3, #0
 80049de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80049e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80049e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80049ea:	ebb2 0408 	subs.w	r4, r2, r8
 80049ee:	eb63 0509 	sbc.w	r5, r3, r9
 80049f2:	f04f 0200 	mov.w	r2, #0
 80049f6:	f04f 0300 	mov.w	r3, #0
 80049fa:	00eb      	lsls	r3, r5, #3
 80049fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a00:	00e2      	lsls	r2, r4, #3
 8004a02:	4614      	mov	r4, r2
 8004a04:	461d      	mov	r5, r3
 8004a06:	eb14 030a 	adds.w	r3, r4, sl
 8004a0a:	603b      	str	r3, [r7, #0]
 8004a0c:	eb45 030b 	adc.w	r3, r5, fp
 8004a10:	607b      	str	r3, [r7, #4]
 8004a12:	f04f 0200 	mov.w	r2, #0
 8004a16:	f04f 0300 	mov.w	r3, #0
 8004a1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a1e:	4629      	mov	r1, r5
 8004a20:	028b      	lsls	r3, r1, #10
 8004a22:	4621      	mov	r1, r4
 8004a24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a28:	4621      	mov	r1, r4
 8004a2a:	028a      	lsls	r2, r1, #10
 8004a2c:	4610      	mov	r0, r2
 8004a2e:	4619      	mov	r1, r3
 8004a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a32:	2200      	movs	r2, #0
 8004a34:	60bb      	str	r3, [r7, #8]
 8004a36:	60fa      	str	r2, [r7, #12]
 8004a38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a3c:	f7fc f80e 	bl	8000a5c <__aeabi_uldivmod>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4613      	mov	r3, r2
 8004a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004a48:	4b0b      	ldr	r3, [pc, #44]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	0c1b      	lsrs	r3, r3, #16
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	3301      	adds	r3, #1
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004a58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a60:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a62:	e002      	b.n	8004a6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a64:	4b05      	ldr	r3, [pc, #20]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x184>)
 8004a66:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3740      	adds	r7, #64	@ 0x40
 8004a70:	46bd      	mov	sp, r7
 8004a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a76:	bf00      	nop
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	00f42400 	.word	0x00f42400
 8004a80:	017d7840 	.word	0x017d7840

08004a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e049      	b.n	8004b2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fd fd3c 	bl	8002528 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	f000 fc06 	bl	80052d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
	...

08004b34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d001      	beq.n	8004b4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e04c      	b.n	8004be6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a26      	ldr	r2, [pc, #152]	@ (8004bf4 <HAL_TIM_Base_Start+0xc0>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d022      	beq.n	8004ba4 <HAL_TIM_Base_Start+0x70>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b66:	d01d      	beq.n	8004ba4 <HAL_TIM_Base_Start+0x70>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a22      	ldr	r2, [pc, #136]	@ (8004bf8 <HAL_TIM_Base_Start+0xc4>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d018      	beq.n	8004ba4 <HAL_TIM_Base_Start+0x70>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a21      	ldr	r2, [pc, #132]	@ (8004bfc <HAL_TIM_Base_Start+0xc8>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d013      	beq.n	8004ba4 <HAL_TIM_Base_Start+0x70>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a1f      	ldr	r2, [pc, #124]	@ (8004c00 <HAL_TIM_Base_Start+0xcc>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d00e      	beq.n	8004ba4 <HAL_TIM_Base_Start+0x70>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8004c04 <HAL_TIM_Base_Start+0xd0>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d009      	beq.n	8004ba4 <HAL_TIM_Base_Start+0x70>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a1c      	ldr	r2, [pc, #112]	@ (8004c08 <HAL_TIM_Base_Start+0xd4>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d004      	beq.n	8004ba4 <HAL_TIM_Base_Start+0x70>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a1b      	ldr	r2, [pc, #108]	@ (8004c0c <HAL_TIM_Base_Start+0xd8>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d115      	bne.n	8004bd0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689a      	ldr	r2, [r3, #8]
 8004baa:	4b19      	ldr	r3, [pc, #100]	@ (8004c10 <HAL_TIM_Base_Start+0xdc>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2b06      	cmp	r3, #6
 8004bb4:	d015      	beq.n	8004be2 <HAL_TIM_Base_Start+0xae>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bbc:	d011      	beq.n	8004be2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f042 0201 	orr.w	r2, r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bce:	e008      	b.n	8004be2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0201 	orr.w	r2, r2, #1
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	e000      	b.n	8004be4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	40010000 	.word	0x40010000
 8004bf8:	40000400 	.word	0x40000400
 8004bfc:	40000800 	.word	0x40000800
 8004c00:	40000c00 	.word	0x40000c00
 8004c04:	40010400 	.word	0x40010400
 8004c08:	40014000 	.word	0x40014000
 8004c0c:	40001800 	.word	0x40001800
 8004c10:	00010007 	.word	0x00010007

08004c14 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6a1a      	ldr	r2, [r3, #32]
 8004c22:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004c26:	4013      	ands	r3, r2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10f      	bne.n	8004c4c <HAL_TIM_Base_Stop+0x38>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6a1a      	ldr	r2, [r3, #32]
 8004c32:	f240 4344 	movw	r3, #1092	@ 0x444
 8004c36:	4013      	ands	r3, r2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d107      	bne.n	8004c4c <HAL_TIM_Base_Stop+0x38>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0201 	bic.w	r2, r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b082      	sub	sp, #8
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e049      	b.n	8004d08 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d106      	bne.n	8004c8e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f841 	bl	8004d10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2202      	movs	r2, #2
 8004c92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	f000 fb17 	bl	80052d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d109      	bne.n	8004d48 <HAL_TIM_PWM_Start+0x24>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	bf14      	ite	ne
 8004d40:	2301      	movne	r3, #1
 8004d42:	2300      	moveq	r3, #0
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	e03c      	b.n	8004dc2 <HAL_TIM_PWM_Start+0x9e>
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	d109      	bne.n	8004d62 <HAL_TIM_PWM_Start+0x3e>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	bf14      	ite	ne
 8004d5a:	2301      	movne	r3, #1
 8004d5c:	2300      	moveq	r3, #0
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	e02f      	b.n	8004dc2 <HAL_TIM_PWM_Start+0x9e>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b08      	cmp	r3, #8
 8004d66:	d109      	bne.n	8004d7c <HAL_TIM_PWM_Start+0x58>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	bf14      	ite	ne
 8004d74:	2301      	movne	r3, #1
 8004d76:	2300      	moveq	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	e022      	b.n	8004dc2 <HAL_TIM_PWM_Start+0x9e>
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2b0c      	cmp	r3, #12
 8004d80:	d109      	bne.n	8004d96 <HAL_TIM_PWM_Start+0x72>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	bf14      	ite	ne
 8004d8e:	2301      	movne	r3, #1
 8004d90:	2300      	moveq	r3, #0
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	e015      	b.n	8004dc2 <HAL_TIM_PWM_Start+0x9e>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b10      	cmp	r3, #16
 8004d9a:	d109      	bne.n	8004db0 <HAL_TIM_PWM_Start+0x8c>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	bf14      	ite	ne
 8004da8:	2301      	movne	r3, #1
 8004daa:	2300      	moveq	r3, #0
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	e008      	b.n	8004dc2 <HAL_TIM_PWM_Start+0x9e>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	bf14      	ite	ne
 8004dbc:	2301      	movne	r3, #1
 8004dbe:	2300      	moveq	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e092      	b.n	8004ef0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d104      	bne.n	8004dda <HAL_TIM_PWM_Start+0xb6>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dd8:	e023      	b.n	8004e22 <HAL_TIM_PWM_Start+0xfe>
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	d104      	bne.n	8004dea <HAL_TIM_PWM_Start+0xc6>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004de8:	e01b      	b.n	8004e22 <HAL_TIM_PWM_Start+0xfe>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d104      	bne.n	8004dfa <HAL_TIM_PWM_Start+0xd6>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004df8:	e013      	b.n	8004e22 <HAL_TIM_PWM_Start+0xfe>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b0c      	cmp	r3, #12
 8004dfe:	d104      	bne.n	8004e0a <HAL_TIM_PWM_Start+0xe6>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e08:	e00b      	b.n	8004e22 <HAL_TIM_PWM_Start+0xfe>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b10      	cmp	r3, #16
 8004e0e:	d104      	bne.n	8004e1a <HAL_TIM_PWM_Start+0xf6>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e18:	e003      	b.n	8004e22 <HAL_TIM_PWM_Start+0xfe>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2201      	movs	r2, #1
 8004e28:	6839      	ldr	r1, [r7, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 fdf6 	bl	8005a1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a30      	ldr	r2, [pc, #192]	@ (8004ef8 <HAL_TIM_PWM_Start+0x1d4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d004      	beq.n	8004e44 <HAL_TIM_PWM_Start+0x120>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a2f      	ldr	r2, [pc, #188]	@ (8004efc <HAL_TIM_PWM_Start+0x1d8>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d101      	bne.n	8004e48 <HAL_TIM_PWM_Start+0x124>
 8004e44:	2301      	movs	r3, #1
 8004e46:	e000      	b.n	8004e4a <HAL_TIM_PWM_Start+0x126>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d007      	beq.n	8004e5e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a25      	ldr	r2, [pc, #148]	@ (8004ef8 <HAL_TIM_PWM_Start+0x1d4>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d022      	beq.n	8004eae <HAL_TIM_PWM_Start+0x18a>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e70:	d01d      	beq.n	8004eae <HAL_TIM_PWM_Start+0x18a>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a22      	ldr	r2, [pc, #136]	@ (8004f00 <HAL_TIM_PWM_Start+0x1dc>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d018      	beq.n	8004eae <HAL_TIM_PWM_Start+0x18a>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a20      	ldr	r2, [pc, #128]	@ (8004f04 <HAL_TIM_PWM_Start+0x1e0>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d013      	beq.n	8004eae <HAL_TIM_PWM_Start+0x18a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a1f      	ldr	r2, [pc, #124]	@ (8004f08 <HAL_TIM_PWM_Start+0x1e4>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d00e      	beq.n	8004eae <HAL_TIM_PWM_Start+0x18a>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a19      	ldr	r2, [pc, #100]	@ (8004efc <HAL_TIM_PWM_Start+0x1d8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d009      	beq.n	8004eae <HAL_TIM_PWM_Start+0x18a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a1b      	ldr	r2, [pc, #108]	@ (8004f0c <HAL_TIM_PWM_Start+0x1e8>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d004      	beq.n	8004eae <HAL_TIM_PWM_Start+0x18a>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a19      	ldr	r2, [pc, #100]	@ (8004f10 <HAL_TIM_PWM_Start+0x1ec>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d115      	bne.n	8004eda <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	4b17      	ldr	r3, [pc, #92]	@ (8004f14 <HAL_TIM_PWM_Start+0x1f0>)
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2b06      	cmp	r3, #6
 8004ebe:	d015      	beq.n	8004eec <HAL_TIM_PWM_Start+0x1c8>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ec6:	d011      	beq.n	8004eec <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f042 0201 	orr.w	r2, r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed8:	e008      	b.n	8004eec <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f042 0201 	orr.w	r2, r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	e000      	b.n	8004eee <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	40010000 	.word	0x40010000
 8004efc:	40010400 	.word	0x40010400
 8004f00:	40000400 	.word	0x40000400
 8004f04:	40000800 	.word	0x40000800
 8004f08:	40000c00 	.word	0x40000c00
 8004f0c:	40014000 	.word	0x40014000
 8004f10:	40001800 	.word	0x40001800
 8004f14:	00010007 	.word	0x00010007

08004f18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f24:	2300      	movs	r3, #0
 8004f26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d101      	bne.n	8004f36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f32:	2302      	movs	r3, #2
 8004f34:	e0ff      	b.n	8005136 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b14      	cmp	r3, #20
 8004f42:	f200 80f0 	bhi.w	8005126 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f46:	a201      	add	r2, pc, #4	@ (adr r2, 8004f4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4c:	08004fa1 	.word	0x08004fa1
 8004f50:	08005127 	.word	0x08005127
 8004f54:	08005127 	.word	0x08005127
 8004f58:	08005127 	.word	0x08005127
 8004f5c:	08004fe1 	.word	0x08004fe1
 8004f60:	08005127 	.word	0x08005127
 8004f64:	08005127 	.word	0x08005127
 8004f68:	08005127 	.word	0x08005127
 8004f6c:	08005023 	.word	0x08005023
 8004f70:	08005127 	.word	0x08005127
 8004f74:	08005127 	.word	0x08005127
 8004f78:	08005127 	.word	0x08005127
 8004f7c:	08005063 	.word	0x08005063
 8004f80:	08005127 	.word	0x08005127
 8004f84:	08005127 	.word	0x08005127
 8004f88:	08005127 	.word	0x08005127
 8004f8c:	080050a5 	.word	0x080050a5
 8004f90:	08005127 	.word	0x08005127
 8004f94:	08005127 	.word	0x08005127
 8004f98:	08005127 	.word	0x08005127
 8004f9c:	080050e5 	.word	0x080050e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68b9      	ldr	r1, [r7, #8]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fa40 	bl	800542c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699a      	ldr	r2, [r3, #24]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 0208 	orr.w	r2, r2, #8
 8004fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	699a      	ldr	r2, [r3, #24]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 0204 	bic.w	r2, r2, #4
 8004fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6999      	ldr	r1, [r3, #24]
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	691a      	ldr	r2, [r3, #16]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	619a      	str	r2, [r3, #24]
      break;
 8004fde:	e0a5      	b.n	800512c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68b9      	ldr	r1, [r7, #8]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fa92 	bl	8005510 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	699a      	ldr	r2, [r3, #24]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	699a      	ldr	r2, [r3, #24]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800500a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6999      	ldr	r1, [r3, #24]
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	021a      	lsls	r2, r3, #8
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	619a      	str	r2, [r3, #24]
      break;
 8005020:	e084      	b.n	800512c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68b9      	ldr	r1, [r7, #8]
 8005028:	4618      	mov	r0, r3
 800502a:	f000 fae9 	bl	8005600 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	69da      	ldr	r2, [r3, #28]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f042 0208 	orr.w	r2, r2, #8
 800503c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	69da      	ldr	r2, [r3, #28]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 0204 	bic.w	r2, r2, #4
 800504c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69d9      	ldr	r1, [r3, #28]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	691a      	ldr	r2, [r3, #16]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	61da      	str	r2, [r3, #28]
      break;
 8005060:	e064      	b.n	800512c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68b9      	ldr	r1, [r7, #8]
 8005068:	4618      	mov	r0, r3
 800506a:	f000 fb3f 	bl	80056ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69da      	ldr	r2, [r3, #28]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800507c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69da      	ldr	r2, [r3, #28]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800508c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	69d9      	ldr	r1, [r3, #28]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	021a      	lsls	r2, r3, #8
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	61da      	str	r2, [r3, #28]
      break;
 80050a2:	e043      	b.n	800512c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68b9      	ldr	r1, [r7, #8]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 fb76 	bl	800579c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0208 	orr.w	r2, r2, #8
 80050be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0204 	bic.w	r2, r2, #4
 80050ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	691a      	ldr	r2, [r3, #16]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80050e2:	e023      	b.n	800512c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 fba8 	bl	8005840 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800510e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	021a      	lsls	r2, r3, #8
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005124:	e002      	b.n	800512c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	75fb      	strb	r3, [r7, #23]
      break;
 800512a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005134:	7dfb      	ldrb	r3, [r7, #23]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3718      	adds	r7, #24
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop

08005140 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005154:	2b01      	cmp	r3, #1
 8005156:	d101      	bne.n	800515c <HAL_TIM_ConfigClockSource+0x1c>
 8005158:	2302      	movs	r3, #2
 800515a:	e0b4      	b.n	80052c6 <HAL_TIM_ConfigClockSource+0x186>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	4b56      	ldr	r3, [pc, #344]	@ (80052d0 <HAL_TIM_ConfigClockSource+0x190>)
 8005178:	4013      	ands	r3, r2
 800517a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005182:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005194:	d03e      	beq.n	8005214 <HAL_TIM_ConfigClockSource+0xd4>
 8005196:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800519a:	f200 8087 	bhi.w	80052ac <HAL_TIM_ConfigClockSource+0x16c>
 800519e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051a2:	f000 8086 	beq.w	80052b2 <HAL_TIM_ConfigClockSource+0x172>
 80051a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051aa:	d87f      	bhi.n	80052ac <HAL_TIM_ConfigClockSource+0x16c>
 80051ac:	2b70      	cmp	r3, #112	@ 0x70
 80051ae:	d01a      	beq.n	80051e6 <HAL_TIM_ConfigClockSource+0xa6>
 80051b0:	2b70      	cmp	r3, #112	@ 0x70
 80051b2:	d87b      	bhi.n	80052ac <HAL_TIM_ConfigClockSource+0x16c>
 80051b4:	2b60      	cmp	r3, #96	@ 0x60
 80051b6:	d050      	beq.n	800525a <HAL_TIM_ConfigClockSource+0x11a>
 80051b8:	2b60      	cmp	r3, #96	@ 0x60
 80051ba:	d877      	bhi.n	80052ac <HAL_TIM_ConfigClockSource+0x16c>
 80051bc:	2b50      	cmp	r3, #80	@ 0x50
 80051be:	d03c      	beq.n	800523a <HAL_TIM_ConfigClockSource+0xfa>
 80051c0:	2b50      	cmp	r3, #80	@ 0x50
 80051c2:	d873      	bhi.n	80052ac <HAL_TIM_ConfigClockSource+0x16c>
 80051c4:	2b40      	cmp	r3, #64	@ 0x40
 80051c6:	d058      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x13a>
 80051c8:	2b40      	cmp	r3, #64	@ 0x40
 80051ca:	d86f      	bhi.n	80052ac <HAL_TIM_ConfigClockSource+0x16c>
 80051cc:	2b30      	cmp	r3, #48	@ 0x30
 80051ce:	d064      	beq.n	800529a <HAL_TIM_ConfigClockSource+0x15a>
 80051d0:	2b30      	cmp	r3, #48	@ 0x30
 80051d2:	d86b      	bhi.n	80052ac <HAL_TIM_ConfigClockSource+0x16c>
 80051d4:	2b20      	cmp	r3, #32
 80051d6:	d060      	beq.n	800529a <HAL_TIM_ConfigClockSource+0x15a>
 80051d8:	2b20      	cmp	r3, #32
 80051da:	d867      	bhi.n	80052ac <HAL_TIM_ConfigClockSource+0x16c>
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d05c      	beq.n	800529a <HAL_TIM_ConfigClockSource+0x15a>
 80051e0:	2b10      	cmp	r3, #16
 80051e2:	d05a      	beq.n	800529a <HAL_TIM_ConfigClockSource+0x15a>
 80051e4:	e062      	b.n	80052ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051f6:	f000 fbf1 	bl	80059dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005208:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	609a      	str	r2, [r3, #8]
      break;
 8005212:	e04f      	b.n	80052b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005224:	f000 fbda 	bl	80059dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689a      	ldr	r2, [r3, #8]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005236:	609a      	str	r2, [r3, #8]
      break;
 8005238:	e03c      	b.n	80052b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005246:	461a      	mov	r2, r3
 8005248:	f000 fb4e 	bl	80058e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2150      	movs	r1, #80	@ 0x50
 8005252:	4618      	mov	r0, r3
 8005254:	f000 fba7 	bl	80059a6 <TIM_ITRx_SetConfig>
      break;
 8005258:	e02c      	b.n	80052b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005266:	461a      	mov	r2, r3
 8005268:	f000 fb6d 	bl	8005946 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2160      	movs	r1, #96	@ 0x60
 8005272:	4618      	mov	r0, r3
 8005274:	f000 fb97 	bl	80059a6 <TIM_ITRx_SetConfig>
      break;
 8005278:	e01c      	b.n	80052b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005286:	461a      	mov	r2, r3
 8005288:	f000 fb2e 	bl	80058e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2140      	movs	r1, #64	@ 0x40
 8005292:	4618      	mov	r0, r3
 8005294:	f000 fb87 	bl	80059a6 <TIM_ITRx_SetConfig>
      break;
 8005298:	e00c      	b.n	80052b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4619      	mov	r1, r3
 80052a4:	4610      	mov	r0, r2
 80052a6:	f000 fb7e 	bl	80059a6 <TIM_ITRx_SetConfig>
      break;
 80052aa:	e003      	b.n	80052b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	73fb      	strb	r3, [r7, #15]
      break;
 80052b0:	e000      	b.n	80052b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	fffeff88 	.word	0xfffeff88

080052d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a46      	ldr	r2, [pc, #280]	@ (8005400 <TIM_Base_SetConfig+0x12c>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d013      	beq.n	8005314 <TIM_Base_SetConfig+0x40>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052f2:	d00f      	beq.n	8005314 <TIM_Base_SetConfig+0x40>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a43      	ldr	r2, [pc, #268]	@ (8005404 <TIM_Base_SetConfig+0x130>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d00b      	beq.n	8005314 <TIM_Base_SetConfig+0x40>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a42      	ldr	r2, [pc, #264]	@ (8005408 <TIM_Base_SetConfig+0x134>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d007      	beq.n	8005314 <TIM_Base_SetConfig+0x40>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a41      	ldr	r2, [pc, #260]	@ (800540c <TIM_Base_SetConfig+0x138>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d003      	beq.n	8005314 <TIM_Base_SetConfig+0x40>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a40      	ldr	r2, [pc, #256]	@ (8005410 <TIM_Base_SetConfig+0x13c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d108      	bne.n	8005326 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800531a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	4313      	orrs	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a35      	ldr	r2, [pc, #212]	@ (8005400 <TIM_Base_SetConfig+0x12c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d02b      	beq.n	8005386 <TIM_Base_SetConfig+0xb2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005334:	d027      	beq.n	8005386 <TIM_Base_SetConfig+0xb2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a32      	ldr	r2, [pc, #200]	@ (8005404 <TIM_Base_SetConfig+0x130>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d023      	beq.n	8005386 <TIM_Base_SetConfig+0xb2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a31      	ldr	r2, [pc, #196]	@ (8005408 <TIM_Base_SetConfig+0x134>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d01f      	beq.n	8005386 <TIM_Base_SetConfig+0xb2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a30      	ldr	r2, [pc, #192]	@ (800540c <TIM_Base_SetConfig+0x138>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d01b      	beq.n	8005386 <TIM_Base_SetConfig+0xb2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a2f      	ldr	r2, [pc, #188]	@ (8005410 <TIM_Base_SetConfig+0x13c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d017      	beq.n	8005386 <TIM_Base_SetConfig+0xb2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a2e      	ldr	r2, [pc, #184]	@ (8005414 <TIM_Base_SetConfig+0x140>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d013      	beq.n	8005386 <TIM_Base_SetConfig+0xb2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a2d      	ldr	r2, [pc, #180]	@ (8005418 <TIM_Base_SetConfig+0x144>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00f      	beq.n	8005386 <TIM_Base_SetConfig+0xb2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a2c      	ldr	r2, [pc, #176]	@ (800541c <TIM_Base_SetConfig+0x148>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d00b      	beq.n	8005386 <TIM_Base_SetConfig+0xb2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a2b      	ldr	r2, [pc, #172]	@ (8005420 <TIM_Base_SetConfig+0x14c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d007      	beq.n	8005386 <TIM_Base_SetConfig+0xb2>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a2a      	ldr	r2, [pc, #168]	@ (8005424 <TIM_Base_SetConfig+0x150>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d003      	beq.n	8005386 <TIM_Base_SetConfig+0xb2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a29      	ldr	r2, [pc, #164]	@ (8005428 <TIM_Base_SetConfig+0x154>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d108      	bne.n	8005398 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800538c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4313      	orrs	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a10      	ldr	r2, [pc, #64]	@ (8005400 <TIM_Base_SetConfig+0x12c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d003      	beq.n	80053cc <TIM_Base_SetConfig+0xf8>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a12      	ldr	r2, [pc, #72]	@ (8005410 <TIM_Base_SetConfig+0x13c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d103      	bne.n	80053d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	691a      	ldr	r2, [r3, #16]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d105      	bne.n	80053f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f023 0201 	bic.w	r2, r3, #1
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	611a      	str	r2, [r3, #16]
  }
}
 80053f2:	bf00      	nop
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	40010000 	.word	0x40010000
 8005404:	40000400 	.word	0x40000400
 8005408:	40000800 	.word	0x40000800
 800540c:	40000c00 	.word	0x40000c00
 8005410:	40010400 	.word	0x40010400
 8005414:	40014000 	.word	0x40014000
 8005418:	40014400 	.word	0x40014400
 800541c:	40014800 	.word	0x40014800
 8005420:	40001800 	.word	0x40001800
 8005424:	40001c00 	.word	0x40001c00
 8005428:	40002000 	.word	0x40002000

0800542c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	f023 0201 	bic.w	r2, r3, #1
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	4b2b      	ldr	r3, [pc, #172]	@ (8005504 <TIM_OC1_SetConfig+0xd8>)
 8005458:	4013      	ands	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f023 0303 	bic.w	r3, r3, #3
 8005462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f023 0302 	bic.w	r3, r3, #2
 8005474:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	4313      	orrs	r3, r2
 800547e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a21      	ldr	r2, [pc, #132]	@ (8005508 <TIM_OC1_SetConfig+0xdc>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d003      	beq.n	8005490 <TIM_OC1_SetConfig+0x64>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a20      	ldr	r2, [pc, #128]	@ (800550c <TIM_OC1_SetConfig+0xe0>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d10c      	bne.n	80054aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f023 0308 	bic.w	r3, r3, #8
 8005496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	4313      	orrs	r3, r2
 80054a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f023 0304 	bic.w	r3, r3, #4
 80054a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a16      	ldr	r2, [pc, #88]	@ (8005508 <TIM_OC1_SetConfig+0xdc>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d003      	beq.n	80054ba <TIM_OC1_SetConfig+0x8e>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a15      	ldr	r2, [pc, #84]	@ (800550c <TIM_OC1_SetConfig+0xe0>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d111      	bne.n	80054de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	4313      	orrs	r3, r2
 80054dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	621a      	str	r2, [r3, #32]
}
 80054f8:	bf00      	nop
 80054fa:	371c      	adds	r7, #28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	fffeff8f 	.word	0xfffeff8f
 8005508:	40010000 	.word	0x40010000
 800550c:	40010400 	.word	0x40010400

08005510 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	f023 0210 	bic.w	r2, r3, #16
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4b2e      	ldr	r3, [pc, #184]	@ (80055f4 <TIM_OC2_SetConfig+0xe4>)
 800553c:	4013      	ands	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	021b      	lsls	r3, r3, #8
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	4313      	orrs	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f023 0320 	bic.w	r3, r3, #32
 800555a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	011b      	lsls	r3, r3, #4
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	4313      	orrs	r3, r2
 8005566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a23      	ldr	r2, [pc, #140]	@ (80055f8 <TIM_OC2_SetConfig+0xe8>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d003      	beq.n	8005578 <TIM_OC2_SetConfig+0x68>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a22      	ldr	r2, [pc, #136]	@ (80055fc <TIM_OC2_SetConfig+0xec>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d10d      	bne.n	8005594 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800557e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	4313      	orrs	r3, r2
 800558a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005592:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a18      	ldr	r2, [pc, #96]	@ (80055f8 <TIM_OC2_SetConfig+0xe8>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d003      	beq.n	80055a4 <TIM_OC2_SetConfig+0x94>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a17      	ldr	r2, [pc, #92]	@ (80055fc <TIM_OC2_SetConfig+0xec>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d113      	bne.n	80055cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	4313      	orrs	r3, r2
 80055be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	621a      	str	r2, [r3, #32]
}
 80055e6:	bf00      	nop
 80055e8:	371c      	adds	r7, #28
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	feff8fff 	.word	0xfeff8fff
 80055f8:	40010000 	.word	0x40010000
 80055fc:	40010400 	.word	0x40010400

08005600 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005600:	b480      	push	{r7}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	4b2d      	ldr	r3, [pc, #180]	@ (80056e0 <TIM_OC3_SetConfig+0xe0>)
 800562c:	4013      	ands	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0303 	bic.w	r3, r3, #3
 8005636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	4313      	orrs	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	021b      	lsls	r3, r3, #8
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	4313      	orrs	r3, r2
 8005654:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a22      	ldr	r2, [pc, #136]	@ (80056e4 <TIM_OC3_SetConfig+0xe4>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d003      	beq.n	8005666 <TIM_OC3_SetConfig+0x66>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a21      	ldr	r2, [pc, #132]	@ (80056e8 <TIM_OC3_SetConfig+0xe8>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d10d      	bne.n	8005682 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800566c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	021b      	lsls	r3, r3, #8
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	4313      	orrs	r3, r2
 8005678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a17      	ldr	r2, [pc, #92]	@ (80056e4 <TIM_OC3_SetConfig+0xe4>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d003      	beq.n	8005692 <TIM_OC3_SetConfig+0x92>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a16      	ldr	r2, [pc, #88]	@ (80056e8 <TIM_OC3_SetConfig+0xe8>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d113      	bne.n	80056ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80056a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	011b      	lsls	r3, r3, #4
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	621a      	str	r2, [r3, #32]
}
 80056d4:	bf00      	nop
 80056d6:	371c      	adds	r7, #28
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	fffeff8f 	.word	0xfffeff8f
 80056e4:	40010000 	.word	0x40010000
 80056e8:	40010400 	.word	0x40010400

080056ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	4b1e      	ldr	r3, [pc, #120]	@ (8005790 <TIM_OC4_SetConfig+0xa4>)
 8005718:	4013      	ands	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	021b      	lsls	r3, r3, #8
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	4313      	orrs	r3, r2
 800572e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005736:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	031b      	lsls	r3, r3, #12
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	4313      	orrs	r3, r2
 8005742:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a13      	ldr	r2, [pc, #76]	@ (8005794 <TIM_OC4_SetConfig+0xa8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d003      	beq.n	8005754 <TIM_OC4_SetConfig+0x68>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a12      	ldr	r2, [pc, #72]	@ (8005798 <TIM_OC4_SetConfig+0xac>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d109      	bne.n	8005768 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800575a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	019b      	lsls	r3, r3, #6
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	4313      	orrs	r3, r2
 8005766:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	621a      	str	r2, [r3, #32]
}
 8005782:	bf00      	nop
 8005784:	371c      	adds	r7, #28
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	feff8fff 	.word	0xfeff8fff
 8005794:	40010000 	.word	0x40010000
 8005798:	40010400 	.word	0x40010400

0800579c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800579c:	b480      	push	{r7}
 800579e:	b087      	sub	sp, #28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4b1b      	ldr	r3, [pc, #108]	@ (8005834 <TIM_OC5_SetConfig+0x98>)
 80057c8:	4013      	ands	r3, r2
 80057ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80057dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	041b      	lsls	r3, r3, #16
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a12      	ldr	r2, [pc, #72]	@ (8005838 <TIM_OC5_SetConfig+0x9c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d003      	beq.n	80057fa <TIM_OC5_SetConfig+0x5e>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a11      	ldr	r2, [pc, #68]	@ (800583c <TIM_OC5_SetConfig+0xa0>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d109      	bne.n	800580e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005800:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	021b      	lsls	r3, r3, #8
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	4313      	orrs	r3, r2
 800580c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	621a      	str	r2, [r3, #32]
}
 8005828:	bf00      	nop
 800582a:	371c      	adds	r7, #28
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	fffeff8f 	.word	0xfffeff8f
 8005838:	40010000 	.word	0x40010000
 800583c:	40010400 	.word	0x40010400

08005840 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	4b1c      	ldr	r3, [pc, #112]	@ (80058dc <TIM_OC6_SetConfig+0x9c>)
 800586c:	4013      	ands	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	021b      	lsls	r3, r3, #8
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	4313      	orrs	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005882:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	051b      	lsls	r3, r3, #20
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	4313      	orrs	r3, r2
 800588e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a13      	ldr	r2, [pc, #76]	@ (80058e0 <TIM_OC6_SetConfig+0xa0>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d003      	beq.n	80058a0 <TIM_OC6_SetConfig+0x60>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a12      	ldr	r2, [pc, #72]	@ (80058e4 <TIM_OC6_SetConfig+0xa4>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d109      	bne.n	80058b4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	029b      	lsls	r3, r3, #10
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	621a      	str	r2, [r3, #32]
}
 80058ce:	bf00      	nop
 80058d0:	371c      	adds	r7, #28
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	feff8fff 	.word	0xfeff8fff
 80058e0:	40010000 	.word	0x40010000
 80058e4:	40010400 	.word	0x40010400

080058e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	f023 0201 	bic.w	r2, r3, #1
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	4313      	orrs	r3, r2
 800591c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f023 030a 	bic.w	r3, r3, #10
 8005924:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	4313      	orrs	r3, r2
 800592c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	621a      	str	r2, [r3, #32]
}
 800593a:	bf00      	nop
 800593c:	371c      	adds	r7, #28
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005946:	b480      	push	{r7}
 8005948:	b087      	sub	sp, #28
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	f023 0210 	bic.w	r2, r3, #16
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005970:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	031b      	lsls	r3, r3, #12
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	4313      	orrs	r3, r2
 800597a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005982:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	011b      	lsls	r3, r3, #4
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	4313      	orrs	r3, r2
 800598c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	621a      	str	r2, [r3, #32]
}
 800599a:	bf00      	nop
 800599c:	371c      	adds	r7, #28
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b085      	sub	sp, #20
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
 80059ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	f043 0307 	orr.w	r3, r3, #7
 80059c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	609a      	str	r2, [r3, #8]
}
 80059d0:	bf00      	nop
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059dc:	b480      	push	{r7}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
 80059e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	021a      	lsls	r2, r3, #8
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	431a      	orrs	r2, r3
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	609a      	str	r2, [r3, #8]
}
 8005a10:	bf00      	nop
 8005a12:	371c      	adds	r7, #28
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b087      	sub	sp, #28
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f003 031f 	and.w	r3, r3, #31
 8005a2e:	2201      	movs	r2, #1
 8005a30:	fa02 f303 	lsl.w	r3, r2, r3
 8005a34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6a1a      	ldr	r2, [r3, #32]
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	43db      	mvns	r3, r3
 8005a3e:	401a      	ands	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6a1a      	ldr	r2, [r3, #32]
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f003 031f 	and.w	r3, r3, #31
 8005a4e:	6879      	ldr	r1, [r7, #4]
 8005a50:	fa01 f303 	lsl.w	r3, r1, r3
 8005a54:	431a      	orrs	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	621a      	str	r2, [r3, #32]
}
 8005a5a:	bf00      	nop
 8005a5c:	371c      	adds	r7, #28
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
	...

08005a68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d101      	bne.n	8005a80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	e06d      	b.n	8005b5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a30      	ldr	r2, [pc, #192]	@ (8005b68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d004      	beq.n	8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a2f      	ldr	r2, [pc, #188]	@ (8005b6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d108      	bne.n	8005ac6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005aba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005acc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a20      	ldr	r2, [pc, #128]	@ (8005b68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d022      	beq.n	8005b30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005af2:	d01d      	beq.n	8005b30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a1d      	ldr	r2, [pc, #116]	@ (8005b70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d018      	beq.n	8005b30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a1c      	ldr	r2, [pc, #112]	@ (8005b74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d013      	beq.n	8005b30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a1a      	ldr	r2, [pc, #104]	@ (8005b78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d00e      	beq.n	8005b30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a15      	ldr	r2, [pc, #84]	@ (8005b6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d009      	beq.n	8005b30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a16      	ldr	r2, [pc, #88]	@ (8005b7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d004      	beq.n	8005b30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a15      	ldr	r2, [pc, #84]	@ (8005b80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d10c      	bne.n	8005b4a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr
 8005b68:	40010000 	.word	0x40010000
 8005b6c:	40010400 	.word	0x40010400
 8005b70:	40000400 	.word	0x40000400
 8005b74:	40000800 	.word	0x40000800
 8005b78:	40000c00 	.word	0x40000c00
 8005b7c:	40014000 	.word	0x40014000
 8005b80:	40001800 	.word	0x40001800

08005b84 <memset>:
 8005b84:	4402      	add	r2, r0
 8005b86:	4603      	mov	r3, r0
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d100      	bne.n	8005b8e <memset+0xa>
 8005b8c:	4770      	bx	lr
 8005b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b92:	e7f9      	b.n	8005b88 <memset+0x4>

08005b94 <__libc_init_array>:
 8005b94:	b570      	push	{r4, r5, r6, lr}
 8005b96:	4d0d      	ldr	r5, [pc, #52]	@ (8005bcc <__libc_init_array+0x38>)
 8005b98:	4c0d      	ldr	r4, [pc, #52]	@ (8005bd0 <__libc_init_array+0x3c>)
 8005b9a:	1b64      	subs	r4, r4, r5
 8005b9c:	10a4      	asrs	r4, r4, #2
 8005b9e:	2600      	movs	r6, #0
 8005ba0:	42a6      	cmp	r6, r4
 8005ba2:	d109      	bne.n	8005bb8 <__libc_init_array+0x24>
 8005ba4:	4d0b      	ldr	r5, [pc, #44]	@ (8005bd4 <__libc_init_array+0x40>)
 8005ba6:	4c0c      	ldr	r4, [pc, #48]	@ (8005bd8 <__libc_init_array+0x44>)
 8005ba8:	f000 f818 	bl	8005bdc <_init>
 8005bac:	1b64      	subs	r4, r4, r5
 8005bae:	10a4      	asrs	r4, r4, #2
 8005bb0:	2600      	movs	r6, #0
 8005bb2:	42a6      	cmp	r6, r4
 8005bb4:	d105      	bne.n	8005bc2 <__libc_init_array+0x2e>
 8005bb6:	bd70      	pop	{r4, r5, r6, pc}
 8005bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bbc:	4798      	blx	r3
 8005bbe:	3601      	adds	r6, #1
 8005bc0:	e7ee      	b.n	8005ba0 <__libc_init_array+0xc>
 8005bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bc6:	4798      	blx	r3
 8005bc8:	3601      	adds	r6, #1
 8005bca:	e7f2      	b.n	8005bb2 <__libc_init_array+0x1e>
 8005bcc:	08005c0c 	.word	0x08005c0c
 8005bd0:	08005c0c 	.word	0x08005c0c
 8005bd4:	08005c0c 	.word	0x08005c0c
 8005bd8:	08005c10 	.word	0x08005c10

08005bdc <_init>:
 8005bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bde:	bf00      	nop
 8005be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005be2:	bc08      	pop	{r3}
 8005be4:	469e      	mov	lr, r3
 8005be6:	4770      	bx	lr

08005be8 <_fini>:
 8005be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bea:	bf00      	nop
 8005bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bee:	bc08      	pop	{r3}
 8005bf0:	469e      	mov	lr, r3
 8005bf2:	4770      	bx	lr
