
MODUL_000-00.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f04  080001e0  080001e0  000011e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080030e4  080030e4  000040e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030f4  080030f4  00005010  2**0
                  CONTENTS
  4 .ARM          00000008  080030f4  080030f4  000040f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030fc  080030fc  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030fc  080030fc  000040fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003100  08003100  00004100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003104  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000010  08003114  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08003114  00005124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0c7  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be7  00000000  00000000  00010107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00011cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000891  00000000  00000000  00012820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021e43  00000000  00000000  000130b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5b6  00000000  00000000  00034ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d70dc  00000000  00000000  000424aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00119586  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e58  00000000  00000000  001195cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0011c424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	080030cc 	.word	0x080030cc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	080030cc 	.word	0x080030cc

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000514:	4b17      	ldr	r3, [pc, #92]	@ (8000574 <MX_CAN1_Init+0x64>)
 8000516:	4a18      	ldr	r2, [pc, #96]	@ (8000578 <MX_CAN1_Init+0x68>)
 8000518:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800051a:	4b16      	ldr	r3, [pc, #88]	@ (8000574 <MX_CAN1_Init+0x64>)
 800051c:	2204      	movs	r2, #4
 800051e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000520:	4b14      	ldr	r3, [pc, #80]	@ (8000574 <MX_CAN1_Init+0x64>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000526:	4b13      	ldr	r3, [pc, #76]	@ (8000574 <MX_CAN1_Init+0x64>)
 8000528:	2200      	movs	r2, #0
 800052a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800052c:	4b11      	ldr	r3, [pc, #68]	@ (8000574 <MX_CAN1_Init+0x64>)
 800052e:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000532:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000534:	4b0f      	ldr	r3, [pc, #60]	@ (8000574 <MX_CAN1_Init+0x64>)
 8000536:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800053a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800053c:	4b0d      	ldr	r3, [pc, #52]	@ (8000574 <MX_CAN1_Init+0x64>)
 800053e:	2200      	movs	r2, #0
 8000540:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000542:	4b0c      	ldr	r3, [pc, #48]	@ (8000574 <MX_CAN1_Init+0x64>)
 8000544:	2200      	movs	r2, #0
 8000546:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000548:	4b0a      	ldr	r3, [pc, #40]	@ (8000574 <MX_CAN1_Init+0x64>)
 800054a:	2200      	movs	r2, #0
 800054c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800054e:	4b09      	ldr	r3, [pc, #36]	@ (8000574 <MX_CAN1_Init+0x64>)
 8000550:	2200      	movs	r2, #0
 8000552:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000554:	4b07      	ldr	r3, [pc, #28]	@ (8000574 <MX_CAN1_Init+0x64>)
 8000556:	2200      	movs	r2, #0
 8000558:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800055a:	4b06      	ldr	r3, [pc, #24]	@ (8000574 <MX_CAN1_Init+0x64>)
 800055c:	2200      	movs	r2, #0
 800055e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000560:	4804      	ldr	r0, [pc, #16]	@ (8000574 <MX_CAN1_Init+0x64>)
 8000562:	f000 fd3d 	bl	8000fe0 <HAL_CAN_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800056c:	f000 fbc4 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	2000002c 	.word	0x2000002c
 8000578:	40006400 	.word	0x40006400

0800057c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	@ 0x28
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a1f      	ldr	r2, [pc, #124]	@ (8000618 <HAL_CAN_MspInit+0x9c>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d138      	bne.n	8000610 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800059e:	4b1f      	ldr	r3, [pc, #124]	@ (800061c <HAL_CAN_MspInit+0xa0>)
 80005a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a2:	4a1e      	ldr	r2, [pc, #120]	@ (800061c <HAL_CAN_MspInit+0xa0>)
 80005a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80005aa:	4b1c      	ldr	r3, [pc, #112]	@ (800061c <HAL_CAN_MspInit+0xa0>)
 80005ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	4b19      	ldr	r3, [pc, #100]	@ (800061c <HAL_CAN_MspInit+0xa0>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	4a18      	ldr	r2, [pc, #96]	@ (800061c <HAL_CAN_MspInit+0xa0>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c2:	4b16      	ldr	r3, [pc, #88]	@ (800061c <HAL_CAN_MspInit+0xa0>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005ce:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80005d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d4:	2302      	movs	r3, #2
 80005d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005dc:	2303      	movs	r3, #3
 80005de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80005e0:	2309      	movs	r3, #9
 80005e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	4619      	mov	r1, r3
 80005ea:	480d      	ldr	r0, [pc, #52]	@ (8000620 <HAL_CAN_MspInit+0xa4>)
 80005ec:	f001 fc5a 	bl	8001ea4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2100      	movs	r1, #0
 80005f4:	2013      	movs	r0, #19
 80005f6:	f001 fc1e 	bl	8001e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80005fa:	2013      	movs	r0, #19
 80005fc:	f001 fc37 	bl	8001e6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000600:	2200      	movs	r2, #0
 8000602:	2100      	movs	r1, #0
 8000604:	2014      	movs	r0, #20
 8000606:	f001 fc16 	bl	8001e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800060a:	2014      	movs	r0, #20
 800060c:	f001 fc2f 	bl	8001e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000610:	bf00      	nop
 8000612:	3728      	adds	r7, #40	@ 0x28
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40006400 	.word	0x40006400
 800061c:	40023800 	.word	0x40023800
 8000620:	40020000 	.word	0x40020000

08000624 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <MX_GPIO_Init+0x2c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4a08      	ldr	r2, [pc, #32]	@ (8000650 <MX_GPIO_Init+0x2c>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
 8000636:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <MX_GPIO_Init+0x2c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]

}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800

08000654 <HAL_CAN_RxFifo0MsgPendingCallback>:
CAN_FilterTypeDef sFilterConfig;
CAN_RxHeaderTypeDef RxHeader;
uint8_t RxData[8] = {0};

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800065c:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 800065e:	4a07      	ldr	r2, [pc, #28]	@ (800067c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000660:	2100      	movs	r1, #0
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f000 ff95 	bl	8001592 <HAL_CAN_GetRxMessage>

	msg_flag = msg_flag || 0b00000100; //when Rx interrupt is activated, change flag - there is data that needs to be processed
 8000668:	4b05      	ldr	r3, [pc, #20]	@ (8000680 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800066a:	2201      	movs	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]

}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200000cc 	.word	0x200000cc
 800067c:	200000b0 	.word	0x200000b0
 8000680:	20000060 	.word	0x20000060

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000688:	f000 fc4d 	bl	8000f26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068c:	f000 fad8 	bl	8000c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000690:	f7ff ffc8 	bl	8000624 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000694:	f7ff ff3c 	bl	8000510 <MX_CAN1_Init>
  MX_TIM3_Init();
 8000698:	f000 fbae 	bl	8000df8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //KTM
  HAL_CAN_Start(&hcan1);
 800069c:	4876      	ldr	r0, [pc, #472]	@ (8000878 <main+0x1f4>)
 800069e:	f000 fe64 	bl	800136a <HAL_CAN_Start>

  //CAN bus Tx config
  TxHeader.DLC = 8;
 80006a2:	4b76      	ldr	r3, [pc, #472]	@ (800087c <main+0x1f8>)
 80006a4:	2208      	movs	r2, #8
 80006a6:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 80006a8:	4b74      	ldr	r3, [pc, #464]	@ (800087c <main+0x1f8>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 80006ae:	4b73      	ldr	r3, [pc, #460]	@ (800087c <main+0x1f8>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 127;
 80006b4:	4b71      	ldr	r3, [pc, #452]	@ (800087c <main+0x1f8>)
 80006b6:	227f      	movs	r2, #127	@ 0x7f
 80006b8:	601a      	str	r2, [r3, #0]

  //CAN bus Rx config
  sFilterConfig.FilterBank = 0;
 80006ba:	4b71      	ldr	r3, [pc, #452]	@ (8000880 <main+0x1fc>)
 80006bc:	2200      	movs	r2, #0
 80006be:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterIdLow = 0;
 80006c0:	4b6f      	ldr	r3, [pc, #444]	@ (8000880 <main+0x1fc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterIdHigh = 0;
 80006c6:	4b6e      	ldr	r3, [pc, #440]	@ (8000880 <main+0x1fc>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterMaskIdLow = 0;
 80006cc:	4b6c      	ldr	r3, [pc, #432]	@ (8000880 <main+0x1fc>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterMaskIdHigh = 0;
 80006d2:	4b6b      	ldr	r3, [pc, #428]	@ (8000880 <main+0x1fc>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80006d8:	4b69      	ldr	r3, [pc, #420]	@ (8000880 <main+0x1fc>)
 80006da:	2200      	movs	r2, #0
 80006dc:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80006de:	4b68      	ldr	r3, [pc, #416]	@ (8000880 <main+0x1fc>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80006e4:	4b66      	ldr	r3, [pc, #408]	@ (8000880 <main+0x1fc>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80006ea:	4b65      	ldr	r3, [pc, #404]	@ (8000880 <main+0x1fc>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]

  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80006f0:	4963      	ldr	r1, [pc, #396]	@ (8000880 <main+0x1fc>)
 80006f2:	4861      	ldr	r0, [pc, #388]	@ (8000878 <main+0x1f4>)
 80006f4:	f000 fd6f 	bl	80011d6 <HAL_CAN_ConfigFilter>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING);
 80006f8:	2110      	movs	r1, #16
 80006fa:	485f      	ldr	r0, [pc, #380]	@ (8000878 <main+0x1f4>)
 80006fc:	f001 f86b 	bl	80017d6 <HAL_CAN_ActivateNotification>
  while (1)
  {


	  //every 0.1s time_counter ++
	  if (!flags && __HAL_TIM_GET_COUNTER(&htim3) == htim3.Init.Period)
 8000700:	4b60      	ldr	r3, [pc, #384]	@ (8000884 <main+0x200>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d110      	bne.n	800072a <main+0xa6>
 8000708:	4b5f      	ldr	r3, [pc, #380]	@ (8000888 <main+0x204>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800070e:	4b5e      	ldr	r3, [pc, #376]	@ (8000888 <main+0x204>)
 8000710:	68db      	ldr	r3, [r3, #12]
 8000712:	429a      	cmp	r2, r3
 8000714:	d109      	bne.n	800072a <main+0xa6>
	  {
		  time_counter++;
 8000716:	4b5d      	ldr	r3, [pc, #372]	@ (800088c <main+0x208>)
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	3301      	adds	r3, #1
 800071c:	b29a      	uxth	r2, r3
 800071e:	4b5b      	ldr	r3, [pc, #364]	@ (800088c <main+0x208>)
 8000720:	801a      	strh	r2, [r3, #0]
		  flags = flags || 0b00000001; //put flag
 8000722:	4b58      	ldr	r3, [pc, #352]	@ (8000884 <main+0x200>)
 8000724:	2201      	movs	r2, #1
 8000726:	701a      	strb	r2, [r3, #0]
 8000728:	e014      	b.n	8000754 <main+0xd0>
	  }
	  else if (flags && __HAL_TIM_GET_COUNTER(&htim3) != htim3.Init.Period)
 800072a:	4b56      	ldr	r3, [pc, #344]	@ (8000884 <main+0x200>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d010      	beq.n	8000754 <main+0xd0>
 8000732:	4b55      	ldr	r3, [pc, #340]	@ (8000888 <main+0x204>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000738:	4b53      	ldr	r3, [pc, #332]	@ (8000888 <main+0x204>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	429a      	cmp	r2, r3
 800073e:	d009      	beq.n	8000754 <main+0xd0>
	  {
		  flags = flags && 0b11111110; //reset flag
 8000740:	4b50      	ldr	r3, [pc, #320]	@ (8000884 <main+0x200>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	bf14      	ite	ne
 8000748:	2301      	movne	r3, #1
 800074a:	2300      	moveq	r3, #0
 800074c:	b2db      	uxtb	r3, r3
 800074e:	461a      	mov	r2, r3
 8000750:	4b4c      	ldr	r3, [pc, #304]	@ (8000884 <main+0x200>)
 8000752:	701a      	strb	r2, [r3, #0]

	  //PWM init value == 50(25+25)
	  //PWM signal sequence ---> 25->50->75->50->repeat

	  //every 30 sec change PWM and request data from modul 004-00
	  if ((time_counter % 300 == 0) && (flags >> 1))
 8000754:	4b4d      	ldr	r3, [pc, #308]	@ (800088c <main+0x208>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	4a4d      	ldr	r2, [pc, #308]	@ (8000890 <main+0x20c>)
 800075a:	fba2 1203 	umull	r1, r2, r2, r3
 800075e:	0952      	lsrs	r2, r2, #5
 8000760:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000764:	fb01 f202 	mul.w	r2, r1, r2
 8000768:	1a9b      	subs	r3, r3, r2
 800076a:	b29b      	uxth	r3, r3
 800076c:	2b00      	cmp	r3, #0
 800076e:	d14d      	bne.n	800080c <main+0x188>
 8000770:	4b44      	ldr	r3, [pc, #272]	@ (8000884 <main+0x200>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	085b      	lsrs	r3, r3, #1
 8000776:	b2db      	uxtb	r3, r3
 8000778:	2b00      	cmp	r3, #0
 800077a:	d047      	beq.n	800080c <main+0x188>
	  {
		  if (booleans >> 7)
 800077c:	4b45      	ldr	r3, [pc, #276]	@ (8000894 <main+0x210>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	b25b      	sxtb	r3, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	da17      	bge.n	80007b6 <main+0x132>
		  {
			  PWM += 25;
 8000786:	4b44      	ldr	r3, [pc, #272]	@ (8000898 <main+0x214>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	3319      	adds	r3, #25
 800078c:	b29a      	uxth	r2, r3
 800078e:	4b42      	ldr	r3, [pc, #264]	@ (8000898 <main+0x214>)
 8000790:	801a      	strh	r2, [r3, #0]
			  if (PWM > 75)
 8000792:	4b41      	ldr	r3, [pc, #260]	@ (8000898 <main+0x214>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	2b4b      	cmp	r3, #75	@ 0x4b
 8000798:	d91d      	bls.n	80007d6 <main+0x152>
			  {
				  PWM = 75;
 800079a:	4b3f      	ldr	r3, [pc, #252]	@ (8000898 <main+0x214>)
 800079c:	224b      	movs	r2, #75	@ 0x4b
 800079e:	801a      	strh	r2, [r3, #0]
				  booleans = booleans && 0b00111111; //change PWM seq to fall
 80007a0:	4b3c      	ldr	r3, [pc, #240]	@ (8000894 <main+0x210>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	bf14      	ite	ne
 80007a8:	2301      	movne	r3, #1
 80007aa:	2300      	moveq	r3, #0
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	461a      	mov	r2, r3
 80007b0:	4b38      	ldr	r3, [pc, #224]	@ (8000894 <main+0x210>)
 80007b2:	701a      	strb	r2, [r3, #0]
 80007b4:	e00f      	b.n	80007d6 <main+0x152>
			  }
		  }
		  else
		  {
			  PWM -= 25;
 80007b6:	4b38      	ldr	r3, [pc, #224]	@ (8000898 <main+0x214>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	3b19      	subs	r3, #25
 80007bc:	b29a      	uxth	r2, r3
 80007be:	4b36      	ldr	r3, [pc, #216]	@ (8000898 <main+0x214>)
 80007c0:	801a      	strh	r2, [r3, #0]
			  if (PWM < 25)
 80007c2:	4b35      	ldr	r3, [pc, #212]	@ (8000898 <main+0x214>)
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	2b18      	cmp	r3, #24
 80007c8:	d805      	bhi.n	80007d6 <main+0x152>
			  {
				  PWM = 25;
 80007ca:	4b33      	ldr	r3, [pc, #204]	@ (8000898 <main+0x214>)
 80007cc:	2219      	movs	r2, #25
 80007ce:	801a      	strh	r2, [r3, #0]
				  booleans = booleans || 0b11000000; //change PWM seq to rise
 80007d0:	4b30      	ldr	r3, [pc, #192]	@ (8000894 <main+0x210>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	701a      	strb	r2, [r3, #0]
			  }
		  }


		  PWM_send = ((PWM/100) * 3900 + 100);
 80007d6:	4b30      	ldr	r3, [pc, #192]	@ (8000898 <main+0x214>)
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	4a30      	ldr	r2, [pc, #192]	@ (800089c <main+0x218>)
 80007dc:	fba2 2303 	umull	r2, r3, r2, r3
 80007e0:	095b      	lsrs	r3, r3, #5
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	461a      	mov	r2, r3
 80007e6:	0112      	lsls	r2, r2, #4
 80007e8:	1ad3      	subs	r3, r2, r3
 80007ea:	461a      	mov	r2, r3
 80007ec:	0191      	lsls	r1, r2, #6
 80007ee:	461a      	mov	r2, r3
 80007f0:	460b      	mov	r3, r1
 80007f2:	4413      	add	r3, r2
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	3364      	adds	r3, #100	@ 0x64
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	4b28      	ldr	r3, [pc, #160]	@ (80008a0 <main+0x21c>)
 80007fe:	801a      	strh	r2, [r3, #0]

		  msg_flag = msg_flag || 0b00001001; //needs to send changed data and needs to request data
 8000800:	4b28      	ldr	r3, [pc, #160]	@ (80008a4 <main+0x220>)
 8000802:	2201      	movs	r2, #1
 8000804:	701a      	strb	r2, [r3, #0]
		  flags = flags || 0b00000010; //put on the flag
 8000806:	4b1f      	ldr	r3, [pc, #124]	@ (8000884 <main+0x200>)
 8000808:	2201      	movs	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
	  }

	  //every 10 sec change PWM
	  if ((time_counter % 100 == 0) && (flags >> 1) && (flags >> 2))
 800080c:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <main+0x208>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	4a22      	ldr	r2, [pc, #136]	@ (800089c <main+0x218>)
 8000812:	fba2 1203 	umull	r1, r2, r2, r3
 8000816:	0952      	lsrs	r2, r2, #5
 8000818:	2164      	movs	r1, #100	@ 0x64
 800081a:	fb01 f202 	mul.w	r2, r1, r2
 800081e:	1a9b      	subs	r3, r3, r2
 8000820:	b29b      	uxth	r3, r3
 8000822:	2b00      	cmp	r3, #0
 8000824:	d16b      	bne.n	80008fe <main+0x27a>
 8000826:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <main+0x200>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	085b      	lsrs	r3, r3, #1
 800082c:	b2db      	uxtb	r3, r3
 800082e:	2b00      	cmp	r3, #0
 8000830:	d065      	beq.n	80008fe <main+0x27a>
 8000832:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <main+0x200>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	089b      	lsrs	r3, r3, #2
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d05f      	beq.n	80008fe <main+0x27a>
	  {
		  if (booleans >> 7)
 800083e:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <main+0x210>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	b25b      	sxtb	r3, r3
 8000844:	2b00      	cmp	r3, #0
 8000846:	da2f      	bge.n	80008a8 <main+0x224>
		  {
			  PWM += 25;
 8000848:	4b13      	ldr	r3, [pc, #76]	@ (8000898 <main+0x214>)
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	3319      	adds	r3, #25
 800084e:	b29a      	uxth	r2, r3
 8000850:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <main+0x214>)
 8000852:	801a      	strh	r2, [r3, #0]
			  if (PWM > 75)
 8000854:	4b10      	ldr	r3, [pc, #64]	@ (8000898 <main+0x214>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	2b4b      	cmp	r3, #75	@ 0x4b
 800085a:	d935      	bls.n	80008c8 <main+0x244>
			  {
				  PWM = 75;
 800085c:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <main+0x214>)
 800085e:	224b      	movs	r2, #75	@ 0x4b
 8000860:	801a      	strh	r2, [r3, #0]
				  booleans = booleans && 0b00111111; //change PWM seq to fall
 8000862:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <main+0x210>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	bf14      	ite	ne
 800086a:	2301      	movne	r3, #1
 800086c:	2300      	moveq	r3, #0
 800086e:	b2db      	uxtb	r3, r3
 8000870:	461a      	mov	r2, r3
 8000872:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <main+0x210>)
 8000874:	701a      	strb	r2, [r3, #0]
 8000876:	e027      	b.n	80008c8 <main+0x244>
 8000878:	2000002c 	.word	0x2000002c
 800087c:	20000064 	.word	0x20000064
 8000880:	20000088 	.word	0x20000088
 8000884:	20000054 	.word	0x20000054
 8000888:	200000d4 	.word	0x200000d4
 800088c:	20000058 	.word	0x20000058
 8000890:	1b4e81b5 	.word	0x1b4e81b5
 8000894:	20000055 	.word	0x20000055
 8000898:	20000000 	.word	0x20000000
 800089c:	51eb851f 	.word	0x51eb851f
 80008a0:	20000056 	.word	0x20000056
 80008a4:	20000060 	.word	0x20000060
			  }
		  }
		  else
		  {
			  PWM -= 25;
 80008a8:	4ba0      	ldr	r3, [pc, #640]	@ (8000b2c <main+0x4a8>)
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	3b19      	subs	r3, #25
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	4b9e      	ldr	r3, [pc, #632]	@ (8000b2c <main+0x4a8>)
 80008b2:	801a      	strh	r2, [r3, #0]
			  if (PWM < 25)
 80008b4:	4b9d      	ldr	r3, [pc, #628]	@ (8000b2c <main+0x4a8>)
 80008b6:	881b      	ldrh	r3, [r3, #0]
 80008b8:	2b18      	cmp	r3, #24
 80008ba:	d805      	bhi.n	80008c8 <main+0x244>
			  {
				  PWM = 25;
 80008bc:	4b9b      	ldr	r3, [pc, #620]	@ (8000b2c <main+0x4a8>)
 80008be:	2219      	movs	r2, #25
 80008c0:	801a      	strh	r2, [r3, #0]
				  booleans = booleans || 0b11000000; //change PWM seq to rise
 80008c2:	4b9b      	ldr	r3, [pc, #620]	@ (8000b30 <main+0x4ac>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	701a      	strb	r2, [r3, #0]
			  }
		  }


		  PWM_send = ((PWM/100) * 3900 + 100);
 80008c8:	4b98      	ldr	r3, [pc, #608]	@ (8000b2c <main+0x4a8>)
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	4a99      	ldr	r2, [pc, #612]	@ (8000b34 <main+0x4b0>)
 80008ce:	fba2 2303 	umull	r2, r3, r2, r3
 80008d2:	095b      	lsrs	r3, r3, #5
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	461a      	mov	r2, r3
 80008d8:	0112      	lsls	r2, r2, #4
 80008da:	1ad3      	subs	r3, r2, r3
 80008dc:	461a      	mov	r2, r3
 80008de:	0191      	lsls	r1, r2, #6
 80008e0:	461a      	mov	r2, r3
 80008e2:	460b      	mov	r3, r1
 80008e4:	4413      	add	r3, r2
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	3364      	adds	r3, #100	@ 0x64
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	4b92      	ldr	r3, [pc, #584]	@ (8000b38 <main+0x4b4>)
 80008f0:	801a      	strh	r2, [r3, #0]

		  msg_flag = msg_flag || 0b00000001; //needs to send changed data
 80008f2:	4b92      	ldr	r3, [pc, #584]	@ (8000b3c <main+0x4b8>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	701a      	strb	r2, [r3, #0]
		  flags = flags || 0b00000100; //put on the flag
 80008f8:	4b91      	ldr	r3, [pc, #580]	@ (8000b40 <main+0x4bc>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	701a      	strb	r2, [r3, #0]
	  }

	  //every 1.5 sec request data from modul 004-00
	  if ((time_counter % 15 == 0) && (flags >> 1) && (flags >> 3))
 80008fe:	4b91      	ldr	r3, [pc, #580]	@ (8000b44 <main+0x4c0>)
 8000900:	881a      	ldrh	r2, [r3, #0]
 8000902:	4b91      	ldr	r3, [pc, #580]	@ (8000b48 <main+0x4c4>)
 8000904:	fba3 1302 	umull	r1, r3, r3, r2
 8000908:	08d9      	lsrs	r1, r3, #3
 800090a:	460b      	mov	r3, r1
 800090c:	011b      	lsls	r3, r3, #4
 800090e:	1a5b      	subs	r3, r3, r1
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	b29b      	uxth	r3, r3
 8000914:	2b00      	cmp	r3, #0
 8000916:	d111      	bne.n	800093c <main+0x2b8>
 8000918:	4b89      	ldr	r3, [pc, #548]	@ (8000b40 <main+0x4bc>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	b2db      	uxtb	r3, r3
 8000920:	2b00      	cmp	r3, #0
 8000922:	d00b      	beq.n	800093c <main+0x2b8>
 8000924:	4b86      	ldr	r3, [pc, #536]	@ (8000b40 <main+0x4bc>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	08db      	lsrs	r3, r3, #3
 800092a:	b2db      	uxtb	r3, r3
 800092c:	2b00      	cmp	r3, #0
 800092e:	d005      	beq.n	800093c <main+0x2b8>
	  {
		  msg_flag = msg_flag || 0b00001000; //needs to request data
 8000930:	4b82      	ldr	r3, [pc, #520]	@ (8000b3c <main+0x4b8>)
 8000932:	2201      	movs	r2, #1
 8000934:	701a      	strb	r2, [r3, #0]
		  flags = flags || 0b00001000; //put on the flag
 8000936:	4b82      	ldr	r3, [pc, #520]	@ (8000b40 <main+0x4bc>)
 8000938:	2201      	movs	r2, #1
 800093a:	701a      	strb	r2, [r3, #0]
	  }

	  //reset flags
	  if ((time_counter % 300 == 1) && (flags >> 1))
 800093c:	4b81      	ldr	r3, [pc, #516]	@ (8000b44 <main+0x4c0>)
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	4a82      	ldr	r2, [pc, #520]	@ (8000b4c <main+0x4c8>)
 8000942:	fba2 1203 	umull	r1, r2, r2, r3
 8000946:	0952      	lsrs	r2, r2, #5
 8000948:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800094c:	fb01 f202 	mul.w	r2, r1, r2
 8000950:	1a9b      	subs	r3, r3, r2
 8000952:	b29b      	uxth	r3, r3
 8000954:	2b01      	cmp	r3, #1
 8000956:	d10f      	bne.n	8000978 <main+0x2f4>
 8000958:	4b79      	ldr	r3, [pc, #484]	@ (8000b40 <main+0x4bc>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	085b      	lsrs	r3, r3, #1
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2b00      	cmp	r3, #0
 8000962:	d009      	beq.n	8000978 <main+0x2f4>
	  {
		  flags = flags && 0b111110001; //reset flags 1,2,3 (dont change flag0)
 8000964:	4b76      	ldr	r3, [pc, #472]	@ (8000b40 <main+0x4bc>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	bf14      	ite	ne
 800096c:	2301      	movne	r3, #1
 800096e:	2300      	moveq	r3, #0
 8000970:	b2db      	uxtb	r3, r3
 8000972:	461a      	mov	r2, r3
 8000974:	4b72      	ldr	r3, [pc, #456]	@ (8000b40 <main+0x4bc>)
 8000976:	701a      	strb	r2, [r3, #0]
	  }
	  if ((time_counter % 100 == 1) && (flags >> 2))
 8000978:	4b72      	ldr	r3, [pc, #456]	@ (8000b44 <main+0x4c0>)
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	4a6d      	ldr	r2, [pc, #436]	@ (8000b34 <main+0x4b0>)
 800097e:	fba2 1203 	umull	r1, r2, r2, r3
 8000982:	0952      	lsrs	r2, r2, #5
 8000984:	2164      	movs	r1, #100	@ 0x64
 8000986:	fb01 f202 	mul.w	r2, r1, r2
 800098a:	1a9b      	subs	r3, r3, r2
 800098c:	b29b      	uxth	r3, r3
 800098e:	2b01      	cmp	r3, #1
 8000990:	d10f      	bne.n	80009b2 <main+0x32e>
 8000992:	4b6b      	ldr	r3, [pc, #428]	@ (8000b40 <main+0x4bc>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	089b      	lsrs	r3, r3, #2
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b00      	cmp	r3, #0
 800099c:	d009      	beq.n	80009b2 <main+0x32e>
	  {
		  flags = flags && 0b111111011; //reset flag 2
 800099e:	4b68      	ldr	r3, [pc, #416]	@ (8000b40 <main+0x4bc>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	bf14      	ite	ne
 80009a6:	2301      	movne	r3, #1
 80009a8:	2300      	moveq	r3, #0
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b64      	ldr	r3, [pc, #400]	@ (8000b40 <main+0x4bc>)
 80009b0:	701a      	strb	r2, [r3, #0]
	  }
	  if ((time_counter % 100 == 1) && (flags >> 3))
 80009b2:	4b64      	ldr	r3, [pc, #400]	@ (8000b44 <main+0x4c0>)
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	4a5f      	ldr	r2, [pc, #380]	@ (8000b34 <main+0x4b0>)
 80009b8:	fba2 1203 	umull	r1, r2, r2, r3
 80009bc:	0952      	lsrs	r2, r2, #5
 80009be:	2164      	movs	r1, #100	@ 0x64
 80009c0:	fb01 f202 	mul.w	r2, r1, r2
 80009c4:	1a9b      	subs	r3, r3, r2
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d10f      	bne.n	80009ec <main+0x368>
 80009cc:	4b5c      	ldr	r3, [pc, #368]	@ (8000b40 <main+0x4bc>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	08db      	lsrs	r3, r3, #3
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d009      	beq.n	80009ec <main+0x368>
	  {
		  flags = flags && 0b111110111; //reset flag 3
 80009d8:	4b59      	ldr	r3, [pc, #356]	@ (8000b40 <main+0x4bc>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	bf14      	ite	ne
 80009e0:	2301      	movne	r3, #1
 80009e2:	2300      	moveq	r3, #0
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	461a      	mov	r2, r3
 80009e8:	4b55      	ldr	r3, [pc, #340]	@ (8000b40 <main+0x4bc>)
 80009ea:	701a      	strb	r2, [r3, #0]
	  }


	  //CAN communication
	  //send data
	  if (msg_flag)
 80009ec:	4b53      	ldr	r3, [pc, #332]	@ (8000b3c <main+0x4b8>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d042      	beq.n	8000a7a <main+0x3f6>
	  {
		  TxData[0] = 0b11110000; //package contains data
 80009f4:	4b56      	ldr	r3, [pc, #344]	@ (8000b50 <main+0x4cc>)
 80009f6:	22f0      	movs	r2, #240	@ 0xf0
 80009f8:	701a      	strb	r2, [r3, #0]


		  TxData[1] = 0b00000000;
 80009fa:	4b55      	ldr	r3, [pc, #340]	@ (8000b50 <main+0x4cc>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	705a      	strb	r2, [r3, #1]
		  if (booleans)
 8000a00:	4b4b      	ldr	r3, [pc, #300]	@ (8000b30 <main+0x4ac>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d002      	beq.n	8000a0e <main+0x38a>
		  {
			  TxData[1] = TxData[1] || 0b00000011; //actuator normal direction
 8000a08:	4b51      	ldr	r3, [pc, #324]	@ (8000b50 <main+0x4cc>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	705a      	strb	r2, [r3, #1]
		  }
		  if (booleans >> 5)
 8000a0e:	4b48      	ldr	r3, [pc, #288]	@ (8000b30 <main+0x4ac>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	095b      	lsrs	r3, r3, #5
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d002      	beq.n	8000a20 <main+0x39c>
		  {
			  TxData[1] = TxData[1] || 0b00110000; //actuator is on
 8000a1a:	4b4d      	ldr	r3, [pc, #308]	@ (8000b50 <main+0x4cc>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	705a      	strb	r2, [r3, #1]
		  }


		  TxData[6] = PWM_send; //
 8000a20:	4b45      	ldr	r3, [pc, #276]	@ (8000b38 <main+0x4b4>)
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4b4a      	ldr	r3, [pc, #296]	@ (8000b50 <main+0x4cc>)
 8000a28:	719a      	strb	r2, [r3, #6]


		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailBox);
 8000a2a:	4b4a      	ldr	r3, [pc, #296]	@ (8000b54 <main+0x4d0>)
 8000a2c:	4a48      	ldr	r2, [pc, #288]	@ (8000b50 <main+0x4cc>)
 8000a2e:	494a      	ldr	r1, [pc, #296]	@ (8000b58 <main+0x4d4>)
 8000a30:	484a      	ldr	r0, [pc, #296]	@ (8000b5c <main+0x4d8>)
 8000a32:	f000 fcde 	bl	80013f2 <HAL_CAN_AddTxMessage>
		  msg_flag = msg_flag && 0b11111110; //there is no more need to send data
 8000a36:	4b41      	ldr	r3, [pc, #260]	@ (8000b3c <main+0x4b8>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	bf14      	ite	ne
 8000a3e:	2301      	movne	r3, #1
 8000a40:	2300      	moveq	r3, #0
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b3d      	ldr	r3, [pc, #244]	@ (8000b3c <main+0x4b8>)
 8000a48:	701a      	strb	r2, [r3, #0]

		  TxData[0] = 0; //set array to 0
 8000a4a:	4b41      	ldr	r3, [pc, #260]	@ (8000b50 <main+0x4cc>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
		  TxData[1] = 0;
 8000a50:	4b3f      	ldr	r3, [pc, #252]	@ (8000b50 <main+0x4cc>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	705a      	strb	r2, [r3, #1]
		  TxData[2] = 0;
 8000a56:	4b3e      	ldr	r3, [pc, #248]	@ (8000b50 <main+0x4cc>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	709a      	strb	r2, [r3, #2]
		  TxData[3] = 0;
 8000a5c:	4b3c      	ldr	r3, [pc, #240]	@ (8000b50 <main+0x4cc>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	70da      	strb	r2, [r3, #3]
		  TxData[4] = 0;
 8000a62:	4b3b      	ldr	r3, [pc, #236]	@ (8000b50 <main+0x4cc>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	711a      	strb	r2, [r3, #4]
		  TxData[5] = 0;
 8000a68:	4b39      	ldr	r3, [pc, #228]	@ (8000b50 <main+0x4cc>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	715a      	strb	r2, [r3, #5]
		  TxData[6] = 0;
 8000a6e:	4b38      	ldr	r3, [pc, #224]	@ (8000b50 <main+0x4cc>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	719a      	strb	r2, [r3, #6]
		  TxData[7] = 0;
 8000a74:	4b36      	ldr	r3, [pc, #216]	@ (8000b50 <main+0x4cc>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	71da      	strb	r2, [r3, #7]
	  }
	  if (msg_flag >> 3) //needs to send request
 8000a7a:	4b30      	ldr	r3, [pc, #192]	@ (8000b3c <main+0x4b8>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	08db      	lsrs	r3, r3, #3
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d02a      	beq.n	8000adc <main+0x458>
	  {
		  TxData[0] = 0b00001111; //package contains data request
 8000a86:	4b32      	ldr	r3, [pc, #200]	@ (8000b50 <main+0x4cc>)
 8000a88:	220f      	movs	r2, #15
 8000a8a:	701a      	strb	r2, [r3, #0]

		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailBox);
 8000a8c:	4b31      	ldr	r3, [pc, #196]	@ (8000b54 <main+0x4d0>)
 8000a8e:	4a30      	ldr	r2, [pc, #192]	@ (8000b50 <main+0x4cc>)
 8000a90:	4931      	ldr	r1, [pc, #196]	@ (8000b58 <main+0x4d4>)
 8000a92:	4832      	ldr	r0, [pc, #200]	@ (8000b5c <main+0x4d8>)
 8000a94:	f000 fcad 	bl	80013f2 <HAL_CAN_AddTxMessage>
		  msg_flag = msg_flag && 0b11110111; //there is no more need to send data
 8000a98:	4b28      	ldr	r3, [pc, #160]	@ (8000b3c <main+0x4b8>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	bf14      	ite	ne
 8000aa0:	2301      	movne	r3, #1
 8000aa2:	2300      	moveq	r3, #0
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	4b24      	ldr	r3, [pc, #144]	@ (8000b3c <main+0x4b8>)
 8000aaa:	701a      	strb	r2, [r3, #0]

		  TxData[0] = 0; //set array to 0
 8000aac:	4b28      	ldr	r3, [pc, #160]	@ (8000b50 <main+0x4cc>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
		  TxData[1] = 0;
 8000ab2:	4b27      	ldr	r3, [pc, #156]	@ (8000b50 <main+0x4cc>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	705a      	strb	r2, [r3, #1]
		  TxData[2] = 0;
 8000ab8:	4b25      	ldr	r3, [pc, #148]	@ (8000b50 <main+0x4cc>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	709a      	strb	r2, [r3, #2]
		  TxData[3] = 0;
 8000abe:	4b24      	ldr	r3, [pc, #144]	@ (8000b50 <main+0x4cc>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	70da      	strb	r2, [r3, #3]
		  TxData[4] = 0;
 8000ac4:	4b22      	ldr	r3, [pc, #136]	@ (8000b50 <main+0x4cc>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	711a      	strb	r2, [r3, #4]
		  TxData[5] = 0;
 8000aca:	4b21      	ldr	r3, [pc, #132]	@ (8000b50 <main+0x4cc>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	715a      	strb	r2, [r3, #5]
		  TxData[6] = 0;
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b50 <main+0x4cc>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	719a      	strb	r2, [r3, #6]
		  TxData[7] = 0;
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b50 <main+0x4cc>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	71da      	strb	r2, [r3, #7]
	  }

	  if (msg_flag >> 2) //there is unprocessed received data
 8000adc:	4b17      	ldr	r3, [pc, #92]	@ (8000b3c <main+0x4b8>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	089b      	lsrs	r3, r3, #2
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d01b      	beq.n	8000b20 <main+0x49c>
	  {
		  if (RxData[0] >> 1) //last 4 bits of RxData[0] high ---> needs to send data
 8000ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b60 <main+0x4dc>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	085b      	lsrs	r3, r3, #1
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d002      	beq.n	8000afa <main+0x476>
		  {
			  msg_flag = msg_flag || 0b00000001;
 8000af4:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <main+0x4b8>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
		  }

		  if (RxData[0] >> 5) //first 4 bits of RxData[0] high ---> there is recieved data
 8000afa:	4b19      	ldr	r3, [pc, #100]	@ (8000b60 <main+0x4dc>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	095b      	lsrs	r3, r3, #5
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d002      	beq.n	8000b0c <main+0x488>
		  {
			  msg_flag = msg_flag || 0b00000010;
 8000b06:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <main+0x4b8>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	701a      	strb	r2, [r3, #0]
		  }

		  msg_flag = msg_flag && 11111011; //reset flag
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b3c <main+0x4b8>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	bf14      	ite	ne
 8000b14:	2301      	movne	r3, #1
 8000b16:	2300      	moveq	r3, #0
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	4b07      	ldr	r3, [pc, #28]	@ (8000b3c <main+0x4b8>)
 8000b1e:	701a      	strb	r2, [r3, #0]
	  }

	  if (msg_flag >> 1) //if there is recieved data, process it
 8000b20:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <main+0x4b8>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	085b      	lsrs	r3, r3, #1
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	e01b      	b.n	8000b64 <main+0x4e0>
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	20000055 	.word	0x20000055
 8000b34:	51eb851f 	.word	0x51eb851f
 8000b38:	20000056 	.word	0x20000056
 8000b3c:	20000060 	.word	0x20000060
 8000b40:	20000054 	.word	0x20000054
 8000b44:	20000058 	.word	0x20000058
 8000b48:	88888889 	.word	0x88888889
 8000b4c:	1b4e81b5 	.word	0x1b4e81b5
 8000b50:	20000080 	.word	0x20000080
 8000b54:	2000007c 	.word	0x2000007c
 8000b58:	20000064 	.word	0x20000064
 8000b5c:	2000002c 	.word	0x2000002c
 8000b60:	200000cc 	.word	0x200000cc
 8000b64:	f43f adcc 	beq.w	8000700 <main+0x7c>
	  {
		  if (RxData[1] >> 1) //actuator direction is set to reverse
 8000b68:	4b31      	ldr	r3, [pc, #196]	@ (8000c30 <main+0x5ac>)
 8000b6a:	785b      	ldrb	r3, [r3, #1]
 8000b6c:	085b      	lsrs	r3, r3, #1
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d003      	beq.n	8000b7c <main+0x4f8>
		  {
			  booleans = booleans || 0b00000011;
 8000b74:	4b2f      	ldr	r3, [pc, #188]	@ (8000c34 <main+0x5b0>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	701a      	strb	r2, [r3, #0]
 8000b7a:	e009      	b.n	8000b90 <main+0x50c>
		  }
		  else //actuator direction is set to normal
		  {
			  booleans = booleans && 0b11111100;
 8000b7c:	4b2d      	ldr	r3, [pc, #180]	@ (8000c34 <main+0x5b0>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	bf14      	ite	ne
 8000b84:	2301      	movne	r3, #1
 8000b86:	2300      	moveq	r3, #0
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	4b29      	ldr	r3, [pc, #164]	@ (8000c34 <main+0x5b0>)
 8000b8e:	701a      	strb	r2, [r3, #0]
		  }
		  if (RxData[1] >> 3) //current is reverse
 8000b90:	4b27      	ldr	r3, [pc, #156]	@ (8000c30 <main+0x5ac>)
 8000b92:	785b      	ldrb	r3, [r3, #1]
 8000b94:	08db      	lsrs	r3, r3, #3
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d003      	beq.n	8000ba4 <main+0x520>
		  {
			  booleans = booleans || 0b00001100;
 8000b9c:	4b25      	ldr	r3, [pc, #148]	@ (8000c34 <main+0x5b0>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	701a      	strb	r2, [r3, #0]
 8000ba2:	e009      	b.n	8000bb8 <main+0x534>
		  }
		  else //current is normal
		  {
			  booleans = booleans && 0b11110011;
 8000ba4:	4b23      	ldr	r3, [pc, #140]	@ (8000c34 <main+0x5b0>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	bf14      	ite	ne
 8000bac:	2301      	movne	r3, #1
 8000bae:	2300      	moveq	r3, #0
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c34 <main+0x5b0>)
 8000bb6:	701a      	strb	r2, [r3, #0]
		  }

		  if (RxData[1] >> 5) //actuator is turned on
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c30 <main+0x5ac>)
 8000bba:	785b      	ldrb	r3, [r3, #1]
 8000bbc:	095b      	lsrs	r3, r3, #5
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d003      	beq.n	8000bcc <main+0x548>
		  {
			  booleans = booleans || 0b00110000;
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c34 <main+0x5b0>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	701a      	strb	r2, [r3, #0]
 8000bca:	e009      	b.n	8000be0 <main+0x55c>
		  }
		  else //actuator is turned off
		  {
			  booleans = booleans && 0b11001111;
 8000bcc:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <main+0x5b0>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	bf14      	ite	ne
 8000bd4:	2301      	movne	r3, #1
 8000bd6:	2300      	moveq	r3, #0
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <main+0x5b0>)
 8000bde:	701a      	strb	r2, [r3, #0]
		  }

		  //PWM_input = 0;
		  current = RxData[2];
 8000be0:	4b13      	ldr	r3, [pc, #76]	@ (8000c30 <main+0x5ac>)
 8000be2:	789b      	ldrb	r3, [r3, #2]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <main+0x5b4>)
 8000be8:	601a      	str	r2, [r3, #0]
		  //PWM_input = PWM_input << 8;
		  //PWM_input = PWM_input || RxData[7]

		  msg_flag = msg_flag && 0b11111101; //there is no more need to process data
 8000bea:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <main+0x5b8>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	bf14      	ite	ne
 8000bf2:	2301      	movne	r3, #1
 8000bf4:	2300      	moveq	r3, #0
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b10      	ldr	r3, [pc, #64]	@ (8000c3c <main+0x5b8>)
 8000bfc:	701a      	strb	r2, [r3, #0]
		  RxData[0] = 0; //set array to 0
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <main+0x5ac>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]
		  RxData[1] = 0;
 8000c04:	4b0a      	ldr	r3, [pc, #40]	@ (8000c30 <main+0x5ac>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	705a      	strb	r2, [r3, #1]
		  RxData[2] = 0;
 8000c0a:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <main+0x5ac>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	709a      	strb	r2, [r3, #2]
		  RxData[3] = 0;
 8000c10:	4b07      	ldr	r3, [pc, #28]	@ (8000c30 <main+0x5ac>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	70da      	strb	r2, [r3, #3]
		  RxData[4] = 0;
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <main+0x5ac>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	711a      	strb	r2, [r3, #4]
		  RxData[5] = 0;
 8000c1c:	4b04      	ldr	r3, [pc, #16]	@ (8000c30 <main+0x5ac>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	715a      	strb	r2, [r3, #5]
		  RxData[6] = 0;
 8000c22:	4b03      	ldr	r3, [pc, #12]	@ (8000c30 <main+0x5ac>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	719a      	strb	r2, [r3, #6]
		  RxData[7] = 0;
 8000c28:	4b01      	ldr	r3, [pc, #4]	@ (8000c30 <main+0x5ac>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	71da      	strb	r2, [r3, #7]
	  if (!flags && __HAL_TIM_GET_COUNTER(&htim3) == htim3.Init.Period)
 8000c2e:	e567      	b.n	8000700 <main+0x7c>
 8000c30:	200000cc 	.word	0x200000cc
 8000c34:	20000055 	.word	0x20000055
 8000c38:	2000005c 	.word	0x2000005c
 8000c3c:	20000060 	.word	0x20000060

08000c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b094      	sub	sp, #80	@ 0x50
 8000c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c46:	f107 0320 	add.w	r3, r7, #32
 8000c4a:	2230      	movs	r2, #48	@ 0x30
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f002 fa10 	bl	8003074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c64:	4b22      	ldr	r3, [pc, #136]	@ (8000cf0 <SystemClock_Config+0xb0>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c68:	4a21      	ldr	r2, [pc, #132]	@ (8000cf0 <SystemClock_Config+0xb0>)
 8000c6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c70:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf0 <SystemClock_Config+0xb0>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf4 <SystemClock_Config+0xb4>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c84:	4a1b      	ldr	r2, [pc, #108]	@ (8000cf4 <SystemClock_Config+0xb4>)
 8000c86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	4b19      	ldr	r3, [pc, #100]	@ (8000cf4 <SystemClock_Config+0xb4>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca0:	2310      	movs	r3, #16
 8000ca2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca8:	f107 0320 	add.w	r3, r7, #32
 8000cac:	4618      	mov	r0, r3
 8000cae:	f001 fa95 	bl	80021dc <HAL_RCC_OscConfig>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000cb8:	f000 f81e 	bl	8000cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cbc:	230f      	movs	r3, #15
 8000cbe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f001 fd24 	bl	8002724 <HAL_RCC_ClockConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ce2:	f000 f809 	bl	8000cf8 <Error_Handler>
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	3750      	adds	r7, #80	@ 0x50
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40007000 	.word	0x40007000

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <Error_Handler+0x8>

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d48 <HAL_MspInit+0x44>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d48 <HAL_MspInit+0x44>)
 8000d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d16:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <HAL_MspInit+0x44>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <HAL_MspInit+0x44>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d26:	4a08      	ldr	r2, [pc, #32]	@ (8000d48 <HAL_MspInit+0x44>)
 8000d28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d2e:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <HAL_MspInit+0x44>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800

08000d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <NMI_Handler+0x4>

08000d54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <MemManage_Handler+0x4>

08000d64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da2:	f000 f8fd 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000db0:	4802      	ldr	r0, [pc, #8]	@ (8000dbc <CAN1_TX_IRQHandler+0x10>)
 8000db2:	f000 fd36 	bl	8001822 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	2000002c 	.word	0x2000002c

08000dc0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000dc4:	4802      	ldr	r0, [pc, #8]	@ (8000dd0 <CAN1_RX0_IRQHandler+0x10>)
 8000dc6:	f000 fd2c 	bl	8001822 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000002c 	.word	0x2000002c

08000dd4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <SystemInit+0x20>)
 8000dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dde:	4a05      	ldr	r2, [pc, #20]	@ (8000df4 <SystemInit+0x20>)
 8000de0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000de4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dfe:	f107 0310 	add.w	r3, r7, #16
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e16:	4b1d      	ldr	r3, [pc, #116]	@ (8000e8c <MX_TIM3_Init+0x94>)
 8000e18:	4a1d      	ldr	r2, [pc, #116]	@ (8000e90 <MX_TIM3_Init+0x98>)
 8000e1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1599;
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e8c <MX_TIM3_Init+0x94>)
 8000e1e:	f240 623f 	movw	r2, #1599	@ 0x63f
 8000e22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e24:	4b19      	ldr	r3, [pc, #100]	@ (8000e8c <MX_TIM3_Init+0x94>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000e2a:	4b18      	ldr	r3, [pc, #96]	@ (8000e8c <MX_TIM3_Init+0x94>)
 8000e2c:	2263      	movs	r2, #99	@ 0x63
 8000e2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e30:	4b16      	ldr	r3, [pc, #88]	@ (8000e8c <MX_TIM3_Init+0x94>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e36:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <MX_TIM3_Init+0x94>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e3c:	4813      	ldr	r0, [pc, #76]	@ (8000e8c <MX_TIM3_Init+0x94>)
 8000e3e:	f001 fe23 	bl	8002a88 <HAL_TIM_Base_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000e48:	f7ff ff56 	bl	8000cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e52:	f107 0310 	add.w	r3, r7, #16
 8000e56:	4619      	mov	r1, r3
 8000e58:	480c      	ldr	r0, [pc, #48]	@ (8000e8c <MX_TIM3_Init+0x94>)
 8000e5a:	f001 fe6d 	bl	8002b38 <HAL_TIM_ConfigClockSource>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000e64:	f7ff ff48 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	4619      	mov	r1, r3
 8000e74:	4805      	ldr	r0, [pc, #20]	@ (8000e8c <MX_TIM3_Init+0x94>)
 8000e76:	f002 f86f 	bl	8002f58 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e80:	f7ff ff3a 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e84:	bf00      	nop
 8000e86:	3720      	adds	r7, #32
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	200000d4 	.word	0x200000d4
 8000e90:	40000400 	.word	0x40000400

08000e94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ecc <HAL_TIM_Base_MspInit+0x38>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d10b      	bne.n	8000ebe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed0 <HAL_TIM_Base_MspInit+0x3c>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eaa:	4a09      	ldr	r2, [pc, #36]	@ (8000ed0 <HAL_TIM_Base_MspInit+0x3c>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb2:	4b07      	ldr	r3, [pc, #28]	@ (8000ed0 <HAL_TIM_Base_MspInit+0x3c>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40000400 	.word	0x40000400
 8000ed0:	40023800 	.word	0x40023800

08000ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ed4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8000ed8:	f7ff ff7c 	bl	8000dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000edc:	480c      	ldr	r0, [pc, #48]	@ (8000f10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ede:	490d      	ldr	r1, [pc, #52]	@ (8000f14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8000f18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee4:	e002      	b.n	8000eec <LoopCopyDataInit>

08000ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eea:	3304      	adds	r3, #4

08000eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef0:	d3f9      	bcc.n	8000ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ef4:	4c0a      	ldr	r4, [pc, #40]	@ (8000f20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef8:	e001      	b.n	8000efe <LoopFillZerobss>

08000efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000efc:	3204      	adds	r2, #4

08000efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f00:	d3fb      	bcc.n	8000efa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f02:	f002 f8bf 	bl	8003084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f06:	f7ff fbbd 	bl	8000684 <main>
  bx  lr    
 8000f0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f0c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f14:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f18:	08003104 	.word	0x08003104
  ldr r2, =_sbss
 8000f1c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f20:	20000124 	.word	0x20000124

08000f24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f24:	e7fe      	b.n	8000f24 <ADC_IRQHandler>

08000f26 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2a:	2003      	movs	r0, #3
 8000f2c:	f000 ff78 	bl	8001e20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f30:	200f      	movs	r0, #15
 8000f32:	f000 f805 	bl	8000f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f36:	f7ff fee5 	bl	8000d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f48:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <HAL_InitTick+0x54>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b12      	ldr	r3, [pc, #72]	@ (8000f98 <HAL_InitTick+0x58>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 ff93 	bl	8001e8a <HAL_SYSTICK_Config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00e      	b.n	8000f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d80a      	bhi.n	8000f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	2200      	movs	r2, #0
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f000 ff5b 	bl	8001e36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f80:	4a06      	ldr	r2, [pc, #24]	@ (8000f9c <HAL_InitTick+0x5c>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e000      	b.n	8000f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000004 	.word	0x20000004
 8000f98:	2000000c 	.word	0x2000000c
 8000f9c:	20000008 	.word	0x20000008

08000fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <HAL_IncTick+0x20>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <HAL_IncTick+0x24>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a04      	ldr	r2, [pc, #16]	@ (8000fc4 <HAL_IncTick+0x24>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	2000000c 	.word	0x2000000c
 8000fc4:	20000120 	.word	0x20000120

08000fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;
 8000fcc:	4b03      	ldr	r3, [pc, #12]	@ (8000fdc <HAL_GetTick+0x14>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000120 	.word	0x20000120

08000fe0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e0ed      	b.n	80011ce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d102      	bne.n	8001004 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff fabc 	bl	800057c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f042 0201 	orr.w	r2, r2, #1
 8001012:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001014:	f7ff ffd8 	bl	8000fc8 <HAL_GetTick>
 8001018:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800101a:	e012      	b.n	8001042 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800101c:	f7ff ffd4 	bl	8000fc8 <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b0a      	cmp	r3, #10
 8001028:	d90b      	bls.n	8001042 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800102e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2205      	movs	r2, #5
 800103a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e0c5      	b.n	80011ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0e5      	beq.n	800101c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 0202 	bic.w	r2, r2, #2
 800105e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001060:	f7ff ffb2 	bl	8000fc8 <HAL_GetTick>
 8001064:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001066:	e012      	b.n	800108e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001068:	f7ff ffae 	bl	8000fc8 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b0a      	cmp	r3, #10
 8001074:	d90b      	bls.n	800108e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800107a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2205      	movs	r2, #5
 8001086:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e09f      	b.n	80011ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1e5      	bne.n	8001068 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7e1b      	ldrb	r3, [r3, #24]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d108      	bne.n	80010b6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	e007      	b.n	80010c6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	7e5b      	ldrb	r3, [r3, #25]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d108      	bne.n	80010e0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	e007      	b.n	80010f0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80010ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	7e9b      	ldrb	r3, [r3, #26]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d108      	bne.n	800110a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f042 0220 	orr.w	r2, r2, #32
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	e007      	b.n	800111a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f022 0220 	bic.w	r2, r2, #32
 8001118:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	7edb      	ldrb	r3, [r3, #27]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d108      	bne.n	8001134 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 0210 	bic.w	r2, r2, #16
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	e007      	b.n	8001144 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f042 0210 	orr.w	r2, r2, #16
 8001142:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	7f1b      	ldrb	r3, [r3, #28]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d108      	bne.n	800115e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0208 	orr.w	r2, r2, #8
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	e007      	b.n	800116e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 0208 	bic.w	r2, r2, #8
 800116c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7f5b      	ldrb	r3, [r3, #29]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d108      	bne.n	8001188 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f042 0204 	orr.w	r2, r2, #4
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	e007      	b.n	8001198 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 0204 	bic.w	r2, r2, #4
 8001196:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	431a      	orrs	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	431a      	orrs	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	ea42 0103 	orr.w	r1, r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	1e5a      	subs	r2, r3, #1
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	430a      	orrs	r2, r1
 80011bc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2201      	movs	r2, #1
 80011c8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b087      	sub	sp, #28
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ec:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80011ee:	7cfb      	ldrb	r3, [r7, #19]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d003      	beq.n	80011fc <HAL_CAN_ConfigFilter+0x26>
 80011f4:	7cfb      	ldrb	r3, [r7, #19]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	f040 80aa 	bne.w	8001350 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001202:	f043 0201 	orr.w	r2, r3, #1
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	f003 031f 	and.w	r3, r3, #31
 8001214:	2201      	movs	r2, #1
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	43db      	mvns	r3, r3
 8001226:	401a      	ands	r2, r3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d123      	bne.n	800127e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	43db      	mvns	r3, r3
 8001240:	401a      	ands	r2, r3
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001258:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	3248      	adds	r2, #72	@ 0x48
 800125e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001272:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001274:	6979      	ldr	r1, [r7, #20]
 8001276:	3348      	adds	r3, #72	@ 0x48
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	440b      	add	r3, r1
 800127c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d122      	bne.n	80012cc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	431a      	orrs	r2, r3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012a6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	3248      	adds	r2, #72	@ 0x48
 80012ac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012c0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012c2:	6979      	ldr	r1, [r7, #20]
 80012c4:	3348      	adds	r3, #72	@ 0x48
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	440b      	add	r3, r1
 80012ca:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d109      	bne.n	80012e8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	43db      	mvns	r3, r3
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80012e6:	e007      	b.n	80012f8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	431a      	orrs	r2, r3
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d109      	bne.n	8001314 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	43db      	mvns	r3, r3
 800130a:	401a      	ands	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001312:	e007      	b.n	8001324 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	431a      	orrs	r2, r3
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d107      	bne.n	800133c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	431a      	orrs	r2, r3
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001342:	f023 0201 	bic.w	r2, r3, #1
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800134c:	2300      	movs	r3, #0
 800134e:	e006      	b.n	800135e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001354:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
  }
}
 800135e:	4618      	mov	r0, r3
 8001360:	371c      	adds	r7, #28
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b084      	sub	sp, #16
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b01      	cmp	r3, #1
 800137c:	d12e      	bne.n	80013dc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2202      	movs	r2, #2
 8001382:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0201 	bic.w	r2, r2, #1
 8001394:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001396:	f7ff fe17 	bl	8000fc8 <HAL_GetTick>
 800139a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800139c:	e012      	b.n	80013c4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800139e:	f7ff fe13 	bl	8000fc8 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b0a      	cmp	r3, #10
 80013aa:	d90b      	bls.n	80013c4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2205      	movs	r2, #5
 80013bc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e012      	b.n	80013ea <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1e5      	bne.n	800139e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80013d8:	2300      	movs	r3, #0
 80013da:	e006      	b.n	80013ea <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
  }
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b089      	sub	sp, #36	@ 0x24
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	60f8      	str	r0, [r7, #12]
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
 80013fe:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001406:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001410:	7ffb      	ldrb	r3, [r7, #31]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d003      	beq.n	800141e <HAL_CAN_AddTxMessage+0x2c>
 8001416:	7ffb      	ldrb	r3, [r7, #31]
 8001418:	2b02      	cmp	r3, #2
 800141a:	f040 80ad 	bne.w	8001578 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d10a      	bne.n	800143e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800142e:	2b00      	cmp	r3, #0
 8001430:	d105      	bne.n	800143e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 8095 	beq.w	8001568 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	0e1b      	lsrs	r3, r3, #24
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001448:	2201      	movs	r2, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	409a      	lsls	r2, r3
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10d      	bne.n	8001476 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001464:	68f9      	ldr	r1, [r7, #12]
 8001466:	6809      	ldr	r1, [r1, #0]
 8001468:	431a      	orrs	r2, r3
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	3318      	adds	r3, #24
 800146e:	011b      	lsls	r3, r3, #4
 8001470:	440b      	add	r3, r1
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	e00f      	b.n	8001496 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001480:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001486:	68f9      	ldr	r1, [r7, #12]
 8001488:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800148a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	3318      	adds	r3, #24
 8001490:	011b      	lsls	r3, r3, #4
 8001492:	440b      	add	r3, r1
 8001494:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6819      	ldr	r1, [r3, #0]
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	691a      	ldr	r2, [r3, #16]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	3318      	adds	r3, #24
 80014a2:	011b      	lsls	r3, r3, #4
 80014a4:	440b      	add	r3, r1
 80014a6:	3304      	adds	r3, #4
 80014a8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	7d1b      	ldrb	r3, [r3, #20]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d111      	bne.n	80014d6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	3318      	adds	r3, #24
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	4413      	add	r3, r2
 80014be:	3304      	adds	r3, #4
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	6811      	ldr	r1, [r2, #0]
 80014c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3318      	adds	r3, #24
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	440b      	add	r3, r1
 80014d2:	3304      	adds	r3, #4
 80014d4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3307      	adds	r3, #7
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	061a      	lsls	r2, r3, #24
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3306      	adds	r3, #6
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	041b      	lsls	r3, r3, #16
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3305      	adds	r3, #5
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	021b      	lsls	r3, r3, #8
 80014f0:	4313      	orrs	r3, r2
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	3204      	adds	r2, #4
 80014f6:	7812      	ldrb	r2, [r2, #0]
 80014f8:	4610      	mov	r0, r2
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	6811      	ldr	r1, [r2, #0]
 80014fe:	ea43 0200 	orr.w	r2, r3, r0
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	011b      	lsls	r3, r3, #4
 8001506:	440b      	add	r3, r1
 8001508:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800150c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	3303      	adds	r3, #3
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	061a      	lsls	r2, r3, #24
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3302      	adds	r3, #2
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	041b      	lsls	r3, r3, #16
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3301      	adds	r3, #1
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	4313      	orrs	r3, r2
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	7812      	ldrb	r2, [r2, #0]
 800152e:	4610      	mov	r0, r2
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	6811      	ldr	r1, [r2, #0]
 8001534:	ea43 0200 	orr.w	r2, r3, r0
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	011b      	lsls	r3, r3, #4
 800153c:	440b      	add	r3, r1
 800153e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001542:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	3318      	adds	r3, #24
 800154c:	011b      	lsls	r3, r3, #4
 800154e:	4413      	add	r3, r2
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	6811      	ldr	r1, [r2, #0]
 8001556:	f043 0201 	orr.w	r2, r3, #1
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	3318      	adds	r3, #24
 800155e:	011b      	lsls	r3, r3, #4
 8001560:	440b      	add	r3, r1
 8001562:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001564:	2300      	movs	r3, #0
 8001566:	e00e      	b.n	8001586 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e006      	b.n	8001586 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
  }
}
 8001586:	4618      	mov	r0, r3
 8001588:	3724      	adds	r7, #36	@ 0x24
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001592:	b480      	push	{r7}
 8001594:	b087      	sub	sp, #28
 8001596:	af00      	add	r7, sp, #0
 8001598:	60f8      	str	r0, [r7, #12]
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
 800159e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015a6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80015a8:	7dfb      	ldrb	r3, [r7, #23]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d003      	beq.n	80015b6 <HAL_CAN_GetRxMessage+0x24>
 80015ae:	7dfb      	ldrb	r3, [r7, #23]
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	f040 8103 	bne.w	80017bc <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d10e      	bne.n	80015da <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d116      	bne.n	80015f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ce:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e0f7      	b.n	80017ca <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d107      	bne.n	80015f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e0e8      	b.n	80017ca <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	331b      	adds	r3, #27
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	4413      	add	r3, r2
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0204 	and.w	r2, r3, #4
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10c      	bne.n	8001630 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	331b      	adds	r3, #27
 800161e:	011b      	lsls	r3, r3, #4
 8001620:	4413      	add	r3, r2
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	0d5b      	lsrs	r3, r3, #21
 8001626:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	e00b      	b.n	8001648 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	331b      	adds	r3, #27
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	4413      	add	r3, r2
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	08db      	lsrs	r3, r3, #3
 8001640:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	331b      	adds	r3, #27
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	4413      	add	r3, r2
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0202 	and.w	r2, r3, #2
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	331b      	adds	r3, #27
 8001666:	011b      	lsls	r3, r3, #4
 8001668:	4413      	add	r3, r2
 800166a:	3304      	adds	r3, #4
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2208      	movs	r2, #8
 800167a:	611a      	str	r2, [r3, #16]
 800167c:	e00b      	b.n	8001696 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	331b      	adds	r3, #27
 8001686:	011b      	lsls	r3, r3, #4
 8001688:	4413      	add	r3, r2
 800168a:	3304      	adds	r3, #4
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 020f 	and.w	r2, r3, #15
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	331b      	adds	r3, #27
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	4413      	add	r3, r2
 80016a2:	3304      	adds	r3, #4
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	0a1b      	lsrs	r3, r3, #8
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	331b      	adds	r3, #27
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	4413      	add	r3, r2
 80016ba:	3304      	adds	r3, #4
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	0c1b      	lsrs	r3, r3, #16
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	4413      	add	r3, r2
 80016d0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	011b      	lsls	r3, r3, #4
 80016e4:	4413      	add	r3, r2
 80016e6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	0a1a      	lsrs	r2, r3, #8
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	3301      	adds	r3, #1
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	4413      	add	r3, r2
 8001700:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	0c1a      	lsrs	r2, r3, #16
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	3302      	adds	r3, #2
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	4413      	add	r3, r2
 800171a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	0e1a      	lsrs	r2, r3, #24
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	3303      	adds	r3, #3
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	011b      	lsls	r3, r3, #4
 8001732:	4413      	add	r3, r2
 8001734:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	3304      	adds	r3, #4
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	011b      	lsls	r3, r3, #4
 800174a:	4413      	add	r3, r2
 800174c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	0a1a      	lsrs	r2, r3, #8
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	3305      	adds	r3, #5
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	4413      	add	r3, r2
 8001766:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	0c1a      	lsrs	r2, r3, #16
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	3306      	adds	r3, #6
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	011b      	lsls	r3, r3, #4
 800177e:	4413      	add	r3, r2
 8001780:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	0e1a      	lsrs	r2, r3, #24
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	3307      	adds	r3, #7
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d108      	bne.n	80017a8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f042 0220 	orr.w	r2, r2, #32
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	e007      	b.n	80017b8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	691a      	ldr	r2, [r3, #16]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0220 	orr.w	r2, r2, #32
 80017b6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	e006      	b.n	80017ca <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
  }
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	371c      	adds	r7, #28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b085      	sub	sp, #20
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d002      	beq.n	80017f4 <HAL_CAN_ActivateNotification+0x1e>
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d109      	bne.n	8001808 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6959      	ldr	r1, [r3, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	e006      	b.n	8001816 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
  }
}
 8001816:	4618      	mov	r0, r3
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b08a      	sub	sp, #40	@ 0x28
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800182a:	2300      	movs	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800185e:	6a3b      	ldr	r3, [r7, #32]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b00      	cmp	r3, #0
 8001866:	d07c      	beq.n	8001962 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	d023      	beq.n	80018ba <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2201      	movs	r2, #1
 8001878:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 f983 	bl	8001b90 <HAL_CAN_TxMailbox0CompleteCallback>
 800188a:	e016      	b.n	80018ba <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	2b00      	cmp	r3, #0
 8001894:	d004      	beq.n	80018a0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001898:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800189c:	627b      	str	r3, [r7, #36]	@ 0x24
 800189e:	e00c      	b.n	80018ba <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d004      	beq.n	80018b4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80018aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80018b2:	e002      	b.n	80018ba <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 f989 	bl	8001bcc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d024      	beq.n	800190e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 f963 	bl	8001ba4 <HAL_CAN_TxMailbox1CompleteCallback>
 80018de:	e016      	b.n	800190e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d004      	beq.n	80018f4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80018ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80018f2:	e00c      	b.n	800190e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d004      	beq.n	8001908 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80018fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001900:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001904:	627b      	str	r3, [r7, #36]	@ 0x24
 8001906:	e002      	b.n	800190e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 f969 	bl	8001be0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d024      	beq.n	8001962 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001920:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 f943 	bl	8001bb8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001932:	e016      	b.n	8001962 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d004      	beq.n	8001948 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800193e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001940:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001944:	627b      	str	r3, [r7, #36]	@ 0x24
 8001946:	e00c      	b.n	8001962 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d004      	beq.n	800195c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001958:	627b      	str	r3, [r7, #36]	@ 0x24
 800195a:	e002      	b.n	8001962 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 f949 	bl	8001bf4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	f003 0308 	and.w	r3, r3, #8
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00c      	beq.n	8001986 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f003 0310 	and.w	r3, r3, #16
 8001972:	2b00      	cmp	r3, #0
 8001974:	d007      	beq.n	8001986 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001978:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800197c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2210      	movs	r2, #16
 8001984:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00b      	beq.n	80019a8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b00      	cmp	r3, #0
 8001998:	d006      	beq.n	80019a8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2208      	movs	r2, #8
 80019a0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f930 	bl	8001c08 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d009      	beq.n	80019c6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d002      	beq.n	80019c6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7fe fe47 	bl	8000654 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80019c6:	6a3b      	ldr	r3, [r7, #32]
 80019c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00c      	beq.n	80019ea <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	f003 0310 	and.w	r3, r3, #16
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d007      	beq.n	80019ea <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80019da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019e0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2210      	movs	r2, #16
 80019e8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80019ea:	6a3b      	ldr	r3, [r7, #32]
 80019ec:	f003 0320 	and.w	r3, r3, #32
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00b      	beq.n	8001a0c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d006      	beq.n	8001a0c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2208      	movs	r2, #8
 8001a04:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f912 	bl	8001c30 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001a0c:	6a3b      	ldr	r3, [r7, #32]
 8001a0e:	f003 0310 	and.w	r3, r3, #16
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d009      	beq.n	8001a2a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f8f9 	bl	8001c1c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001a2a:	6a3b      	ldr	r3, [r7, #32]
 8001a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00b      	beq.n	8001a4c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f003 0310 	and.w	r3, r3, #16
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d006      	beq.n	8001a4c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2210      	movs	r2, #16
 8001a44:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f8fc 	bl	8001c44 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001a4c:	6a3b      	ldr	r3, [r7, #32]
 8001a4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00b      	beq.n	8001a6e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d006      	beq.n	8001a6e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2208      	movs	r2, #8
 8001a66:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 f8f5 	bl	8001c58 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d07b      	beq.n	8001b70 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d072      	beq.n	8001b68 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d008      	beq.n	8001a9e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d008      	beq.n	8001aba <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d008      	beq.n	8001ad6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
 8001ad8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d043      	beq.n	8001b68 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d03e      	beq.n	8001b68 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001af0:	2b60      	cmp	r3, #96	@ 0x60
 8001af2:	d02b      	beq.n	8001b4c <HAL_CAN_IRQHandler+0x32a>
 8001af4:	2b60      	cmp	r3, #96	@ 0x60
 8001af6:	d82e      	bhi.n	8001b56 <HAL_CAN_IRQHandler+0x334>
 8001af8:	2b50      	cmp	r3, #80	@ 0x50
 8001afa:	d022      	beq.n	8001b42 <HAL_CAN_IRQHandler+0x320>
 8001afc:	2b50      	cmp	r3, #80	@ 0x50
 8001afe:	d82a      	bhi.n	8001b56 <HAL_CAN_IRQHandler+0x334>
 8001b00:	2b40      	cmp	r3, #64	@ 0x40
 8001b02:	d019      	beq.n	8001b38 <HAL_CAN_IRQHandler+0x316>
 8001b04:	2b40      	cmp	r3, #64	@ 0x40
 8001b06:	d826      	bhi.n	8001b56 <HAL_CAN_IRQHandler+0x334>
 8001b08:	2b30      	cmp	r3, #48	@ 0x30
 8001b0a:	d010      	beq.n	8001b2e <HAL_CAN_IRQHandler+0x30c>
 8001b0c:	2b30      	cmp	r3, #48	@ 0x30
 8001b0e:	d822      	bhi.n	8001b56 <HAL_CAN_IRQHandler+0x334>
 8001b10:	2b10      	cmp	r3, #16
 8001b12:	d002      	beq.n	8001b1a <HAL_CAN_IRQHandler+0x2f8>
 8001b14:	2b20      	cmp	r3, #32
 8001b16:	d005      	beq.n	8001b24 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001b18:	e01d      	b.n	8001b56 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1c:	f043 0308 	orr.w	r3, r3, #8
 8001b20:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b22:	e019      	b.n	8001b58 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b26:	f043 0310 	orr.w	r3, r3, #16
 8001b2a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b2c:	e014      	b.n	8001b58 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b30:	f043 0320 	orr.w	r3, r3, #32
 8001b34:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b36:	e00f      	b.n	8001b58 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b3e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b40:	e00a      	b.n	8001b58 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b4a:	e005      	b.n	8001b58 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b52:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b54:	e000      	b.n	8001b58 <HAL_CAN_IRQHandler+0x336>
            break;
 8001b56:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699a      	ldr	r2, [r3, #24]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001b66:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d008      	beq.n	8001b88 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f872 	bl	8001c6c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001b88:	bf00      	nop
 8001b8a:	3728      	adds	r7, #40	@ 0x28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c90:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <__NVIC_SetPriorityGrouping+0x40>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ca8:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cae:	4a04      	ldr	r2, [pc, #16]	@ (8001cc0 <__NVIC_SetPriorityGrouping+0x40>)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	60d3      	str	r3, [r2, #12]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00
 8001cc4:	05fa0000 	.word	0x05fa0000

08001cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ccc:	4b04      	ldr	r3, [pc, #16]	@ (8001ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	0a1b      	lsrs	r3, r3, #8
 8001cd2:	f003 0307 	and.w	r3, r3, #7
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	db0b      	blt.n	8001d0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	f003 021f 	and.w	r2, r3, #31
 8001cfc:	4907      	ldr	r1, [pc, #28]	@ (8001d1c <__NVIC_EnableIRQ+0x38>)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	2001      	movs	r0, #1
 8001d06:	fa00 f202 	lsl.w	r2, r0, r2
 8001d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000e100 	.word	0xe000e100

08001d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	6039      	str	r1, [r7, #0]
 8001d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	db0a      	blt.n	8001d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	490c      	ldr	r1, [pc, #48]	@ (8001d6c <__NVIC_SetPriority+0x4c>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	0112      	lsls	r2, r2, #4
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	440b      	add	r3, r1
 8001d44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d48:	e00a      	b.n	8001d60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4908      	ldr	r1, [pc, #32]	@ (8001d70 <__NVIC_SetPriority+0x50>)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	3b04      	subs	r3, #4
 8001d58:	0112      	lsls	r2, r2, #4
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	761a      	strb	r2, [r3, #24]
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000e100 	.word	0xe000e100
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b089      	sub	sp, #36	@ 0x24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f1c3 0307 	rsb	r3, r3, #7
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	bf28      	it	cs
 8001d92:	2304      	movcs	r3, #4
 8001d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	2b06      	cmp	r3, #6
 8001d9c:	d902      	bls.n	8001da4 <NVIC_EncodePriority+0x30>
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3b03      	subs	r3, #3
 8001da2:	e000      	b.n	8001da6 <NVIC_EncodePriority+0x32>
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43da      	mvns	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	401a      	ands	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc6:	43d9      	mvns	r1, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	4313      	orrs	r3, r2
         );
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3724      	adds	r7, #36	@ 0x24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
	...

08001ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dec:	d301      	bcc.n	8001df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dee:	2301      	movs	r3, #1
 8001df0:	e00f      	b.n	8001e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001df2:	4a0a      	ldr	r2, [pc, #40]	@ (8001e1c <SysTick_Config+0x40>)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dfa:	210f      	movs	r1, #15
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001e00:	f7ff ff8e 	bl	8001d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e04:	4b05      	ldr	r3, [pc, #20]	@ (8001e1c <SysTick_Config+0x40>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e0a:	4b04      	ldr	r3, [pc, #16]	@ (8001e1c <SysTick_Config+0x40>)
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	e000e010 	.word	0xe000e010

08001e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff ff29 	bl	8001c80 <__NVIC_SetPriorityGrouping>
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
 8001e42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e48:	f7ff ff3e 	bl	8001cc8 <__NVIC_GetPriorityGrouping>
 8001e4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	68b9      	ldr	r1, [r7, #8]
 8001e52:	6978      	ldr	r0, [r7, #20]
 8001e54:	f7ff ff8e 	bl	8001d74 <NVIC_EncodePriority>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5e:	4611      	mov	r1, r2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff5d 	bl	8001d20 <__NVIC_SetPriority>
}
 8001e66:	bf00      	nop
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	4603      	mov	r3, r0
 8001e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff31 	bl	8001ce4 <__NVIC_EnableIRQ>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff ffa2 	bl	8001ddc <SysTick_Config>
 8001e98:	4603      	mov	r3, r0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b089      	sub	sp, #36	@ 0x24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
 8001ec2:	e169      	b.n	8002198 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	f040 8158 	bne.w	8002192 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d005      	beq.n	8001efa <HAL_GPIO_Init+0x56>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d130      	bne.n	8001f5c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	2203      	movs	r2, #3
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f30:	2201      	movs	r2, #1
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	f003 0201 	and.w	r2, r3, #1
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d017      	beq.n	8001f98 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	2203      	movs	r2, #3
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d123      	bne.n	8001fec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	08da      	lsrs	r2, r3, #3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3208      	adds	r2, #8
 8001fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	220f      	movs	r2, #15
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	08da      	lsrs	r2, r3, #3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3208      	adds	r2, #8
 8001fe6:	69b9      	ldr	r1, [r7, #24]
 8001fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 0203 	and.w	r2, r3, #3
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 80b2 	beq.w	8002192 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202e:	4b60      	ldr	r3, [pc, #384]	@ (80021b0 <HAL_GPIO_Init+0x30c>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002032:	4a5f      	ldr	r2, [pc, #380]	@ (80021b0 <HAL_GPIO_Init+0x30c>)
 8002034:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002038:	6453      	str	r3, [r2, #68]	@ 0x44
 800203a:	4b5d      	ldr	r3, [pc, #372]	@ (80021b0 <HAL_GPIO_Init+0x30c>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800203e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002046:	4a5b      	ldr	r2, [pc, #364]	@ (80021b4 <HAL_GPIO_Init+0x310>)
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	3302      	adds	r3, #2
 800204e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	220f      	movs	r2, #15
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a52      	ldr	r2, [pc, #328]	@ (80021b8 <HAL_GPIO_Init+0x314>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d02b      	beq.n	80020ca <HAL_GPIO_Init+0x226>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a51      	ldr	r2, [pc, #324]	@ (80021bc <HAL_GPIO_Init+0x318>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d025      	beq.n	80020c6 <HAL_GPIO_Init+0x222>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a50      	ldr	r2, [pc, #320]	@ (80021c0 <HAL_GPIO_Init+0x31c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d01f      	beq.n	80020c2 <HAL_GPIO_Init+0x21e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4f      	ldr	r2, [pc, #316]	@ (80021c4 <HAL_GPIO_Init+0x320>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d019      	beq.n	80020be <HAL_GPIO_Init+0x21a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4e      	ldr	r2, [pc, #312]	@ (80021c8 <HAL_GPIO_Init+0x324>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d013      	beq.n	80020ba <HAL_GPIO_Init+0x216>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4d      	ldr	r2, [pc, #308]	@ (80021cc <HAL_GPIO_Init+0x328>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00d      	beq.n	80020b6 <HAL_GPIO_Init+0x212>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a4c      	ldr	r2, [pc, #304]	@ (80021d0 <HAL_GPIO_Init+0x32c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d007      	beq.n	80020b2 <HAL_GPIO_Init+0x20e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a4b      	ldr	r2, [pc, #300]	@ (80021d4 <HAL_GPIO_Init+0x330>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d101      	bne.n	80020ae <HAL_GPIO_Init+0x20a>
 80020aa:	2307      	movs	r3, #7
 80020ac:	e00e      	b.n	80020cc <HAL_GPIO_Init+0x228>
 80020ae:	2308      	movs	r3, #8
 80020b0:	e00c      	b.n	80020cc <HAL_GPIO_Init+0x228>
 80020b2:	2306      	movs	r3, #6
 80020b4:	e00a      	b.n	80020cc <HAL_GPIO_Init+0x228>
 80020b6:	2305      	movs	r3, #5
 80020b8:	e008      	b.n	80020cc <HAL_GPIO_Init+0x228>
 80020ba:	2304      	movs	r3, #4
 80020bc:	e006      	b.n	80020cc <HAL_GPIO_Init+0x228>
 80020be:	2303      	movs	r3, #3
 80020c0:	e004      	b.n	80020cc <HAL_GPIO_Init+0x228>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e002      	b.n	80020cc <HAL_GPIO_Init+0x228>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <HAL_GPIO_Init+0x228>
 80020ca:	2300      	movs	r3, #0
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	f002 0203 	and.w	r2, r2, #3
 80020d2:	0092      	lsls	r2, r2, #2
 80020d4:	4093      	lsls	r3, r2
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80020dc:	4935      	ldr	r1, [pc, #212]	@ (80021b4 <HAL_GPIO_Init+0x310>)
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	089b      	lsrs	r3, r3, #2
 80020e2:	3302      	adds	r3, #2
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ea:	4b3b      	ldr	r3, [pc, #236]	@ (80021d8 <HAL_GPIO_Init+0x334>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800210e:	4a32      	ldr	r2, [pc, #200]	@ (80021d8 <HAL_GPIO_Init+0x334>)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002114:	4b30      	ldr	r3, [pc, #192]	@ (80021d8 <HAL_GPIO_Init+0x334>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002138:	4a27      	ldr	r2, [pc, #156]	@ (80021d8 <HAL_GPIO_Init+0x334>)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800213e:	4b26      	ldr	r3, [pc, #152]	@ (80021d8 <HAL_GPIO_Init+0x334>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	43db      	mvns	r3, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4013      	ands	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002162:	4a1d      	ldr	r2, [pc, #116]	@ (80021d8 <HAL_GPIO_Init+0x334>)
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002168:	4b1b      	ldr	r3, [pc, #108]	@ (80021d8 <HAL_GPIO_Init+0x334>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800218c:	4a12      	ldr	r2, [pc, #72]	@ (80021d8 <HAL_GPIO_Init+0x334>)
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3301      	adds	r3, #1
 8002196:	61fb      	str	r3, [r7, #28]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	2b0f      	cmp	r3, #15
 800219c:	f67f ae92 	bls.w	8001ec4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80021a0:	bf00      	nop
 80021a2:	bf00      	nop
 80021a4:	3724      	adds	r7, #36	@ 0x24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40013800 	.word	0x40013800
 80021b8:	40020000 	.word	0x40020000
 80021bc:	40020400 	.word	0x40020400
 80021c0:	40020800 	.word	0x40020800
 80021c4:	40020c00 	.word	0x40020c00
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40021400 	.word	0x40021400
 80021d0:	40021800 	.word	0x40021800
 80021d4:	40021c00 	.word	0x40021c00
 80021d8:	40013c00 	.word	0x40013c00

080021dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80021e4:	2300      	movs	r3, #0
 80021e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e291      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 8087 	beq.w	800230e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002200:	4b96      	ldr	r3, [pc, #600]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 030c 	and.w	r3, r3, #12
 8002208:	2b04      	cmp	r3, #4
 800220a:	d00c      	beq.n	8002226 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800220c:	4b93      	ldr	r3, [pc, #588]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d112      	bne.n	800223e <HAL_RCC_OscConfig+0x62>
 8002218:	4b90      	ldr	r3, [pc, #576]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002220:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002224:	d10b      	bne.n	800223e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002226:	4b8d      	ldr	r3, [pc, #564]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d06c      	beq.n	800230c <HAL_RCC_OscConfig+0x130>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d168      	bne.n	800230c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e26b      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002246:	d106      	bne.n	8002256 <HAL_RCC_OscConfig+0x7a>
 8002248:	4b84      	ldr	r3, [pc, #528]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a83      	ldr	r2, [pc, #524]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 800224e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	e02e      	b.n	80022b4 <HAL_RCC_OscConfig+0xd8>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10c      	bne.n	8002278 <HAL_RCC_OscConfig+0x9c>
 800225e:	4b7f      	ldr	r3, [pc, #508]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a7e      	ldr	r2, [pc, #504]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 8002264:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4b7c      	ldr	r3, [pc, #496]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a7b      	ldr	r2, [pc, #492]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 8002270:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e01d      	b.n	80022b4 <HAL_RCC_OscConfig+0xd8>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0xc0>
 8002282:	4b76      	ldr	r3, [pc, #472]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a75      	ldr	r2, [pc, #468]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 8002288:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	4b73      	ldr	r3, [pc, #460]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a72      	ldr	r2, [pc, #456]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 8002294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	e00b      	b.n	80022b4 <HAL_RCC_OscConfig+0xd8>
 800229c:	4b6f      	ldr	r3, [pc, #444]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a6e      	ldr	r2, [pc, #440]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 80022a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	4b6c      	ldr	r3, [pc, #432]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a6b      	ldr	r2, [pc, #428]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 80022ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d013      	beq.n	80022e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022bc:	f7fe fe84 	bl	8000fc8 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c4:	f7fe fe80 	bl	8000fc8 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	@ 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e21f      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d6:	4b61      	ldr	r3, [pc, #388]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0xe8>
 80022e2:	e014      	b.n	800230e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7fe fe70 	bl	8000fc8 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ec:	f7fe fe6c 	bl	8000fc8 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b64      	cmp	r3, #100	@ 0x64
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e20b      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fe:	4b57      	ldr	r3, [pc, #348]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x110>
 800230a:	e000      	b.n	800230e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d069      	beq.n	80023ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800231a:	4b50      	ldr	r3, [pc, #320]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00b      	beq.n	800233e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002326:	4b4d      	ldr	r3, [pc, #308]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
 800232e:	2b08      	cmp	r3, #8
 8002330:	d11c      	bne.n	800236c <HAL_RCC_OscConfig+0x190>
 8002332:	4b4a      	ldr	r3, [pc, #296]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d116      	bne.n	800236c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233e:	4b47      	ldr	r3, [pc, #284]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d005      	beq.n	8002356 <HAL_RCC_OscConfig+0x17a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d001      	beq.n	8002356 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e1df      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002356:	4b41      	ldr	r3, [pc, #260]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	493d      	ldr	r1, [pc, #244]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236a:	e040      	b.n	80023ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d023      	beq.n	80023bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002374:	4b39      	ldr	r3, [pc, #228]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a38      	ldr	r2, [pc, #224]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002380:	f7fe fe22 	bl	8000fc8 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002388:	f7fe fe1e 	bl	8000fc8 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e1bd      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239a:	4b30      	ldr	r3, [pc, #192]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a6:	4b2d      	ldr	r3, [pc, #180]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4929      	ldr	r1, [pc, #164]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]
 80023ba:	e018      	b.n	80023ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023bc:	4b27      	ldr	r3, [pc, #156]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a26      	ldr	r2, [pc, #152]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 80023c2:	f023 0301 	bic.w	r3, r3, #1
 80023c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c8:	f7fe fdfe 	bl	8000fc8 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d0:	f7fe fdfa 	bl	8000fc8 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e199      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e2:	4b1e      	ldr	r3, [pc, #120]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d038      	beq.n	800246c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d019      	beq.n	8002436 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002402:	4b16      	ldr	r3, [pc, #88]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 8002404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002406:	4a15      	ldr	r2, [pc, #84]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240e:	f7fe fddb 	bl	8000fc8 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002416:	f7fe fdd7 	bl	8000fc8 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e176      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002428:	4b0c      	ldr	r3, [pc, #48]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 800242a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x23a>
 8002434:	e01a      	b.n	800246c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002436:	4b09      	ldr	r3, [pc, #36]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 8002438:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800243a:	4a08      	ldr	r2, [pc, #32]	@ (800245c <HAL_RCC_OscConfig+0x280>)
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002442:	f7fe fdc1 	bl	8000fc8 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002448:	e00a      	b.n	8002460 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244a:	f7fe fdbd 	bl	8000fc8 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d903      	bls.n	8002460 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e15c      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
 800245c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002460:	4b91      	ldr	r3, [pc, #580]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002462:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1ee      	bne.n	800244a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 80a4 	beq.w	80025c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800247a:	4b8b      	ldr	r3, [pc, #556]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10d      	bne.n	80024a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002486:	4b88      	ldr	r3, [pc, #544]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	4a87      	ldr	r2, [pc, #540]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 800248c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002490:	6413      	str	r3, [r2, #64]	@ 0x40
 8002492:	4b85      	ldr	r3, [pc, #532]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800249e:	2301      	movs	r3, #1
 80024a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a2:	4b82      	ldr	r3, [pc, #520]	@ (80026ac <HAL_RCC_OscConfig+0x4d0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d118      	bne.n	80024e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80024ae:	4b7f      	ldr	r3, [pc, #508]	@ (80026ac <HAL_RCC_OscConfig+0x4d0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a7e      	ldr	r2, [pc, #504]	@ (80026ac <HAL_RCC_OscConfig+0x4d0>)
 80024b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ba:	f7fe fd85 	bl	8000fc8 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c2:	f7fe fd81 	bl	8000fc8 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b64      	cmp	r3, #100	@ 0x64
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e120      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024d4:	4b75      	ldr	r3, [pc, #468]	@ (80026ac <HAL_RCC_OscConfig+0x4d0>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d106      	bne.n	80024f6 <HAL_RCC_OscConfig+0x31a>
 80024e8:	4b6f      	ldr	r3, [pc, #444]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 80024ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ec:	4a6e      	ldr	r2, [pc, #440]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80024f4:	e02d      	b.n	8002552 <HAL_RCC_OscConfig+0x376>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10c      	bne.n	8002518 <HAL_RCC_OscConfig+0x33c>
 80024fe:	4b6a      	ldr	r3, [pc, #424]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002502:	4a69      	ldr	r2, [pc, #420]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002504:	f023 0301 	bic.w	r3, r3, #1
 8002508:	6713      	str	r3, [r2, #112]	@ 0x70
 800250a:	4b67      	ldr	r3, [pc, #412]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 800250c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800250e:	4a66      	ldr	r2, [pc, #408]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002510:	f023 0304 	bic.w	r3, r3, #4
 8002514:	6713      	str	r3, [r2, #112]	@ 0x70
 8002516:	e01c      	b.n	8002552 <HAL_RCC_OscConfig+0x376>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b05      	cmp	r3, #5
 800251e:	d10c      	bne.n	800253a <HAL_RCC_OscConfig+0x35e>
 8002520:	4b61      	ldr	r3, [pc, #388]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002524:	4a60      	ldr	r2, [pc, #384]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002526:	f043 0304 	orr.w	r3, r3, #4
 800252a:	6713      	str	r3, [r2, #112]	@ 0x70
 800252c:	4b5e      	ldr	r3, [pc, #376]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 800252e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002530:	4a5d      	ldr	r2, [pc, #372]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	6713      	str	r3, [r2, #112]	@ 0x70
 8002538:	e00b      	b.n	8002552 <HAL_RCC_OscConfig+0x376>
 800253a:	4b5b      	ldr	r3, [pc, #364]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 800253c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800253e:	4a5a      	ldr	r2, [pc, #360]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002540:	f023 0301 	bic.w	r3, r3, #1
 8002544:	6713      	str	r3, [r2, #112]	@ 0x70
 8002546:	4b58      	ldr	r3, [pc, #352]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800254a:	4a57      	ldr	r2, [pc, #348]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 800254c:	f023 0304 	bic.w	r3, r3, #4
 8002550:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d015      	beq.n	8002586 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255a:	f7fe fd35 	bl	8000fc8 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002560:	e00a      	b.n	8002578 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002562:	f7fe fd31 	bl	8000fc8 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002570:	4293      	cmp	r3, r2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e0ce      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002578:	4b4b      	ldr	r3, [pc, #300]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 800257a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0ee      	beq.n	8002562 <HAL_RCC_OscConfig+0x386>
 8002584:	e014      	b.n	80025b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002586:	f7fe fd1f 	bl	8000fc8 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800258c:	e00a      	b.n	80025a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258e:	f7fe fd1b 	bl	8000fc8 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800259c:	4293      	cmp	r3, r2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e0b8      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a4:	4b40      	ldr	r3, [pc, #256]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1ee      	bne.n	800258e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025b0:	7dfb      	ldrb	r3, [r7, #23]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d105      	bne.n	80025c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b6:	4b3c      	ldr	r3, [pc, #240]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ba:	4a3b      	ldr	r2, [pc, #236]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 80025bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025c0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 80a4 	beq.w	8002714 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025cc:	4b36      	ldr	r3, [pc, #216]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 030c 	and.w	r3, r3, #12
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d06b      	beq.n	80026b0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d149      	bne.n	8002674 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e0:	4b31      	ldr	r3, [pc, #196]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a30      	ldr	r2, [pc, #192]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 80025e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe fcec 	bl	8000fc8 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f4:	f7fe fce8 	bl	8000fc8 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e087      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002606:	4b28      	ldr	r3, [pc, #160]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69da      	ldr	r2, [r3, #28]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002620:	019b      	lsls	r3, r3, #6
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002628:	085b      	lsrs	r3, r3, #1
 800262a:	3b01      	subs	r3, #1
 800262c:	041b      	lsls	r3, r3, #16
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002634:	061b      	lsls	r3, r3, #24
 8002636:	4313      	orrs	r3, r2
 8002638:	4a1b      	ldr	r2, [pc, #108]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 800263a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800263e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002640:	4b19      	ldr	r3, [pc, #100]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a18      	ldr	r2, [pc, #96]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002646:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800264a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7fe fcbc 	bl	8000fc8 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002654:	f7fe fcb8 	bl	8000fc8 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e057      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002666:	4b10      	ldr	r3, [pc, #64]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0x478>
 8002672:	e04f      	b.n	8002714 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002674:	4b0c      	ldr	r3, [pc, #48]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0b      	ldr	r2, [pc, #44]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 800267a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800267e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe fca2 	bl	8000fc8 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002688:	f7fe fc9e 	bl	8000fc8 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e03d      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269a:	4b03      	ldr	r3, [pc, #12]	@ (80026a8 <HAL_RCC_OscConfig+0x4cc>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x4ac>
 80026a6:	e035      	b.n	8002714 <HAL_RCC_OscConfig+0x538>
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80026b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002720 <HAL_RCC_OscConfig+0x544>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d028      	beq.n	8002710 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d121      	bne.n	8002710 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d11a      	bne.n	8002710 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80026e0:	4013      	ands	r3, r2
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d111      	bne.n	8002710 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f6:	085b      	lsrs	r3, r3, #1
 80026f8:	3b01      	subs	r3, #1
 80026fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d107      	bne.n	8002710 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800270c:	429a      	cmp	r2, r3
 800270e:	d001      	beq.n	8002714 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e000      	b.n	8002716 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40023800 	.word	0x40023800

08002724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0d0      	b.n	80028de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800273c:	4b6a      	ldr	r3, [pc, #424]	@ (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 030f 	and.w	r3, r3, #15
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d910      	bls.n	800276c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274a:	4b67      	ldr	r3, [pc, #412]	@ (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 020f 	bic.w	r2, r3, #15
 8002752:	4965      	ldr	r1, [pc, #404]	@ (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	4313      	orrs	r3, r2
 8002758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800275a:	4b63      	ldr	r3, [pc, #396]	@ (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d001      	beq.n	800276c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0b8      	b.n	80028de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d020      	beq.n	80027ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002784:	4b59      	ldr	r3, [pc, #356]	@ (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	4a58      	ldr	r2, [pc, #352]	@ (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 800278a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800278e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800279c:	4b53      	ldr	r3, [pc, #332]	@ (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	4a52      	ldr	r2, [pc, #328]	@ (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 80027a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80027a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a8:	4b50      	ldr	r3, [pc, #320]	@ (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	494d      	ldr	r1, [pc, #308]	@ (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d040      	beq.n	8002848 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d107      	bne.n	80027de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ce:	4b47      	ldr	r3, [pc, #284]	@ (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d115      	bne.n	8002806 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e07f      	b.n	80028de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d107      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e6:	4b41      	ldr	r3, [pc, #260]	@ (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d109      	bne.n	8002806 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e073      	b.n	80028de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f6:	4b3d      	ldr	r3, [pc, #244]	@ (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e06b      	b.n	80028de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002806:	4b39      	ldr	r3, [pc, #228]	@ (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f023 0203 	bic.w	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	4936      	ldr	r1, [pc, #216]	@ (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 8002814:	4313      	orrs	r3, r2
 8002816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002818:	f7fe fbd6 	bl	8000fc8 <HAL_GetTick>
 800281c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281e:	e00a      	b.n	8002836 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002820:	f7fe fbd2 	bl	8000fc8 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800282e:	4293      	cmp	r3, r2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e053      	b.n	80028de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002836:	4b2d      	ldr	r3, [pc, #180]	@ (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 020c 	and.w	r2, r3, #12
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	429a      	cmp	r2, r3
 8002846:	d1eb      	bne.n	8002820 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002848:	4b27      	ldr	r3, [pc, #156]	@ (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d210      	bcs.n	8002878 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002856:	4b24      	ldr	r3, [pc, #144]	@ (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 020f 	bic.w	r2, r3, #15
 800285e:	4922      	ldr	r1, [pc, #136]	@ (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	4313      	orrs	r3, r2
 8002864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002866:	4b20      	ldr	r3, [pc, #128]	@ (80028e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d001      	beq.n	8002878 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e032      	b.n	80028de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	d008      	beq.n	8002896 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002884:	4b19      	ldr	r3, [pc, #100]	@ (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4916      	ldr	r1, [pc, #88]	@ (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 8002892:	4313      	orrs	r3, r2
 8002894:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d009      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028a2:	4b12      	ldr	r3, [pc, #72]	@ (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	490e      	ldr	r1, [pc, #56]	@ (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028b6:	f000 f821 	bl	80028fc <HAL_RCC_GetSysClockFreq>
 80028ba:	4602      	mov	r2, r0
 80028bc:	4b0b      	ldr	r3, [pc, #44]	@ (80028ec <HAL_RCC_ClockConfig+0x1c8>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	091b      	lsrs	r3, r3, #4
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	490a      	ldr	r1, [pc, #40]	@ (80028f0 <HAL_RCC_ClockConfig+0x1cc>)
 80028c8:	5ccb      	ldrb	r3, [r1, r3]
 80028ca:	fa22 f303 	lsr.w	r3, r2, r3
 80028ce:	4a09      	ldr	r2, [pc, #36]	@ (80028f4 <HAL_RCC_ClockConfig+0x1d0>)
 80028d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028d2:	4b09      	ldr	r3, [pc, #36]	@ (80028f8 <HAL_RCC_ClockConfig+0x1d4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe fb32 	bl	8000f40 <HAL_InitTick>

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40023c00 	.word	0x40023c00
 80028ec:	40023800 	.word	0x40023800
 80028f0:	080030e4 	.word	0x080030e4
 80028f4:	20000004 	.word	0x20000004
 80028f8:	20000008 	.word	0x20000008

080028fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002900:	b090      	sub	sp, #64	@ 0x40
 8002902:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002904:	2300      	movs	r3, #0
 8002906:	637b      	str	r3, [r7, #52]	@ 0x34
 8002908:	2300      	movs	r3, #0
 800290a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800290c:	2300      	movs	r3, #0
 800290e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002914:	4b59      	ldr	r3, [pc, #356]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 030c 	and.w	r3, r3, #12
 800291c:	2b08      	cmp	r3, #8
 800291e:	d00d      	beq.n	800293c <HAL_RCC_GetSysClockFreq+0x40>
 8002920:	2b08      	cmp	r3, #8
 8002922:	f200 80a1 	bhi.w	8002a68 <HAL_RCC_GetSysClockFreq+0x16c>
 8002926:	2b00      	cmp	r3, #0
 8002928:	d002      	beq.n	8002930 <HAL_RCC_GetSysClockFreq+0x34>
 800292a:	2b04      	cmp	r3, #4
 800292c:	d003      	beq.n	8002936 <HAL_RCC_GetSysClockFreq+0x3a>
 800292e:	e09b      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002930:	4b53      	ldr	r3, [pc, #332]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0x184>)
 8002932:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002934:	e09b      	b.n	8002a6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002936:	4b53      	ldr	r3, [pc, #332]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0x188>)
 8002938:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800293a:	e098      	b.n	8002a6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800293c:	4b4f      	ldr	r3, [pc, #316]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0x180>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002944:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002946:	4b4d      	ldr	r3, [pc, #308]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d028      	beq.n	80029a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002952:	4b4a      	ldr	r3, [pc, #296]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	099b      	lsrs	r3, r3, #6
 8002958:	2200      	movs	r2, #0
 800295a:	623b      	str	r3, [r7, #32]
 800295c:	627a      	str	r2, [r7, #36]	@ 0x24
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002964:	2100      	movs	r1, #0
 8002966:	4b47      	ldr	r3, [pc, #284]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0x188>)
 8002968:	fb03 f201 	mul.w	r2, r3, r1
 800296c:	2300      	movs	r3, #0
 800296e:	fb00 f303 	mul.w	r3, r0, r3
 8002972:	4413      	add	r3, r2
 8002974:	4a43      	ldr	r2, [pc, #268]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0x188>)
 8002976:	fba0 1202 	umull	r1, r2, r0, r2
 800297a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800297c:	460a      	mov	r2, r1
 800297e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002980:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002982:	4413      	add	r3, r2
 8002984:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002988:	2200      	movs	r2, #0
 800298a:	61bb      	str	r3, [r7, #24]
 800298c:	61fa      	str	r2, [r7, #28]
 800298e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002992:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002996:	f7fd fc43 	bl	8000220 <__aeabi_uldivmod>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4613      	mov	r3, r2
 80029a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029a2:	e053      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029a4:	4b35      	ldr	r3, [pc, #212]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0x180>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	099b      	lsrs	r3, r3, #6
 80029aa:	2200      	movs	r2, #0
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	617a      	str	r2, [r7, #20]
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029b6:	f04f 0b00 	mov.w	fp, #0
 80029ba:	4652      	mov	r2, sl
 80029bc:	465b      	mov	r3, fp
 80029be:	f04f 0000 	mov.w	r0, #0
 80029c2:	f04f 0100 	mov.w	r1, #0
 80029c6:	0159      	lsls	r1, r3, #5
 80029c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029cc:	0150      	lsls	r0, r2, #5
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	ebb2 080a 	subs.w	r8, r2, sl
 80029d6:	eb63 090b 	sbc.w	r9, r3, fp
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	f04f 0300 	mov.w	r3, #0
 80029e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80029ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80029ee:	ebb2 0408 	subs.w	r4, r2, r8
 80029f2:	eb63 0509 	sbc.w	r5, r3, r9
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	00eb      	lsls	r3, r5, #3
 8002a00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a04:	00e2      	lsls	r2, r4, #3
 8002a06:	4614      	mov	r4, r2
 8002a08:	461d      	mov	r5, r3
 8002a0a:	eb14 030a 	adds.w	r3, r4, sl
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	eb45 030b 	adc.w	r3, r5, fp
 8002a14:	607b      	str	r3, [r7, #4]
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	f04f 0300 	mov.w	r3, #0
 8002a1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a22:	4629      	mov	r1, r5
 8002a24:	028b      	lsls	r3, r1, #10
 8002a26:	4621      	mov	r1, r4
 8002a28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a2c:	4621      	mov	r1, r4
 8002a2e:	028a      	lsls	r2, r1, #10
 8002a30:	4610      	mov	r0, r2
 8002a32:	4619      	mov	r1, r3
 8002a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a36:	2200      	movs	r2, #0
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	60fa      	str	r2, [r7, #12]
 8002a3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a40:	f7fd fbee 	bl	8000220 <__aeabi_uldivmod>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4613      	mov	r3, r2
 8002a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	0c1b      	lsrs	r3, r3, #16
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	3301      	adds	r3, #1
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002a5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a64:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a66:	e002      	b.n	8002a6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a68:	4b05      	ldr	r3, [pc, #20]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3740      	adds	r7, #64	@ 0x40
 8002a74:	46bd      	mov	sp, r7
 8002a76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	00f42400 	.word	0x00f42400
 8002a84:	017d7840 	.word	0x017d7840

08002a88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e049      	b.n	8002b2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d106      	bne.n	8002ab4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7fe f9f0 	bl	8000e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	f000 f900 	bl	8002ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_TIM_ConfigClockSource+0x1c>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e0b4      	b.n	8002cbe <HAL_TIM_ConfigClockSource+0x186>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	4b56      	ldr	r3, [pc, #344]	@ (8002cc8 <HAL_TIM_ConfigClockSource+0x190>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b8c:	d03e      	beq.n	8002c0c <HAL_TIM_ConfigClockSource+0xd4>
 8002b8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b92:	f200 8087 	bhi.w	8002ca4 <HAL_TIM_ConfigClockSource+0x16c>
 8002b96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b9a:	f000 8086 	beq.w	8002caa <HAL_TIM_ConfigClockSource+0x172>
 8002b9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ba2:	d87f      	bhi.n	8002ca4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ba4:	2b70      	cmp	r3, #112	@ 0x70
 8002ba6:	d01a      	beq.n	8002bde <HAL_TIM_ConfigClockSource+0xa6>
 8002ba8:	2b70      	cmp	r3, #112	@ 0x70
 8002baa:	d87b      	bhi.n	8002ca4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bac:	2b60      	cmp	r3, #96	@ 0x60
 8002bae:	d050      	beq.n	8002c52 <HAL_TIM_ConfigClockSource+0x11a>
 8002bb0:	2b60      	cmp	r3, #96	@ 0x60
 8002bb2:	d877      	bhi.n	8002ca4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bb4:	2b50      	cmp	r3, #80	@ 0x50
 8002bb6:	d03c      	beq.n	8002c32 <HAL_TIM_ConfigClockSource+0xfa>
 8002bb8:	2b50      	cmp	r3, #80	@ 0x50
 8002bba:	d873      	bhi.n	8002ca4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bbc:	2b40      	cmp	r3, #64	@ 0x40
 8002bbe:	d058      	beq.n	8002c72 <HAL_TIM_ConfigClockSource+0x13a>
 8002bc0:	2b40      	cmp	r3, #64	@ 0x40
 8002bc2:	d86f      	bhi.n	8002ca4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bc4:	2b30      	cmp	r3, #48	@ 0x30
 8002bc6:	d064      	beq.n	8002c92 <HAL_TIM_ConfigClockSource+0x15a>
 8002bc8:	2b30      	cmp	r3, #48	@ 0x30
 8002bca:	d86b      	bhi.n	8002ca4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bcc:	2b20      	cmp	r3, #32
 8002bce:	d060      	beq.n	8002c92 <HAL_TIM_ConfigClockSource+0x15a>
 8002bd0:	2b20      	cmp	r3, #32
 8002bd2:	d867      	bhi.n	8002ca4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d05c      	beq.n	8002c92 <HAL_TIM_ConfigClockSource+0x15a>
 8002bd8:	2b10      	cmp	r3, #16
 8002bda:	d05a      	beq.n	8002c92 <HAL_TIM_ConfigClockSource+0x15a>
 8002bdc:	e062      	b.n	8002ca4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bee:	f000 f993 	bl	8002f18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002c00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	609a      	str	r2, [r3, #8]
      break;
 8002c0a:	e04f      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c1c:	f000 f97c 	bl	8002f18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c2e:	609a      	str	r2, [r3, #8]
      break;
 8002c30:	e03c      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f000 f8f0 	bl	8002e24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2150      	movs	r1, #80	@ 0x50
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 f949 	bl	8002ee2 <TIM_ITRx_SetConfig>
      break;
 8002c50:	e02c      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c5e:	461a      	mov	r2, r3
 8002c60:	f000 f90f 	bl	8002e82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2160      	movs	r1, #96	@ 0x60
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 f939 	bl	8002ee2 <TIM_ITRx_SetConfig>
      break;
 8002c70:	e01c      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c7e:	461a      	mov	r2, r3
 8002c80:	f000 f8d0 	bl	8002e24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2140      	movs	r1, #64	@ 0x40
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 f929 	bl	8002ee2 <TIM_ITRx_SetConfig>
      break;
 8002c90:	e00c      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	f000 f920 	bl	8002ee2 <TIM_ITRx_SetConfig>
      break;
 8002ca2:	e003      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca8:	e000      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002caa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	fffeff88 	.word	0xfffeff88

08002ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a46      	ldr	r2, [pc, #280]	@ (8002df8 <TIM_Base_SetConfig+0x12c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d013      	beq.n	8002d0c <TIM_Base_SetConfig+0x40>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cea:	d00f      	beq.n	8002d0c <TIM_Base_SetConfig+0x40>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a43      	ldr	r2, [pc, #268]	@ (8002dfc <TIM_Base_SetConfig+0x130>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00b      	beq.n	8002d0c <TIM_Base_SetConfig+0x40>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a42      	ldr	r2, [pc, #264]	@ (8002e00 <TIM_Base_SetConfig+0x134>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d007      	beq.n	8002d0c <TIM_Base_SetConfig+0x40>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a41      	ldr	r2, [pc, #260]	@ (8002e04 <TIM_Base_SetConfig+0x138>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d003      	beq.n	8002d0c <TIM_Base_SetConfig+0x40>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a40      	ldr	r2, [pc, #256]	@ (8002e08 <TIM_Base_SetConfig+0x13c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d108      	bne.n	8002d1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a35      	ldr	r2, [pc, #212]	@ (8002df8 <TIM_Base_SetConfig+0x12c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d02b      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d2c:	d027      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a32      	ldr	r2, [pc, #200]	@ (8002dfc <TIM_Base_SetConfig+0x130>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d023      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a31      	ldr	r2, [pc, #196]	@ (8002e00 <TIM_Base_SetConfig+0x134>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d01f      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a30      	ldr	r2, [pc, #192]	@ (8002e04 <TIM_Base_SetConfig+0x138>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d01b      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a2f      	ldr	r2, [pc, #188]	@ (8002e08 <TIM_Base_SetConfig+0x13c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d017      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a2e      	ldr	r2, [pc, #184]	@ (8002e0c <TIM_Base_SetConfig+0x140>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d013      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a2d      	ldr	r2, [pc, #180]	@ (8002e10 <TIM_Base_SetConfig+0x144>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00f      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a2c      	ldr	r2, [pc, #176]	@ (8002e14 <TIM_Base_SetConfig+0x148>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d00b      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a2b      	ldr	r2, [pc, #172]	@ (8002e18 <TIM_Base_SetConfig+0x14c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d007      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a2a      	ldr	r2, [pc, #168]	@ (8002e1c <TIM_Base_SetConfig+0x150>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d003      	beq.n	8002d7e <TIM_Base_SetConfig+0xb2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a29      	ldr	r2, [pc, #164]	@ (8002e20 <TIM_Base_SetConfig+0x154>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d108      	bne.n	8002d90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a10      	ldr	r2, [pc, #64]	@ (8002df8 <TIM_Base_SetConfig+0x12c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d003      	beq.n	8002dc4 <TIM_Base_SetConfig+0xf8>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a12      	ldr	r2, [pc, #72]	@ (8002e08 <TIM_Base_SetConfig+0x13c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d103      	bne.n	8002dcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d105      	bne.n	8002dea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	f023 0201 	bic.w	r2, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	611a      	str	r2, [r3, #16]
  }
}
 8002dea:	bf00      	nop
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40010000 	.word	0x40010000
 8002dfc:	40000400 	.word	0x40000400
 8002e00:	40000800 	.word	0x40000800
 8002e04:	40000c00 	.word	0x40000c00
 8002e08:	40010400 	.word	0x40010400
 8002e0c:	40014000 	.word	0x40014000
 8002e10:	40014400 	.word	0x40014400
 8002e14:	40014800 	.word	0x40014800
 8002e18:	40001800 	.word	0x40001800
 8002e1c:	40001c00 	.word	0x40001c00
 8002e20:	40002000 	.word	0x40002000

08002e24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	f023 0201 	bic.w	r2, r3, #1
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f023 030a 	bic.w	r3, r3, #10
 8002e60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	621a      	str	r2, [r3, #32]
}
 8002e76:	bf00      	nop
 8002e78:	371c      	adds	r7, #28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b087      	sub	sp, #28
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	f023 0210 	bic.w	r2, r3, #16
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002eac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	031b      	lsls	r3, r3, #12
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002ebe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	621a      	str	r2, [r3, #32]
}
 8002ed6:	bf00      	nop
 8002ed8:	371c      	adds	r7, #28
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b085      	sub	sp, #20
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
 8002eea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ef8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f043 0307 	orr.w	r3, r3, #7
 8002f04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	609a      	str	r2, [r3, #8]
}
 8002f0c:	bf00      	nop
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b087      	sub	sp, #28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	021a      	lsls	r2, r3, #8
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	609a      	str	r2, [r3, #8]
}
 8002f4c:	bf00      	nop
 8002f4e:	371c      	adds	r7, #28
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e06d      	b.n	800304c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a30      	ldr	r2, [pc, #192]	@ (8003058 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d004      	beq.n	8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a2f      	ldr	r2, [pc, #188]	@ (800305c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d108      	bne.n	8002fb6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002faa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fbc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a20      	ldr	r2, [pc, #128]	@ (8003058 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d022      	beq.n	8003020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fe2:	d01d      	beq.n	8003020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8003060 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d018      	beq.n	8003020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a1c      	ldr	r2, [pc, #112]	@ (8003064 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d013      	beq.n	8003020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a1a      	ldr	r2, [pc, #104]	@ (8003068 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d00e      	beq.n	8003020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a15      	ldr	r2, [pc, #84]	@ (800305c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d009      	beq.n	8003020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a16      	ldr	r2, [pc, #88]	@ (800306c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d004      	beq.n	8003020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a15      	ldr	r2, [pc, #84]	@ (8003070 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d10c      	bne.n	800303a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003026:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	4313      	orrs	r3, r2
 8003030:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	40010000 	.word	0x40010000
 800305c:	40010400 	.word	0x40010400
 8003060:	40000400 	.word	0x40000400
 8003064:	40000800 	.word	0x40000800
 8003068:	40000c00 	.word	0x40000c00
 800306c:	40014000 	.word	0x40014000
 8003070:	40001800 	.word	0x40001800

08003074 <memset>:
 8003074:	4402      	add	r2, r0
 8003076:	4603      	mov	r3, r0
 8003078:	4293      	cmp	r3, r2
 800307a:	d100      	bne.n	800307e <memset+0xa>
 800307c:	4770      	bx	lr
 800307e:	f803 1b01 	strb.w	r1, [r3], #1
 8003082:	e7f9      	b.n	8003078 <memset+0x4>

08003084 <__libc_init_array>:
 8003084:	b570      	push	{r4, r5, r6, lr}
 8003086:	4d0d      	ldr	r5, [pc, #52]	@ (80030bc <__libc_init_array+0x38>)
 8003088:	4c0d      	ldr	r4, [pc, #52]	@ (80030c0 <__libc_init_array+0x3c>)
 800308a:	1b64      	subs	r4, r4, r5
 800308c:	10a4      	asrs	r4, r4, #2
 800308e:	2600      	movs	r6, #0
 8003090:	42a6      	cmp	r6, r4
 8003092:	d109      	bne.n	80030a8 <__libc_init_array+0x24>
 8003094:	4d0b      	ldr	r5, [pc, #44]	@ (80030c4 <__libc_init_array+0x40>)
 8003096:	4c0c      	ldr	r4, [pc, #48]	@ (80030c8 <__libc_init_array+0x44>)
 8003098:	f000 f818 	bl	80030cc <_init>
 800309c:	1b64      	subs	r4, r4, r5
 800309e:	10a4      	asrs	r4, r4, #2
 80030a0:	2600      	movs	r6, #0
 80030a2:	42a6      	cmp	r6, r4
 80030a4:	d105      	bne.n	80030b2 <__libc_init_array+0x2e>
 80030a6:	bd70      	pop	{r4, r5, r6, pc}
 80030a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ac:	4798      	blx	r3
 80030ae:	3601      	adds	r6, #1
 80030b0:	e7ee      	b.n	8003090 <__libc_init_array+0xc>
 80030b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030b6:	4798      	blx	r3
 80030b8:	3601      	adds	r6, #1
 80030ba:	e7f2      	b.n	80030a2 <__libc_init_array+0x1e>
 80030bc:	080030fc 	.word	0x080030fc
 80030c0:	080030fc 	.word	0x080030fc
 80030c4:	080030fc 	.word	0x080030fc
 80030c8:	08003100 	.word	0x08003100

080030cc <_init>:
 80030cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ce:	bf00      	nop
 80030d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030d2:	bc08      	pop	{r3}
 80030d4:	469e      	mov	lr, r3
 80030d6:	4770      	bx	lr

080030d8 <_fini>:
 80030d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030da:	bf00      	nop
 80030dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030de:	bc08      	pop	{r3}
 80030e0:	469e      	mov	lr, r3
 80030e2:	4770      	bx	lr
